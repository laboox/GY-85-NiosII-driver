
iictest.elf:     file format elf32-littlenios2
iictest.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005a34 memsz 0x00005a34 flags r-x
    LOAD off    0x00006a54 vaddr 0x00015a54 paddr 0x00015d2c align 2**12
         filesz 0x000002d8 memsz 0x000002d8 flags rw-
    LOAD off    0x00007004 vaddr 0x00016004 paddr 0x00016004 align 2**12
         filesz 0x00000000 memsz 0x000000b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00005838  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  00015858  00015858  00006858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d8  00015a54  00015d2c  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000000b8  00016004  00016004  00007004  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00006d2c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a8  00000000  00000000  00006d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000ce8  00000000  00000000  00007600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000dd2d  00000000  00000000  000082e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000047f2  00000000  00000000  00016015  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009d28  00000000  00000000  0001a807  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fc8  00000000  00000000  00024530  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001244  00000000  00000000  000254f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000346a  00000000  00000000  0002673c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  00029ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000428  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0002c233  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002c23f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002c240  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0002c241  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0002c245  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002c249  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0002c24d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0002c258  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0002c263  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0002c26e  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001b  00000000  00000000  0002c272  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00034b65  00000000  00000000  0002c28d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00015858 l    d  .rodata	00000000 .rodata
00015a54 l    d  .rwdata	00000000 .rwdata
00016004 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 HMC5883L.c
00000000 l    df *ABS*	00000000 Main.c
00000000 l    df *ABS*	00000000 adxl345.c
00000000 l    df *ABS*	00000000 i2c_controller.c
00000000 l    df *ABS*	00000000 itg3205.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 s_atan.c
000158bc l     O .rodata	00000020 atanhi
000158dc l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
000120b4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013868 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00015a54 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00014070 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
0001423c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00014464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015b34 l     O .rwdata	0000002c jtag_uart_0
00014528 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00014a00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00014aa4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014b84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014cdc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00014e18 l     F .text	000000dc alt_file_locked
0001507c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00015634 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000157f4 l     F .text	00000040 alt_sim_halt
000142a8 g     F .text	0000006c alt_main
00011c4c g     F .text	00000018 fabs
00015d2c g       *ABS*	00000000 __flash_rwdata_start
00012bd4 g     F .text	00000088 __eqdf2
000137b0 g     F .text	00000054 printf
000102e4 g     F .text	000000b4 HMC5883L_scale_axes
00011fcc g     F .text	00000094 __fixsfsi
00016016 g     O .bss	00000002 alpha_x
00012c5c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010e40 g     F .text	000000b8 i2c_write
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00016020 g     O .bss	00000004 errno
00012ddc g     F .text	00000038 __make_dp
00013270 g     F .text	0000002c __make_fp
00016028 g     O .bss	00000004 alt_argv
0001dd08 g       *ABS*	00000000 _gp
00014314 g     F .text	00000030 usleep
0001112c g     F .text	00000054 gyro_init
00016012 g     O .bss	00000002 g_offy
00015b88 g     O .rwdata	00000180 alt_fd_list
0001515c g     F .text	00000094 alt_find_dev
00012ce4 g     F .text	000000f8 __floatsidf
00014da0 g     F .text	00000078 alt_io_redirect
00015858 g       *ABS*	00000000 __DTOR_END__
00011000 g     F .text	0000005c writeTo
00010c58 g     F .text	0000005c adxl_write
0001600a g     O .bss	00000002 acc_y
00014610 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00013804 g     F .text	00000044 _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000141ac g     F .text	00000008 __udivsi3
00010cb4 g     F .text	00000030 adxl_init
000153c8 g     F .text	00000090 alt_icache_flush
00016004 g     O .bss	00000002 mag_x
0001105c g     F .text	000000d0 readFrom
00015d24 g     O .rwdata	00000004 alt_max_fd
000135b0 g     F .text	00000138 __unpack_d
00012060 g     F .text	00000054 __extendsfdf2
00016018 g     O .bss	00000002 temp
00012544 g     F .text	00000074 __adddf3
00015d10 g     O .rwdata	00000004 _global_impure_ptr
000160bc g       *ABS*	00000000 __bss_end
00010938 g     F .text	00000054 lcd_clear
00011180 g     F .text	000000e0 gyro_read_data
00015b60 g     O .rwdata	00000028 alt_dev_null
00013100 g     F .text	000000c8 __unpack_f
00014a60 g     F .text	00000044 alt_dcache_flush_all
00015d2c g       *ABS*	00000000 __ram_rwdata_end
00015d1c g     O .rwdata	00000008 alt_dev_list
00014344 g     F .text	00000120 write
00011264 g     F .text	00000350 __ieee754_atan2
00015a54 g       *ABS*	00000000 __ram_rodata_end
000141b4 g     F .text	00000008 __umodsi3
00016010 g     O .bss	00000002 g_offx
000160bc g       *ABS*	00000000 end
00012fa0 g     F .text	00000160 __pack_f
00015854 g       *ABS*	00000000 __CTOR_LIST__
00019ca0 g       *ABS*	00000000 __alt_stack_pointer
00012f20 g     F .text	00000080 __clzsi2
00016006 g     O .bss	00000002 mag_y
00014714 g     F .text	000000a4 altera_avalon_jtag_uart_write
000138e8 g     F .text	00000630 ___vfprintf_internal_r
00015638 g     F .text	000001bc __call_exitprocs
00010020 g     F .text	0000004c _start
000101e0 g     F .text	00000104 HMC5883L_read_data
00011260 g     F .text	00000004 atan2
000144f8 g     F .text	00000030 alt_sys_init
00011f34 g     F .text	00000098 __floatsisf
000154c8 g     F .text	0000016c __register_exitproc
00015a54 g       *ABS*	00000000 __ram_rwdata_start
00015858 g       *ABS*	00000000 __ram_rodata_start
00011e44 g     F .text	00000078 __eqsf2
00016014 g     O .bss	00000002 g_offz
00014560 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00010614 g     F .text	00000228 HMC5883L_heading
00015310 g     F .text	000000b8 alt_get_fd
00010398 g     F .text	0000027c HMC5883L_set_scale
000147b8 g     F .text	0000014c alt_busy_sleep
000136e8 g     F .text	000000c8 __fpcmp_parts_d
0001548c g     F .text	0000003c memcmp
0001601a g     O .bss	00000002 alpha_z
000160bc g       *ABS*	00000000 __alt_stack_base
000109cc g     F .text	00000078 lcd_puts
0001297c g     F .text	00000258 __divdf3
000125b8 g     F .text	000003c4 __muldf3
000158fc g     O .rodata	00000010 __thenan_sf
000151f0 g     F .text	00000120 alt_find_file
00014ad0 g     F .text	000000b4 alt_dev_llist_insert
00015d08 g     O .rwdata	00000004 m_scale
00013f3c g     F .text	000000bc __sfvwrite_small_dev
00016004 g       *ABS*	00000000 __bss_start
0001083c g     F .text	000000fc lcd_init
00010a44 g     F .text	00000104 main
0001006c g     F .text	00000050 make_word
0001602c g     O .bss	00000004 alt_envp
000145b8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00010f28 g     F .text	000000d8 i2c_read
00011ebc g     F .text	00000078 __ltsf2
00012e14 g     F .text	00000074 __truncdfsf2
00016030 g     O .bss	0000008c _atexit0
00015d28 g     O .rwdata	00000004 alt_errno
00016008 g     O .bss	00000002 mag_z
00010ce4 g     F .text	00000114 adxl_read_data
000140ec g     F .text	00000060 __divsi3
0001590c g     O .rodata	00000014 __thenan_df
00015858 g       *ABS*	00000000 __CTOR_END__
00011c64 g     F .text	000001e0 __mulsf3
00010184 g     F .text	0000005c HMC5883L_write
00015858 g       *ABS*	00000000 __flash_rodata_start
00015858 g       *ABS*	00000000 __DTOR_LIST__
000144c4 g     F .text	00000034 alt_irq_init
000150dc g     F .text	00000060 alt_release_fd
000115b4 g     F .text	00000698 atan
00015920 g     O .rodata	00000100 __clz_tab
00015458 g     F .text	00000014 atexit
00013ff8 g     F .text	00000078 _write_r
00015d0c g     O .rwdata	00000004 _impure_ptr
00016024 g     O .bss	00000004 alt_argc
00014c48 g     F .text	00000064 _do_dtors
00010df8 g     F .text	00000048 i2c_init
00010be8 g     F .text	00000070 adxl_read
0001600c g     O .bss	00000002 acc_x
00015d14 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001601c g     O .bss	00000002 alpha_y
00015d2c g       *ABS*	00000000 _edata
000160bc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001098c g     F .text	00000040 lcd_putchar
00010110 g     F .text	00000074 HMC5883L_read
0001513c g     F .text	00000020 altera_nios2_qsys_irq_init
0001546c g     F .text	00000020 exit
000100bc g     F .text	00000054 HMC5883L_init
0001414c g     F .text	00000060 __modsi3
00019ca0 g       *ABS*	00000000 __alt_data_end
000131c8 g     F .text	000000a8 __fpcmp_parts_f
00015834 g     F .text	00000020 _exit
00012e88 g     F .text	00000098 __muldi3
00013848 g     F .text	00000020 strlen
00014ef4 g     F .text	00000188 open
00014cac g     F .text	00000030 alt_icache_flush_all
00010ef8 g     F .text	00000030 i2c_check_rxAck
00013f18 g     F .text	00000024 __vfprintf_internal
000124c4 g     F .text	00000080 __subdf3
00014be4 g     F .text	00000064 _do_ctors
0001600e g     O .bss	00000002 acc_z
00014904 g     F .text	000000fc close
00010b48 g     F .text	000000a0 adxl_read2
000141bc g     F .text	00000080 alt_load
0001329c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	dee72814 	ori	sp,sp,40096

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6b74214 	ori	gp,gp,56584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	10980114 	ori	r2,r2,24580

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18d82f14 	ori	r3,r3,24764

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	00141bc0 	call	141bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	00142a80 	call	142a8 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <make_word>:
signed short mag_z = 0;
float m_scale = 1.0;
#define PI 3.141592653

signed short make_word(unsigned char HB, unsigned char LB)
{
   1006c:	defffc04 	addi	sp,sp,-16
   10070:	df000315 	stw	fp,12(sp)
   10074:	df000304 	addi	fp,sp,12
   10078:	e13ffe05 	stb	r4,-8(fp)
   1007c:	e17fff05 	stb	r5,-4(fp)
	signed short val = 0;
   10080:	e03ffd0d 	sth	zero,-12(fp)

	val = HB;
   10084:	e0bffe03 	ldbu	r2,-8(fp)
   10088:	e0bffd0d 	sth	r2,-12(fp)
	val <<= 8;
   1008c:	e0bffd0f 	ldh	r2,-12(fp)
   10090:	1004923a 	slli	r2,r2,8
   10094:	e0bffd0d 	sth	r2,-12(fp)
	val |= LB;
   10098:	e0ffff03 	ldbu	r3,-4(fp)
   1009c:	e0bffd0b 	ldhu	r2,-12(fp)
   100a0:	10c4b03a 	or	r2,r2,r3
   100a4:	e0bffd0d 	sth	r2,-12(fp)
	return val;
   100a8:	e0bffd0f 	ldh	r2,-12(fp)
}
   100ac:	e037883a 	mov	sp,fp
   100b0:	df000017 	ldw	fp,0(sp)
   100b4:	dec00104 	addi	sp,sp,4
   100b8:	f800283a 	ret

000100bc <HMC5883L_init>:

/*
 * hmc5883l initializations
 */
void HMC5883L_init()
{
   100bc:	defffe04 	addi	sp,sp,-8
   100c0:	dfc00115 	stw	ra,4(sp)
   100c4:	df000015 	stw	fp,0(sp)
   100c8:	d839883a 	mov	fp,sp
	HMC5883L_write(Config_Reg_A, 0x70);
   100cc:	0009883a 	mov	r4,zero
   100d0:	01401c04 	movi	r5,112
   100d4:	00101840 	call	10184 <HMC5883L_write>
	HMC5883L_write(Config_Reg_B, 0xA0);
   100d8:	01000044 	movi	r4,1
   100dc:	01402804 	movi	r5,160
   100e0:	00101840 	call	10184 <HMC5883L_write>
	HMC5883L_write(Mode_Reg, 0x00);
   100e4:	01000084 	movi	r4,2
   100e8:	000b883a 	mov	r5,zero
   100ec:	00101840 	call	10184 <HMC5883L_write>
	/*
	 * can select any valid scale
	 * 	see: HMC5883L_set_scale function
	 */
	HMC5883L_set_scale(1.3);
   100f0:	010fe9b4 	movhi	r4,16294
   100f4:	21199984 	addi	r4,r4,26214
   100f8:	00103980 	call	10398 <HMC5883L_set_scale>
}
   100fc:	e037883a 	mov	sp,fp
   10100:	dfc00117 	ldw	ra,4(sp)
   10104:	df000017 	ldw	fp,0(sp)
   10108:	dec00204 	addi	sp,sp,8
   1010c:	f800283a 	ret

00010110 <HMC5883L_read>:


unsigned char HMC5883L_read(unsigned char reg)
{
   10110:	defffc04 	addi	sp,sp,-16
   10114:	dfc00315 	stw	ra,12(sp)
   10118:	df000215 	stw	fp,8(sp)
   1011c:	df000204 	addi	fp,sp,8
   10120:	e13fff05 	stb	r4,-4(fp)
	unsigned char val = 0;
   10124:	e03ffe05 	stb	zero,-8(fp)

	i2c_write(HMC5883L_WRITE_ADDR,1,0);
   10128:	01000f04 	movi	r4,60
   1012c:	01400044 	movi	r5,1
   10130:	000d883a 	mov	r6,zero
   10134:	0010e400 	call	10e40 <i2c_write>
	i2c_write(reg,0,0);
   10138:	e13fff03 	ldbu	r4,-4(fp)
   1013c:	000b883a 	mov	r5,zero
   10140:	000d883a 	mov	r6,zero
   10144:	0010e400 	call	10e40 <i2c_write>
	i2c_write(HMC5883L_READ_ADDR,1,0);
   10148:	01000f44 	movi	r4,61
   1014c:	01400044 	movi	r5,1
   10150:	000d883a 	mov	r6,zero
   10154:	0010e400 	call	10e40 <i2c_write>
	val = i2c_read(0,1,0);
   10158:	0009883a 	mov	r4,zero
   1015c:	01400044 	movi	r5,1
   10160:	000d883a 	mov	r6,zero
   10164:	0010f280 	call	10f28 <i2c_read>
   10168:	e0bffe05 	stb	r2,-8(fp)
	return(val);
   1016c:	e0bffe03 	ldbu	r2,-8(fp)
}
   10170:	e037883a 	mov	sp,fp
   10174:	dfc00117 	ldw	ra,4(sp)
   10178:	df000017 	ldw	fp,0(sp)
   1017c:	dec00204 	addi	sp,sp,8
   10180:	f800283a 	ret

00010184 <HMC5883L_write>:


void HMC5883L_write(unsigned char reg_address, unsigned char value)
{
   10184:	defffc04 	addi	sp,sp,-16
   10188:	dfc00315 	stw	ra,12(sp)
   1018c:	df000215 	stw	fp,8(sp)
   10190:	df000204 	addi	fp,sp,8
   10194:	e13ffe05 	stb	r4,-8(fp)
   10198:	e17fff05 	stb	r5,-4(fp)
	i2c_write(HMC5883L_WRITE_ADDR,1,0);
   1019c:	01000f04 	movi	r4,60
   101a0:	01400044 	movi	r5,1
   101a4:	000d883a 	mov	r6,zero
   101a8:	0010e400 	call	10e40 <i2c_write>
	i2c_write(reg_address,0,0);
   101ac:	e13ffe03 	ldbu	r4,-8(fp)
   101b0:	000b883a 	mov	r5,zero
   101b4:	000d883a 	mov	r6,zero
   101b8:	0010e400 	call	10e40 <i2c_write>
	i2c_write(value,0,1);
   101bc:	e13fff03 	ldbu	r4,-4(fp)
   101c0:	000b883a 	mov	r5,zero
   101c4:	01800044 	movi	r6,1
   101c8:	0010e400 	call	10e40 <i2c_write>
}
   101cc:	e037883a 	mov	sp,fp
   101d0:	dfc00117 	ldw	ra,4(sp)
   101d4:	df000017 	ldw	fp,0(sp)
   101d8:	dec00204 	addi	sp,sp,8
   101dc:	f800283a 	ret

000101e0 <HMC5883L_read_data>:
/*
 * reading compass axis data
 * refreshing mag_x, mag_y and mag_z variables
 */
void HMC5883L_read_data()
{
   101e0:	defffd04 	addi	sp,sp,-12
   101e4:	dfc00215 	stw	ra,8(sp)
   101e8:	df000115 	stw	fp,4(sp)
   101ec:	df000104 	addi	fp,sp,4
	unsigned char lsb = 0;
   101f0:	e03fff45 	stb	zero,-3(fp)
	unsigned char msb = 0;
   101f4:	e03fff05 	stb	zero,-4(fp)

	i2c_write(HMC5883L_WRITE_ADDR,1,0);
   101f8:	01000f04 	movi	r4,60
   101fc:	01400044 	movi	r5,1
   10200:	000d883a 	mov	r6,zero
   10204:	0010e400 	call	10e40 <i2c_write>
	i2c_write(X_MSB_Reg,0,0);
   10208:	010000c4 	movi	r4,3
   1020c:	000b883a 	mov	r5,zero
   10210:	000d883a 	mov	r6,zero
   10214:	0010e400 	call	10e40 <i2c_write>
	i2c_write(HMC5883L_READ_ADDR,1,0);
   10218:	01000f44 	movi	r4,61
   1021c:	01400044 	movi	r5,1
   10220:	000d883a 	mov	r6,zero
   10224:	0010e400 	call	10e40 <i2c_write>

	msb = i2c_read(0,0,1);
   10228:	0009883a 	mov	r4,zero
   1022c:	000b883a 	mov	r5,zero
   10230:	01800044 	movi	r6,1
   10234:	0010f280 	call	10f28 <i2c_read>
   10238:	e0bfff05 	stb	r2,-4(fp)
	lsb = i2c_read(0,0,1);
   1023c:	0009883a 	mov	r4,zero
   10240:	000b883a 	mov	r5,zero
   10244:	01800044 	movi	r6,1
   10248:	0010f280 	call	10f28 <i2c_read>
   1024c:	e0bfff45 	stb	r2,-3(fp)
	mag_x = make_word(msb, lsb);
   10250:	e13fff03 	ldbu	r4,-4(fp)
   10254:	e17fff43 	ldbu	r5,-3(fp)
   10258:	001006c0 	call	1006c <make_word>
   1025c:	d0a0bf0d 	sth	r2,-32004(gp)

	msb = i2c_read(0,0,1);
   10260:	0009883a 	mov	r4,zero
   10264:	000b883a 	mov	r5,zero
   10268:	01800044 	movi	r6,1
   1026c:	0010f280 	call	10f28 <i2c_read>
   10270:	e0bfff05 	stb	r2,-4(fp)
	lsb = i2c_read(0,0,1);
   10274:	0009883a 	mov	r4,zero
   10278:	000b883a 	mov	r5,zero
   1027c:	01800044 	movi	r6,1
   10280:	0010f280 	call	10f28 <i2c_read>
   10284:	e0bfff45 	stb	r2,-3(fp)
	mag_z = make_word(msb, lsb);
   10288:	e13fff03 	ldbu	r4,-4(fp)
   1028c:	e17fff43 	ldbu	r5,-3(fp)
   10290:	001006c0 	call	1006c <make_word>
   10294:	d0a0c00d 	sth	r2,-32000(gp)

	msb = i2c_read(0,0,1);
   10298:	0009883a 	mov	r4,zero
   1029c:	000b883a 	mov	r5,zero
   102a0:	01800044 	movi	r6,1
   102a4:	0010f280 	call	10f28 <i2c_read>
   102a8:	e0bfff05 	stb	r2,-4(fp)
	lsb = i2c_read(0,1,0);
   102ac:	0009883a 	mov	r4,zero
   102b0:	01400044 	movi	r5,1
   102b4:	000d883a 	mov	r6,zero
   102b8:	0010f280 	call	10f28 <i2c_read>
   102bc:	e0bfff45 	stb	r2,-3(fp)
	mag_y = make_word(msb, lsb);
   102c0:	e13fff03 	ldbu	r4,-4(fp)
   102c4:	e17fff43 	ldbu	r5,-3(fp)
   102c8:	001006c0 	call	1006c <make_word>
   102cc:	d0a0bf8d 	sth	r2,-32002(gp)
}
   102d0:	e037883a 	mov	sp,fp
   102d4:	dfc00117 	ldw	ra,4(sp)
   102d8:	df000017 	ldw	fp,0(sp)
   102dc:	dec00204 	addi	sp,sp,8
   102e0:	f800283a 	ret

000102e4 <HMC5883L_scale_axes>:


void HMC5883L_scale_axes()
{
   102e4:	defffe04 	addi	sp,sp,-8
   102e8:	dfc00115 	stw	ra,4(sp)
   102ec:	df000015 	stw	fp,0(sp)
   102f0:	d839883a 	mov	fp,sp
   mag_x *= m_scale;
   102f4:	d0a0bf0b 	ldhu	r2,-32004(gp)
   102f8:	113fffcc 	andi	r4,r2,65535
   102fc:	2120001c 	xori	r4,r4,32768
   10300:	21200004 	addi	r4,r4,-32768
   10304:	0011f340 	call	11f34 <__floatsisf>
   10308:	d0e00017 	ldw	r3,-32768(gp)
   1030c:	1009883a 	mov	r4,r2
   10310:	180b883a 	mov	r5,r3
   10314:	0011c640 	call	11c64 <__mulsf3>
   10318:	1009883a 	mov	r4,r2
   1031c:	0011fcc0 	call	11fcc <__fixsfsi>
   10320:	d0a0bf0d 	sth	r2,-32004(gp)
   mag_z *= m_scale;
   10324:	d0a0c00b 	ldhu	r2,-32000(gp)
   10328:	113fffcc 	andi	r4,r2,65535
   1032c:	2120001c 	xori	r4,r4,32768
   10330:	21200004 	addi	r4,r4,-32768
   10334:	0011f340 	call	11f34 <__floatsisf>
   10338:	d0e00017 	ldw	r3,-32768(gp)
   1033c:	1009883a 	mov	r4,r2
   10340:	180b883a 	mov	r5,r3
   10344:	0011c640 	call	11c64 <__mulsf3>
   10348:	1009883a 	mov	r4,r2
   1034c:	0011fcc0 	call	11fcc <__fixsfsi>
   10350:	d0a0c00d 	sth	r2,-32000(gp)
   mag_y *= m_scale;
   10354:	d0a0bf8b 	ldhu	r2,-32002(gp)
   10358:	113fffcc 	andi	r4,r2,65535
   1035c:	2120001c 	xori	r4,r4,32768
   10360:	21200004 	addi	r4,r4,-32768
   10364:	0011f340 	call	11f34 <__floatsisf>
   10368:	d0e00017 	ldw	r3,-32768(gp)
   1036c:	1009883a 	mov	r4,r2
   10370:	180b883a 	mov	r5,r3
   10374:	0011c640 	call	11c64 <__mulsf3>
   10378:	1009883a 	mov	r4,r2
   1037c:	0011fcc0 	call	11fcc <__fixsfsi>
   10380:	d0a0bf8d 	sth	r2,-32002(gp)
}
   10384:	e037883a 	mov	sp,fp
   10388:	dfc00117 	ldw	ra,4(sp)
   1038c:	df000017 	ldw	fp,0(sp)
   10390:	dec00204 	addi	sp,sp,8
   10394:	f800283a 	ret

00010398 <HMC5883L_set_scale>:


void HMC5883L_set_scale(float gauss)
{
   10398:	defffc04 	addi	sp,sp,-16
   1039c:	dfc00315 	stw	ra,12(sp)
   103a0:	df000215 	stw	fp,8(sp)
   103a4:	df000204 	addi	fp,sp,8
   103a8:	e13fff15 	stw	r4,-4(fp)
	unsigned char value = 0;
   103ac:	e03ffe05 	stb	zero,-8(fp)

	if(gauss == 0.88)
   103b0:	e13fff17 	ldw	r4,-4(fp)
   103b4:	00120600 	call	12060 <__extendsfdf2>
   103b8:	100b883a 	mov	r5,r2
   103bc:	180d883a 	mov	r6,r3
   103c0:	2809883a 	mov	r4,r5
   103c4:	300b883a 	mov	r5,r6
   103c8:	01b0a3f4 	movhi	r6,49807
   103cc:	31970a44 	addi	r6,r6,23593
   103d0:	01cffb34 	movhi	r7,16364
   103d4:	39ca3d44 	addi	r7,r7,10485
   103d8:	0012bd40 	call	12bd4 <__eqdf2>
   103dc:	1005003a 	cmpeq	r2,r2,zero
   103e0:	1000011e 	bne	r2,zero,103e8 <HMC5883L_set_scale+0x50>
   103e4:	00000506 	br	103fc <HMC5883L_set_scale+0x64>
	{
	  value = 0x00;
   103e8:	e03ffe05 	stb	zero,-8(fp)
	  m_scale = 0.73;
   103ec:	008fcef4 	movhi	r2,16187
   103f0:	10b85204 	addi	r2,r2,-7864
   103f4:	d0a00015 	stw	r2,-32768(gp)
   103f8:	00007b06 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 1.3)
   103fc:	e13fff17 	ldw	r4,-4(fp)
   10400:	00120600 	call	12060 <__extendsfdf2>
   10404:	100b883a 	mov	r5,r2
   10408:	180d883a 	mov	r6,r3
   1040c:	2809883a 	mov	r4,r5
   10410:	300b883a 	mov	r5,r6
   10414:	01b33374 	movhi	r6,52429
   10418:	31b33344 	addi	r6,r6,-13107
   1041c:	01cffd74 	movhi	r7,16373
   10420:	39f33304 	addi	r7,r7,-13108
   10424:	0012bd40 	call	12bd4 <__eqdf2>
   10428:	1005003a 	cmpeq	r2,r2,zero
   1042c:	1000011e 	bne	r2,zero,10434 <HMC5883L_set_scale+0x9c>
   10430:	00000606 	br	1044c <HMC5883L_set_scale+0xb4>
	{
	  value = 0x01;
   10434:	00800044 	movi	r2,1
   10438:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 0.92;
   1043c:	008fdb34 	movhi	r2,16236
   10440:	10a147c4 	addi	r2,r2,-31457
   10444:	d0a00015 	stw	r2,-32768(gp)
   10448:	00006706 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 1.9)
   1044c:	e13fff17 	ldw	r4,-4(fp)
   10450:	00120600 	call	12060 <__extendsfdf2>
   10454:	100b883a 	mov	r5,r2
   10458:	180d883a 	mov	r6,r3
   1045c:	2809883a 	mov	r4,r5
   10460:	300b883a 	mov	r5,r6
   10464:	019999b4 	movhi	r6,26214
   10468:	31999984 	addi	r6,r6,26214
   1046c:	01cfffb4 	movhi	r7,16382
   10470:	39d99984 	addi	r7,r7,26214
   10474:	0012bd40 	call	12bd4 <__eqdf2>
   10478:	1005003a 	cmpeq	r2,r2,zero
   1047c:	1000011e 	bne	r2,zero,10484 <HMC5883L_set_scale+0xec>
   10480:	00000606 	br	1049c <HMC5883L_set_scale+0x104>
	{
	  value = 0x02;
   10484:	00800084 	movi	r2,2
   10488:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 1.22;
   1048c:	008fe734 	movhi	r2,16284
   10490:	108a3d84 	addi	r2,r2,10486
   10494:	d0a00015 	stw	r2,-32768(gp)
   10498:	00005306 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 2.5)
   1049c:	e13fff17 	ldw	r4,-4(fp)
   104a0:	01500834 	movhi	r5,16416
   104a4:	0011e440 	call	11e44 <__eqsf2>
   104a8:	1005003a 	cmpeq	r2,r2,zero
   104ac:	1000011e 	bne	r2,zero,104b4 <HMC5883L_set_scale+0x11c>
   104b0:	00000606 	br	104cc <HMC5883L_set_scale+0x134>
	{
	  value = 0x03;
   104b4:	008000c4 	movi	r2,3
   104b8:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 1.52;
   104bc:	008ff0f4 	movhi	r2,16323
   104c0:	10a3d704 	addi	r2,r2,-28836
   104c4:	d0a00015 	stw	r2,-32768(gp)
   104c8:	00004706 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 4.0)
   104cc:	e13fff17 	ldw	r4,-4(fp)
   104d0:	01502034 	movhi	r5,16512
   104d4:	0011e440 	call	11e44 <__eqsf2>
   104d8:	1005003a 	cmpeq	r2,r2,zero
   104dc:	1000011e 	bne	r2,zero,104e4 <HMC5883L_set_scale+0x14c>
   104e0:	00000606 	br	104fc <HMC5883L_set_scale+0x164>
	{
	  value = 0x04;
   104e4:	00800104 	movi	r2,4
   104e8:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 2.27;
   104ec:	00900474 	movhi	r2,16401
   104f0:	1091eb84 	addi	r2,r2,18350
   104f4:	d0a00015 	stw	r2,-32768(gp)
   104f8:	00003b06 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 4.7)
   104fc:	e13fff17 	ldw	r4,-4(fp)
   10500:	00120600 	call	12060 <__extendsfdf2>
   10504:	100b883a 	mov	r5,r2
   10508:	180d883a 	mov	r6,r3
   1050c:	2809883a 	mov	r4,r5
   10510:	300b883a 	mov	r5,r6
   10514:	01b33374 	movhi	r6,52429
   10518:	31b33344 	addi	r6,r6,-13107
   1051c:	01d004f4 	movhi	r7,16403
   10520:	39f33304 	addi	r7,r7,-13108
   10524:	0012bd40 	call	12bd4 <__eqdf2>
   10528:	1005003a 	cmpeq	r2,r2,zero
   1052c:	1000011e 	bne	r2,zero,10534 <HMC5883L_set_scale+0x19c>
   10530:	00000606 	br	1054c <HMC5883L_set_scale+0x1b4>
	{
	  value = 0x05;
   10534:	00800144 	movi	r2,5
   10538:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 2.56;
   1053c:	00900934 	movhi	r2,16420
   10540:	10b5c284 	addi	r2,r2,-10486
   10544:	d0a00015 	stw	r2,-32768(gp)
   10548:	00002706 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 5.6)
   1054c:	e13fff17 	ldw	r4,-4(fp)
   10550:	00120600 	call	12060 <__extendsfdf2>
   10554:	100b883a 	mov	r5,r2
   10558:	180d883a 	mov	r6,r3
   1055c:	2809883a 	mov	r4,r5
   10560:	300b883a 	mov	r5,r6
   10564:	019999b4 	movhi	r6,26214
   10568:	31999984 	addi	r6,r6,26214
   1056c:	01d005b4 	movhi	r7,16406
   10570:	39d99984 	addi	r7,r7,26214
   10574:	0012bd40 	call	12bd4 <__eqdf2>
   10578:	1005003a 	cmpeq	r2,r2,zero
   1057c:	1000011e 	bne	r2,zero,10584 <HMC5883L_set_scale+0x1ec>
   10580:	00000606 	br	1059c <HMC5883L_set_scale+0x204>
	{
	  value = 0x06;
   10584:	00800184 	movi	r2,6
   10588:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 3.03;
   1058c:	009010b4 	movhi	r2,16450
   10590:	10bae144 	addi	r2,r2,-5243
   10594:	d0a00015 	stw	r2,-32768(gp)
   10598:	00001306 	br	105e8 <HMC5883L_set_scale+0x250>
	}

	else if(gauss == 8.1)
   1059c:	e13fff17 	ldw	r4,-4(fp)
   105a0:	00120600 	call	12060 <__extendsfdf2>
   105a4:	100b883a 	mov	r5,r2
   105a8:	180d883a 	mov	r6,r3
   105ac:	2809883a 	mov	r4,r5
   105b0:	300b883a 	mov	r5,r6
   105b4:	018cccf4 	movhi	r6,13107
   105b8:	318cccc4 	addi	r6,r6,13107
   105bc:	01d00834 	movhi	r7,16416
   105c0:	39ccccc4 	addi	r7,r7,13107
   105c4:	0012bd40 	call	12bd4 <__eqdf2>
   105c8:	1005003a 	cmpeq	r2,r2,zero
   105cc:	1000011e 	bne	r2,zero,105d4 <HMC5883L_set_scale+0x23c>
   105d0:	00000506 	br	105e8 <HMC5883L_set_scale+0x250>
	{
	  value = 0x07;
   105d4:	008001c4 	movi	r2,7
   105d8:	e0bffe05 	stb	r2,-8(fp)
	  m_scale = 4.35;
   105dc:	009022f4 	movhi	r2,16523
   105e0:	108cccc4 	addi	r2,r2,13107
   105e4:	d0a00015 	stw	r2,-32768(gp)
	}

	value <<= 5;
   105e8:	e0bffe03 	ldbu	r2,-8(fp)
   105ec:	1004917a 	slli	r2,r2,5
   105f0:	e0bffe05 	stb	r2,-8(fp)
	HMC5883L_write(Config_Reg_B, value);
   105f4:	e17ffe03 	ldbu	r5,-8(fp)
   105f8:	01000044 	movi	r4,1
   105fc:	00101840 	call	10184 <HMC5883L_write>
}
   10600:	e037883a 	mov	sp,fp
   10604:	dfc00117 	ldw	ra,4(sp)
   10608:	df000017 	ldw	fp,0(sp)
   1060c:	dec00204 	addi	sp,sp,8
   10610:	f800283a 	ret

00010614 <HMC5883L_heading>:
/*
 * do refreshes and scales and
 * return the magnetic angle
 */
float HMC5883L_heading()
{
   10614:	defffb04 	addi	sp,sp,-20
   10618:	dfc00415 	stw	ra,16(sp)
   1061c:	df000315 	stw	fp,12(sp)
   10620:	dc400215 	stw	r17,8(sp)
   10624:	dc000115 	stw	r16,4(sp)
   10628:	df000104 	addi	fp,sp,4
   float heading = 0.0;
   1062c:	e03fff15 	stw	zero,-4(fp)

   HMC5883L_read_data();
   10630:	00101e00 	call	101e0 <HMC5883L_read_data>
   HMC5883L_scale_axes();
   10634:	00102e40 	call	102e4 <HMC5883L_scale_axes>
   heading = atan2(mag_y, mag_x);
   10638:	d0a0bf8b 	ldhu	r2,-32002(gp)
   1063c:	113fffcc 	andi	r4,r2,65535
   10640:	2120001c 	xori	r4,r4,32768
   10644:	21200004 	addi	r4,r4,-32768
   10648:	0012ce40 	call	12ce4 <__floatsidf>
   1064c:	1021883a 	mov	r16,r2
   10650:	1823883a 	mov	r17,r3
   10654:	d0a0bf0b 	ldhu	r2,-32004(gp)
   10658:	113fffcc 	andi	r4,r2,65535
   1065c:	2120001c 	xori	r4,r4,32768
   10660:	21200004 	addi	r4,r4,-32768
   10664:	0012ce40 	call	12ce4 <__floatsidf>
   10668:	100f883a 	mov	r7,r2
   1066c:	1811883a 	mov	r8,r3
   10670:	8009883a 	mov	r4,r16
   10674:	880b883a 	mov	r5,r17
   10678:	380d883a 	mov	r6,r7
   1067c:	400f883a 	mov	r7,r8
   10680:	00112600 	call	11260 <atan2>
   10684:	100b883a 	mov	r5,r2
   10688:	180d883a 	mov	r6,r3
   1068c:	2809883a 	mov	r4,r5
   10690:	300b883a 	mov	r5,r6
   10694:	0012e140 	call	12e14 <__truncdfsf2>
   10698:	e0bfff15 	stw	r2,-4(fp)
   heading += declination_angle;//declination_angle;
   1069c:	e13fff17 	ldw	r4,-4(fp)
   106a0:	00120600 	call	12060 <__extendsfdf2>
   106a4:	100b883a 	mov	r5,r2
   106a8:	180d883a 	mov	r6,r3
   106ac:	2809883a 	mov	r4,r5
   106b0:	300b883a 	mov	r5,r6
   106b4:	019999b4 	movhi	r6,26214
   106b8:	31999984 	addi	r6,r6,26214
   106bc:	01d00474 	movhi	r7,16401
   106c0:	39d99984 	addi	r7,r7,26214
   106c4:	00125440 	call	12544 <__adddf3>
   106c8:	1009883a 	mov	r4,r2
   106cc:	180b883a 	mov	r5,r3
   106d0:	2005883a 	mov	r2,r4
   106d4:	2807883a 	mov	r3,r5
   106d8:	1009883a 	mov	r4,r2
   106dc:	180b883a 	mov	r5,r3
   106e0:	0012e140 	call	12e14 <__truncdfsf2>
   106e4:	e0bfff15 	stw	r2,-4(fp)

    if(heading < 0.0)
   106e8:	e13fff17 	ldw	r4,-4(fp)
   106ec:	000b883a 	mov	r5,zero
   106f0:	0011ebc0 	call	11ebc <__ltsf2>
   106f4:	1004803a 	cmplt	r2,r2,zero
   106f8:	1000011e 	bne	r2,zero,10700 <HMC5883L_heading+0xec>
   106fc:	00001306 	br	1074c <HMC5883L_heading+0x138>
    {
      heading += (2.0 * PI);
   10700:	e13fff17 	ldw	r4,-4(fp)
   10704:	00120600 	call	12060 <__extendsfdf2>
   10708:	100b883a 	mov	r5,r2
   1070c:	180d883a 	mov	r6,r3
   10710:	2809883a 	mov	r4,r5
   10714:	300b883a 	mov	r5,r6
   10718:	01950c34 	movhi	r6,21552
   1071c:	31ba4e04 	addi	r6,r6,-5832
   10720:	01d00674 	movhi	r7,16409
   10724:	39c87ec4 	addi	r7,r7,8699
   10728:	00125440 	call	12544 <__adddf3>
   1072c:	1009883a 	mov	r4,r2
   10730:	180b883a 	mov	r5,r3
   10734:	2005883a 	mov	r2,r4
   10738:	2807883a 	mov	r3,r5
   1073c:	1009883a 	mov	r4,r2
   10740:	180b883a 	mov	r5,r3
   10744:	0012e140 	call	12e14 <__truncdfsf2>
   10748:	e0bfff15 	stw	r2,-4(fp)
    }

    if(heading > (2.0 * PI))
   1074c:	e13fff17 	ldw	r4,-4(fp)
   10750:	00120600 	call	12060 <__extendsfdf2>
   10754:	100b883a 	mov	r5,r2
   10758:	180d883a 	mov	r6,r3
   1075c:	2809883a 	mov	r4,r5
   10760:	300b883a 	mov	r5,r6
   10764:	01950c34 	movhi	r6,21552
   10768:	31ba4e04 	addi	r6,r6,-5832
   1076c:	01d00674 	movhi	r7,16409
   10770:	39c87ec4 	addi	r7,r7,8699
   10774:	0012c5c0 	call	12c5c <__gtdf2>
   10778:	10800048 	cmpgei	r2,r2,1
   1077c:	1000011e 	bne	r2,zero,10784 <HMC5883L_heading+0x170>
   10780:	00001306 	br	107d0 <HMC5883L_heading+0x1bc>
    {
      heading -= (2.0 * PI);
   10784:	e13fff17 	ldw	r4,-4(fp)
   10788:	00120600 	call	12060 <__extendsfdf2>
   1078c:	100b883a 	mov	r5,r2
   10790:	180d883a 	mov	r6,r3
   10794:	2809883a 	mov	r4,r5
   10798:	300b883a 	mov	r5,r6
   1079c:	01950c34 	movhi	r6,21552
   107a0:	31ba4e04 	addi	r6,r6,-5832
   107a4:	01d00674 	movhi	r7,16409
   107a8:	39c87ec4 	addi	r7,r7,8699
   107ac:	00124c40 	call	124c4 <__subdf3>
   107b0:	1009883a 	mov	r4,r2
   107b4:	180b883a 	mov	r5,r3
   107b8:	2005883a 	mov	r2,r4
   107bc:	2807883a 	mov	r3,r5
   107c0:	1009883a 	mov	r4,r2
   107c4:	180b883a 	mov	r5,r3
   107c8:	0012e140 	call	12e14 <__truncdfsf2>
   107cc:	e0bfff15 	stw	r2,-4(fp)
    }

   heading *= (180.0 / PI);
   107d0:	e13fff17 	ldw	r4,-4(fp)
   107d4:	00120600 	call	12060 <__extendsfdf2>
   107d8:	100b883a 	mov	r5,r2
   107dc:	180d883a 	mov	r6,r3
   107e0:	2809883a 	mov	r4,r5
   107e4:	300b883a 	mov	r5,r6
   107e8:	01869ef4 	movhi	r6,6779
   107ec:	31b6dc04 	addi	r6,r6,-9360
   107f0:	01d01374 	movhi	r7,16461
   107f4:	39e97704 	addi	r7,r7,-23076
   107f8:	00125b80 	call	125b8 <__muldf3>
   107fc:	1009883a 	mov	r4,r2
   10800:	180b883a 	mov	r5,r3
   10804:	2005883a 	mov	r2,r4
   10808:	2807883a 	mov	r3,r5
   1080c:	1009883a 	mov	r4,r2
   10810:	180b883a 	mov	r5,r3
   10814:	0012e140 	call	12e14 <__truncdfsf2>
   10818:	e0bfff15 	stw	r2,-4(fp)

   return heading;
   1081c:	e0bfff17 	ldw	r2,-4(fp)
}
   10820:	e037883a 	mov	sp,fp
   10824:	dfc00317 	ldw	ra,12(sp)
   10828:	df000217 	ldw	fp,8(sp)
   1082c:	dc400117 	ldw	r17,4(sp)
   10830:	dc000017 	ldw	r16,0(sp)
   10834:	dec00404 	addi	sp,sp,16
   10838:	f800283a 	ret

0001083c <lcd_init>:

#define LCD_WR_DATA_REG  2
#define LCD_WR_COMMAND_REG 0
#define LCD_BASE LCD_16207_0_BASE

void lcd_init( void ) {
   1083c:	defffe04 	addi	sp,sp,-8
   10840:	dfc00115 	stw	ra,4(sp)
   10844:	df000015 	stw	fp,0(sp)
   10848:	d839883a 	mov	fp,sp
	/* Set Function Code Four Times -- 8-bit, 2 line, 5x7 mode */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
   1084c:	00c000b4 	movhi	r3,2
   10850:	18c40004 	addi	r3,r3,4096
   10854:	00800e04 	movi	r2,56
   10858:	18800035 	stwio	r2,0(r3)
	usleep(4100); /* Wait 4.1 ms */
   1085c:	01040104 	movi	r4,4100
   10860:	00143140 	call	14314 <usleep>
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
   10864:	00c000b4 	movhi	r3,2
   10868:	18c40004 	addi	r3,r3,4096
   1086c:	00800e04 	movi	r2,56
   10870:	18800035 	stwio	r2,0(r3)
	usleep(100); /* Wait 100 us */
   10874:	01001904 	movi	r4,100
   10878:	00143140 	call	14314 <usleep>
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
   1087c:	00c000b4 	movhi	r3,2
   10880:	18c40004 	addi	r3,r3,4096
   10884:	00800e04 	movi	r2,56
   10888:	18800035 	stwio	r2,0(r3)
	usleep(5000); /* Wait 5.0 ms */
   1088c:	0104e204 	movi	r4,5000
   10890:	00143140 	call	14314 <usleep>
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x38 );
   10894:	00c000b4 	movhi	r3,2
   10898:	18c40004 	addi	r3,r3,4096
   1089c:	00800e04 	movi	r2,56
   108a0:	18800035 	stwio	r2,0(r3)
	usleep(100);
   108a4:	01001904 	movi	r4,100
   108a8:	00143140 	call	14314 <usleep>
	/* Set Display to OFF */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x08 );
   108ac:	00c000b4 	movhi	r3,2
   108b0:	18c40004 	addi	r3,r3,4096
   108b4:	00800204 	movi	r2,8
   108b8:	18800035 	stwio	r2,0(r3)
	usleep(100);
   108bc:	01001904 	movi	r4,100
   108c0:	00143140 	call	14314 <usleep>
	/* Set Display to ON */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x0C );
   108c4:	00c000b4 	movhi	r3,2
   108c8:	18c40004 	addi	r3,r3,4096
   108cc:	00800304 	movi	r2,12
   108d0:	18800035 	stwio	r2,0(r3)
	usleep(100);
   108d4:	01001904 	movi	r4,100
   108d8:	00143140 	call	14314 <usleep>
	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x06 );
   108dc:	00c000b4 	movhi	r3,2
   108e0:	18c40004 	addi	r3,r3,4096
   108e4:	00800184 	movi	r2,6
   108e8:	18800035 	stwio	r2,0(r3)
	usleep(100);
   108ec:	01001904 	movi	r4,100
   108f0:	00143140 	call	14314 <usleep>
	/* Set the cursor to the home position */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x02 );
   108f4:	00c000b4 	movhi	r3,2
   108f8:	18c40004 	addi	r3,r3,4096
   108fc:	00800084 	movi	r2,2
   10900:	18800035 	stwio	r2,0(r3)
	usleep(2000);
   10904:	0101f404 	movi	r4,2000
   10908:	00143140 	call	14314 <usleep>
	/* Clear the display */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x01 );
   1090c:	00c000b4 	movhi	r3,2
   10910:	18c40004 	addi	r3,r3,4096
   10914:	00800044 	movi	r2,1
   10918:	18800035 	stwio	r2,0(r3)
	usleep(2000);
   1091c:	0101f404 	movi	r4,2000
   10920:	00143140 	call	14314 <usleep>
}
   10924:	e037883a 	mov	sp,fp
   10928:	dfc00117 	ldw	ra,4(sp)
   1092c:	df000017 	ldw	fp,0(sp)
   10930:	dec00204 	addi	sp,sp,8
   10934:	f800283a 	ret

00010938 <lcd_clear>:

void lcd_clear( void ) {
   10938:	defffe04 	addi	sp,sp,-8
   1093c:	dfc00115 	stw	ra,4(sp)
   10940:	df000015 	stw	fp,0(sp)
   10944:	d839883a 	mov	fp,sp
	/* Set the cursor to the home position */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x02 );
   10948:	00c000b4 	movhi	r3,2
   1094c:	18c40004 	addi	r3,r3,4096
   10950:	00800084 	movi	r2,2
   10954:	18800035 	stwio	r2,0(r3)
	usleep(2000);
   10958:	0101f404 	movi	r4,2000
   1095c:	00143140 	call	14314 <usleep>
	/* Clear the display */
	IOWR( LCD_BASE, LCD_WR_COMMAND_REG, 0x01 );
   10960:	00c000b4 	movhi	r3,2
   10964:	18c40004 	addi	r3,r3,4096
   10968:	00800044 	movi	r2,1
   1096c:	18800035 	stwio	r2,0(r3)
	usleep(2000);
   10970:	0101f404 	movi	r4,2000
   10974:	00143140 	call	14314 <usleep>
}
   10978:	e037883a 	mov	sp,fp
   1097c:	dfc00117 	ldw	ra,4(sp)
   10980:	df000017 	ldw	fp,0(sp)
   10984:	dec00204 	addi	sp,sp,8
   10988:	f800283a 	ret

0001098c <lcd_putchar>:

void lcd_putchar ( char c ) {
   1098c:	defffd04 	addi	sp,sp,-12
   10990:	dfc00215 	stw	ra,8(sp)
   10994:	df000115 	stw	fp,4(sp)
   10998:	df000104 	addi	fp,sp,4
   1099c:	e13fff05 	stb	r4,-4(fp)
	/* Write char on LCD */
	IOWR(LCD_BASE, LCD_WR_DATA_REG, c);
   109a0:	e0ffff07 	ldb	r3,-4(fp)
   109a4:	008000b4 	movhi	r2,2
   109a8:	10840204 	addi	r2,r2,4104
   109ac:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   109b0:	0101f404 	movi	r4,2000
   109b4:	00143140 	call	14314 <usleep>
}
   109b8:	e037883a 	mov	sp,fp
   109bc:	dfc00117 	ldw	ra,4(sp)
   109c0:	df000017 	ldw	fp,0(sp)
   109c4:	dec00204 	addi	sp,sp,8
   109c8:	f800283a 	ret

000109cc <lcd_puts>:

void lcd_puts ( const char* string ) {
   109cc:	defffb04 	addi	sp,sp,-20
   109d0:	dfc00415 	stw	ra,16(sp)
   109d4:	df000315 	stw	fp,12(sp)
   109d8:	dc000215 	stw	r16,8(sp)
   109dc:	df000204 	addi	fp,sp,8
   109e0:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=0;i<strlen(string);i++){
   109e4:	e03ffe15 	stw	zero,-8(fp)
   109e8:	00000c06 	br	10a1c <lcd_puts+0x50>
		lcd_putchar(string[i]);
   109ec:	e0bffe17 	ldw	r2,-8(fp)
   109f0:	1007883a 	mov	r3,r2
   109f4:	e0bfff17 	ldw	r2,-4(fp)
   109f8:	1885883a 	add	r2,r3,r2
   109fc:	10800003 	ldbu	r2,0(r2)
   10a00:	11003fcc 	andi	r4,r2,255
   10a04:	2100201c 	xori	r4,r4,128
   10a08:	213fe004 	addi	r4,r4,-128
   10a0c:	001098c0 	call	1098c <lcd_putchar>
	usleep(2000);
}

void lcd_puts ( const char* string ) {
	int i;
	for(i=0;i<strlen(string);i++){
   10a10:	e0bffe17 	ldw	r2,-8(fp)
   10a14:	10800044 	addi	r2,r2,1
   10a18:	e0bffe15 	stw	r2,-8(fp)
   10a1c:	e43ffe17 	ldw	r16,-8(fp)
   10a20:	e13fff17 	ldw	r4,-4(fp)
   10a24:	00138480 	call	13848 <strlen>
   10a28:	80bff036 	bltu	r16,r2,109ec <lcd_puts+0x20>
		lcd_putchar(string[i]);
	}
}
   10a2c:	e037883a 	mov	sp,fp
   10a30:	dfc00217 	ldw	ra,8(sp)
   10a34:	df000117 	ldw	fp,4(sp)
   10a38:	dc000017 	ldw	r16,0(sp)
   10a3c:	dec00304 	addi	sp,sp,12
   10a40:	f800283a 	ret

00010a44 <main>:

int main()
{
   10a44:	defffd04 	addi	sp,sp,-12
   10a48:	dfc00215 	stw	ra,8(sp)
   10a4c:	df000115 	stw	fp,4(sp)
   10a50:	df000104 	addi	fp,sp,4
	float head = 0;
   10a54:	e03fff15 	stw	zero,-4(fp)

	lcd_init();
   10a58:	001083c0 	call	1083c <lcd_init>
	i2c_init();
   10a5c:	0010df80 	call	10df8 <i2c_init>
	HMC5883L_init();
   10a60:	00100bc0 	call	100bc <HMC5883L_init>
	gyro_init();
   10a64:	001112c0 	call	1112c <gyro_init>
	adxl_init();
   10a68:	0010cb40 	call	10cb4 <adxl_init>

	while(1){
		adxl_read_data();
   10a6c:	0010ce40 	call	10ce4 <adxl_read_data>
		head = HMC5883L_heading();
   10a70:	00106140 	call	10614 <HMC5883L_heading>
   10a74:	e0bfff15 	stw	r2,-4(fp)
		gyro_read_data();
   10a78:	00111800 	call	11180 <gyro_read_data>
		printf("acc_x: %d, acc_y: %d, acc_z: %d\n", acc_x, acc_y, acc_z);
   10a7c:	00800074 	movhi	r2,1
   10a80:	10980304 	addi	r2,r2,24588
   10a84:	1080000b 	ldhu	r2,0(r2)
   10a88:	117fffcc 	andi	r5,r2,65535
   10a8c:	2960001c 	xori	r5,r5,32768
   10a90:	29600004 	addi	r5,r5,-32768
   10a94:	00800074 	movhi	r2,1
   10a98:	10980284 	addi	r2,r2,24586
   10a9c:	1080000b 	ldhu	r2,0(r2)
   10aa0:	11bfffcc 	andi	r6,r2,65535
   10aa4:	31a0001c 	xori	r6,r6,32768
   10aa8:	31a00004 	addi	r6,r6,-32768
   10aac:	00800074 	movhi	r2,1
   10ab0:	10980384 	addi	r2,r2,24590
   10ab4:	1080000b 	ldhu	r2,0(r2)
   10ab8:	11ffffcc 	andi	r7,r2,65535
   10abc:	39e0001c 	xori	r7,r7,32768
   10ac0:	39e00004 	addi	r7,r7,-32768
   10ac4:	01000074 	movhi	r4,1
   10ac8:	21161604 	addi	r4,r4,22616
   10acc:	00137b00 	call	137b0 <printf>
		printf("compass heading: %d\n", (int)head);
   10ad0:	e13fff17 	ldw	r4,-4(fp)
   10ad4:	0011fcc0 	call	11fcc <__fixsfsi>
   10ad8:	100b883a 	mov	r5,r2
   10adc:	01000074 	movhi	r4,1
   10ae0:	21161f04 	addi	r4,r4,22652
   10ae4:	00137b00 	call	137b0 <printf>
		printf("alpha_x: %d, alpha_y: %d, alpha_z: %d\n\n", alpha_x, alpha_y, alpha_z);
   10ae8:	00800074 	movhi	r2,1
   10aec:	10980584 	addi	r2,r2,24598
   10af0:	1080000b 	ldhu	r2,0(r2)
   10af4:	117fffcc 	andi	r5,r2,65535
   10af8:	2960001c 	xori	r5,r5,32768
   10afc:	29600004 	addi	r5,r5,-32768
   10b00:	00800074 	movhi	r2,1
   10b04:	10980704 	addi	r2,r2,24604
   10b08:	1080000b 	ldhu	r2,0(r2)
   10b0c:	11bfffcc 	andi	r6,r2,65535
   10b10:	31a0001c 	xori	r6,r6,32768
   10b14:	31a00004 	addi	r6,r6,-32768
   10b18:	00800074 	movhi	r2,1
   10b1c:	10980684 	addi	r2,r2,24602
   10b20:	1080000b 	ldhu	r2,0(r2)
   10b24:	11ffffcc 	andi	r7,r2,65535
   10b28:	39e0001c 	xori	r7,r7,32768
   10b2c:	39e00004 	addi	r7,r7,-32768
   10b30:	01000074 	movhi	r4,1
   10b34:	21162504 	addi	r4,r4,22676
   10b38:	00137b00 	call	137b0 <printf>

		usleep(10000);
   10b3c:	0109c404 	movi	r4,10000
   10b40:	00143140 	call	14314 <usleep>
	}
   10b44:	003fc906 	br	10a6c <main+0x28>

00010b48 <adxl_read2>:
signed short acc_x, acc_y, acc_z;

/*
 * to read an axis call adxl_read2(ADXL_REG_X)
 */
signed short adxl_read2(unsigned char reg){
   10b48:	defffc04 	addi	sp,sp,-16
   10b4c:	dfc00315 	stw	ra,12(sp)
   10b50:	df000215 	stw	fp,8(sp)
   10b54:	df000204 	addi	fp,sp,8
   10b58:	e13fff05 	stb	r4,-4(fp)
    unsigned char DY0,DY1;
    i2c_write(0xA6,1,0);
   10b5c:	01002984 	movi	r4,166
   10b60:	01400044 	movi	r5,1
   10b64:	000d883a 	mov	r6,zero
   10b68:	0010e400 	call	10e40 <i2c_write>
    i2c_write(reg,0,0);
   10b6c:	e13fff03 	ldbu	r4,-4(fp)
   10b70:	000b883a 	mov	r5,zero
   10b74:	000d883a 	mov	r6,zero
   10b78:	0010e400 	call	10e40 <i2c_write>
    i2c_write(0xA7,1,0);
   10b7c:	010029c4 	movi	r4,167
   10b80:	01400044 	movi	r5,1
   10b84:	000d883a 	mov	r6,zero
   10b88:	0010e400 	call	10e40 <i2c_write>
    DY0 = i2c_read(0,0,1);
   10b8c:	0009883a 	mov	r4,zero
   10b90:	000b883a 	mov	r5,zero
   10b94:	01800044 	movi	r6,1
   10b98:	0010f280 	call	10f28 <i2c_read>
   10b9c:	e0bffe45 	stb	r2,-7(fp)
    DY1 = i2c_read(0,1,0);
   10ba0:	0009883a 	mov	r4,zero
   10ba4:	01400044 	movi	r5,1
   10ba8:	000d883a 	mov	r6,zero
   10bac:	0010f280 	call	10f28 <i2c_read>
   10bb0:	e0bffe05 	stb	r2,-8(fp)
    return (DY1<<8 | DY0);
   10bb4:	e0bffe03 	ldbu	r2,-8(fp)
   10bb8:	1004923a 	slli	r2,r2,8
   10bbc:	1007883a 	mov	r3,r2
   10bc0:	e0bffe43 	ldbu	r2,-7(fp)
   10bc4:	1884b03a 	or	r2,r3,r2
   10bc8:	10bfffcc 	andi	r2,r2,65535
   10bcc:	10a0001c 	xori	r2,r2,32768
   10bd0:	10a00004 	addi	r2,r2,-32768
}
   10bd4:	e037883a 	mov	sp,fp
   10bd8:	dfc00117 	ldw	ra,4(sp)
   10bdc:	df000017 	ldw	fp,0(sp)
   10be0:	dec00204 	addi	sp,sp,8
   10be4:	f800283a 	ret

00010be8 <adxl_read>:

unsigned char adxl_read(unsigned char reg){
   10be8:	defffc04 	addi	sp,sp,-16
   10bec:	dfc00315 	stw	ra,12(sp)
   10bf0:	df000215 	stw	fp,8(sp)
   10bf4:	df000204 	addi	fp,sp,8
   10bf8:	e13fff05 	stb	r4,-4(fp)
    unsigned char DY0;
    i2c_write(0xA6,1,0);
   10bfc:	01002984 	movi	r4,166
   10c00:	01400044 	movi	r5,1
   10c04:	000d883a 	mov	r6,zero
   10c08:	0010e400 	call	10e40 <i2c_write>
	i2c_write(reg,0,0);
   10c0c:	e13fff03 	ldbu	r4,-4(fp)
   10c10:	000b883a 	mov	r5,zero
   10c14:	000d883a 	mov	r6,zero
   10c18:	0010e400 	call	10e40 <i2c_write>
	i2c_write(0xA7,1,0);
   10c1c:	010029c4 	movi	r4,167
   10c20:	01400044 	movi	r5,1
   10c24:	000d883a 	mov	r6,zero
   10c28:	0010e400 	call	10e40 <i2c_write>
	DY0 = i2c_read(0,1,0);
   10c2c:	0009883a 	mov	r4,zero
   10c30:	01400044 	movi	r5,1
   10c34:	000d883a 	mov	r6,zero
   10c38:	0010f280 	call	10f28 <i2c_read>
   10c3c:	e0bffe05 	stb	r2,-8(fp)
	return DY0;
   10c40:	e0bffe03 	ldbu	r2,-8(fp)
}
   10c44:	e037883a 	mov	sp,fp
   10c48:	dfc00117 	ldw	ra,4(sp)
   10c4c:	df000017 	ldw	fp,0(sp)
   10c50:	dec00204 	addi	sp,sp,8
   10c54:	f800283a 	ret

00010c58 <adxl_write>:

void adxl_write(unsigned char reg, unsigned char data){
   10c58:	defffc04 	addi	sp,sp,-16
   10c5c:	dfc00315 	stw	ra,12(sp)
   10c60:	df000215 	stw	fp,8(sp)
   10c64:	df000204 	addi	fp,sp,8
   10c68:	e13ffe05 	stb	r4,-8(fp)
   10c6c:	e17fff05 	stb	r5,-4(fp)
	i2c_write(0xA6,1,0);
   10c70:	01002984 	movi	r4,166
   10c74:	01400044 	movi	r5,1
   10c78:	000d883a 	mov	r6,zero
   10c7c:	0010e400 	call	10e40 <i2c_write>
	i2c_write(reg,0,0);
   10c80:	e13ffe03 	ldbu	r4,-8(fp)
   10c84:	000b883a 	mov	r5,zero
   10c88:	000d883a 	mov	r6,zero
   10c8c:	0010e400 	call	10e40 <i2c_write>
	i2c_write(data,0,1);
   10c90:	e13fff03 	ldbu	r4,-4(fp)
   10c94:	000b883a 	mov	r5,zero
   10c98:	01800044 	movi	r6,1
   10c9c:	0010e400 	call	10e40 <i2c_write>
}
   10ca0:	e037883a 	mov	sp,fp
   10ca4:	dfc00117 	ldw	ra,4(sp)
   10ca8:	df000017 	ldw	fp,0(sp)
   10cac:	dec00204 	addi	sp,sp,8
   10cb0:	f800283a 	ret

00010cb4 <adxl_init>:

/*
 * call this function to setup ADXL345
 * scale can be changed
 */
void adxl_init(){
   10cb4:	defffe04 	addi	sp,sp,-8
   10cb8:	dfc00115 	stw	ra,4(sp)
   10cbc:	df000015 	stw	fp,0(sp)
   10cc0:	d839883a 	mov	fp,sp
	adxl_write(0x2D, 0x08); //MEASURE ON scale +/- 08
   10cc4:	01000b44 	movi	r4,45
   10cc8:	01400204 	movi	r5,8
   10ccc:	0010c580 	call	10c58 <adxl_write>
}
   10cd0:	e037883a 	mov	sp,fp
   10cd4:	dfc00117 	ldw	ra,4(sp)
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00204 	addi	sp,sp,8
   10ce0:	f800283a 	ret

00010ce4 <adxl_read_data>:

/*
 * To read ADXL345 data you can call this function and read acc_x, acc_y and acc_z
 */
void adxl_read_data(){
   10ce4:	defffd04 	addi	sp,sp,-12
   10ce8:	dfc00215 	stw	ra,8(sp)
   10cec:	df000115 	stw	fp,4(sp)
   10cf0:	df000104 	addi	fp,sp,4
	unsigned char DY0,DY1;
	i2c_write(0xA6,1,0);
   10cf4:	01002984 	movi	r4,166
   10cf8:	01400044 	movi	r5,1
   10cfc:	000d883a 	mov	r6,zero
   10d00:	0010e400 	call	10e40 <i2c_write>
	i2c_write(ADXL_REG_X,0,0);
   10d04:	01000c84 	movi	r4,50
   10d08:	000b883a 	mov	r5,zero
   10d0c:	000d883a 	mov	r6,zero
   10d10:	0010e400 	call	10e40 <i2c_write>
	i2c_write(0xA7,1,0);
   10d14:	010029c4 	movi	r4,167
   10d18:	01400044 	movi	r5,1
   10d1c:	000d883a 	mov	r6,zero
   10d20:	0010e400 	call	10e40 <i2c_write>
	DY0 = i2c_read(0,0,1);
   10d24:	0009883a 	mov	r4,zero
   10d28:	000b883a 	mov	r5,zero
   10d2c:	01800044 	movi	r6,1
   10d30:	0010f280 	call	10f28 <i2c_read>
   10d34:	e0bfff45 	stb	r2,-3(fp)
	DY1 = i2c_read(0,0,1);
   10d38:	0009883a 	mov	r4,zero
   10d3c:	000b883a 	mov	r5,zero
   10d40:	01800044 	movi	r6,1
   10d44:	0010f280 	call	10f28 <i2c_read>
   10d48:	e0bfff05 	stb	r2,-4(fp)
	acc_x = (DY1<<8 | DY0);
   10d4c:	e0bfff03 	ldbu	r2,-4(fp)
   10d50:	1004923a 	slli	r2,r2,8
   10d54:	1007883a 	mov	r3,r2
   10d58:	e0bfff43 	ldbu	r2,-3(fp)
   10d5c:	1884b03a 	or	r2,r3,r2
   10d60:	d0a0c10d 	sth	r2,-31996(gp)
	DY0 = i2c_read(0,0,1);
   10d64:	0009883a 	mov	r4,zero
   10d68:	000b883a 	mov	r5,zero
   10d6c:	01800044 	movi	r6,1
   10d70:	0010f280 	call	10f28 <i2c_read>
   10d74:	e0bfff45 	stb	r2,-3(fp)
	DY1 = i2c_read(0,0,1);
   10d78:	0009883a 	mov	r4,zero
   10d7c:	000b883a 	mov	r5,zero
   10d80:	01800044 	movi	r6,1
   10d84:	0010f280 	call	10f28 <i2c_read>
   10d88:	e0bfff05 	stb	r2,-4(fp)
	acc_y = (DY1<<8 | DY0);
   10d8c:	e0bfff03 	ldbu	r2,-4(fp)
   10d90:	1004923a 	slli	r2,r2,8
   10d94:	1007883a 	mov	r3,r2
   10d98:	e0bfff43 	ldbu	r2,-3(fp)
   10d9c:	1884b03a 	or	r2,r3,r2
   10da0:	d0a0c08d 	sth	r2,-31998(gp)
	DY0 = i2c_read(0,0,1);
   10da4:	0009883a 	mov	r4,zero
   10da8:	000b883a 	mov	r5,zero
   10dac:	01800044 	movi	r6,1
   10db0:	0010f280 	call	10f28 <i2c_read>
   10db4:	e0bfff45 	stb	r2,-3(fp)
	DY1 = i2c_read(0,1,0);
   10db8:	0009883a 	mov	r4,zero
   10dbc:	01400044 	movi	r5,1
   10dc0:	000d883a 	mov	r6,zero
   10dc4:	0010f280 	call	10f28 <i2c_read>
   10dc8:	e0bfff05 	stb	r2,-4(fp)
	acc_z = (DY1<<8 | DY0);
   10dcc:	e0bfff03 	ldbu	r2,-4(fp)
   10dd0:	1004923a 	slli	r2,r2,8
   10dd4:	1007883a 	mov	r3,r2
   10dd8:	e0bfff43 	ldbu	r2,-3(fp)
   10ddc:	1884b03a 	or	r2,r3,r2
   10de0:	d0a0c18d 	sth	r2,-31994(gp)
}
   10de4:	e037883a 	mov	sp,fp
   10de8:	dfc00117 	ldw	ra,4(sp)
   10dec:	df000017 	ldw	fp,0(sp)
   10df0:	dec00204 	addi	sp,sp,8
   10df4:	f800283a 	ret

00010df8 <i2c_init>:
/*
 * initialize of Opencores' I2C controller
 * Pre-scale value can change bye the following formula:
 * 	value = ((base frequency)/(5 * I2C speed)) + 1
 */
void i2c_init(){
   10df8:	deffff04 	addi	sp,sp,-4
   10dfc:	df000015 	stw	fp,0(sp)
   10e00:	d839883a 	mov	fp,sp
	// Pre-scale set to 100KHz for 50 MHz nios
	IOWR_8DIRECT(IIC_BASE, OC_I2C_PRER_LO, 0x64);
   10e04:	00c000b4 	movhi	r3,2
   10e08:	18c40404 	addi	r3,r3,4112
   10e0c:	00801904 	movi	r2,100
   10e10:	18800025 	stbio	r2,0(r3)
	IOWR_8DIRECT(IIC_BASE, OC_I2C_PRER_HI, 0x00);
   10e14:	008000b4 	movhi	r2,2
   10e18:	10840444 	addi	r2,r2,4113
   10e1c:	10000025 	stbio	zero,0(r2)

	// enable I2C controller
	IOWR_8DIRECT(IIC_BASE, OC_I2C_CTR, OC_I2C_EN);
   10e20:	00c000b4 	movhi	r3,2
   10e24:	18c40484 	addi	r3,r3,4114
   10e28:	00802004 	movi	r2,128
   10e2c:	18800025 	stbio	r2,0(r3)
}
   10e30:	e037883a 	mov	sp,fp
   10e34:	df000017 	ldw	fp,0(sp)
   10e38:	dec00104 	addi	sp,sp,4
   10e3c:	f800283a 	ret

00010e40 <i2c_write>:

/*
 * I2C write function
 */
void i2c_write(unsigned char data, unsigned char start, unsigned char stop)
{
   10e40:	defffc04 	addi	sp,sp,-16
   10e44:	df000315 	stw	fp,12(sp)
   10e48:	df000304 	addi	fp,sp,12
   10e4c:	e13ffd05 	stb	r4,-12(fp)
   10e50:	e17ffe05 	stb	r5,-8(fp)
   10e54:	e1bfff05 	stb	r6,-4(fp)
	IOWR_8DIRECT(IIC_BASE, OC_I2C_TXR, data);
   10e58:	e0fffd03 	ldbu	r3,-12(fp)
   10e5c:	008000b4 	movhi	r2,2
   10e60:	108404c4 	addi	r2,r2,4115
   10e64:	10c00025 	stbio	r3,0(r2)
    if(!start && !stop)
   10e68:	e0bffe03 	ldbu	r2,-8(fp)
   10e6c:	1004c03a 	cmpne	r2,r2,zero
   10e70:	1000081e 	bne	r2,zero,10e94 <i2c_write+0x54>
   10e74:	e0bfff03 	ldbu	r2,-4(fp)
   10e78:	1004c03a 	cmpne	r2,r2,zero
   10e7c:	1000051e 	bne	r2,zero,10e94 <i2c_write+0x54>
    	IOWR_8DIRECT(IIC_BASE, OC_I2C_CR, OC_I2C_WR);
   10e80:	00c000b4 	movhi	r3,2
   10e84:	18c40504 	addi	r3,r3,4116
   10e88:	00800404 	movi	r2,16
   10e8c:	18800025 	stbio	r2,0(r3)
 * I2C write function
 */
void i2c_write(unsigned char data, unsigned char start, unsigned char stop)
{
	IOWR_8DIRECT(IIC_BASE, OC_I2C_TXR, data);
    if(!start && !stop)
   10e90:	00000f06 	br	10ed0 <i2c_write+0x90>
    	IOWR_8DIRECT(IIC_BASE, OC_I2C_CR, OC_I2C_WR);
    else if(start)
   10e94:	e0bffe03 	ldbu	r2,-8(fp)
   10e98:	1005003a 	cmpeq	r2,r2,zero
   10e9c:	1000051e 	bne	r2,zero,10eb4 <i2c_write+0x74>
    	IOWR_8DIRECT(IIC_BASE, OC_I2C_CR, OC_I2C_WR | OC_I2C_STA);
   10ea0:	00c000b4 	movhi	r3,2
   10ea4:	18c40504 	addi	r3,r3,4116
   10ea8:	00802404 	movi	r2,144
   10eac:	18800025 	stbio	r2,0(r3)
   10eb0:	00000706 	br	10ed0 <i2c_write+0x90>
    else if(stop)
   10eb4:	e0bfff03 	ldbu	r2,-4(fp)
   10eb8:	1005003a 	cmpeq	r2,r2,zero
   10ebc:	1000041e 	bne	r2,zero,10ed0 <i2c_write+0x90>
    	IOWR_8DIRECT(IIC_BASE, OC_I2C_CR, OC_I2C_WR | OC_I2C_STO);
   10ec0:	00c000b4 	movhi	r3,2
   10ec4:	18c40504 	addi	r3,r3,4116
   10ec8:	00801404 	movi	r2,80
   10ecc:	18800025 	stbio	r2,0(r3)
    while (IORD_8DIRECT(IIC_BASE, OC_I2C_SR) & OC_I2C_TIP);
   10ed0:	008000b4 	movhi	r2,2
   10ed4:	10840504 	addi	r2,r2,4116
   10ed8:	10800023 	ldbuio	r2,0(r2)
   10edc:	1080008c 	andi	r2,r2,2
   10ee0:	1004c03a 	cmpne	r2,r2,zero
   10ee4:	103ffa1e 	bne	r2,zero,10ed0 <i2c_write+0x90>
}
   10ee8:	e037883a 	mov	sp,fp
   10eec:	df000017 	ldw	fp,0(sp)
   10ef0:	dec00104 	addi	sp,sp,4
   10ef4:	f800283a 	ret

00010ef8 <i2c_check_rxAck>:

/*
 * By this function write ACK from slave can be check
 */
char i2c_check_rxAck(){
   10ef8:	deffff04 	addi	sp,sp,-4
   10efc:	df000015 	stw	fp,0(sp)
   10f00:	d839883a 	mov	fp,sp
	return !(IORD_8DIRECT(IIC_BASE, OC_I2C_SR) & OC_I2C_RXACK);
   10f04:	008000b4 	movhi	r2,2
   10f08:	10840504 	addi	r2,r2,4116
   10f0c:	10800023 	ldbuio	r2,0(r2)
   10f10:	1080200c 	andi	r2,r2,128
   10f14:	1005003a 	cmpeq	r2,r2,zero
}
   10f18:	e037883a 	mov	sp,fp
   10f1c:	df000017 	ldw	fp,0(sp)
   10f20:	dec00104 	addi	sp,sp,4
   10f24:	f800283a 	ret

00010f28 <i2c_read>:

/*
 * I2C read function
 */
unsigned char i2c_read(unsigned char start, unsigned char stop, unsigned char ack)
{
   10f28:	defff704 	addi	sp,sp,-36
   10f2c:	df000815 	stw	fp,32(sp)
   10f30:	df000804 	addi	fp,sp,32
   10f34:	e13ff905 	stb	r4,-28(fp)
   10f38:	e17ffa05 	stb	r5,-24(fp)
   10f3c:	e1bffb05 	stb	r6,-20(fp)
	unsigned char status = OC_I2C_RD | (start?OC_I2C_STA:0x00) | (stop?OC_I2C_STO:0x00) | (ack?0:OC_I2C_ACK);
   10f40:	e0bff903 	ldbu	r2,-28(fp)
   10f44:	1005003a 	cmpeq	r2,r2,zero
   10f48:	1000031e 	bne	r2,zero,10f58 <i2c_read+0x30>
   10f4c:	00bfe804 	movi	r2,-96
   10f50:	e0bfff05 	stb	r2,-4(fp)
   10f54:	00000206 	br	10f60 <i2c_read+0x38>
   10f58:	00800804 	movi	r2,32
   10f5c:	e0bfff05 	stb	r2,-4(fp)
   10f60:	e0bffa03 	ldbu	r2,-24(fp)
   10f64:	1005003a 	cmpeq	r2,r2,zero
   10f68:	1000031e 	bne	r2,zero,10f78 <i2c_read+0x50>
   10f6c:	00c01004 	movi	r3,64
   10f70:	e0fffe05 	stb	r3,-8(fp)
   10f74:	00000106 	br	10f7c <i2c_read+0x54>
   10f78:	e03ffe05 	stb	zero,-8(fp)
   10f7c:	e13fff03 	ldbu	r4,-4(fp)
   10f80:	e0fffe03 	ldbu	r3,-8(fp)
   10f84:	20c4b03a 	or	r2,r4,r3
   10f88:	e0bffd05 	stb	r2,-12(fp)
   10f8c:	e0bffb03 	ldbu	r2,-20(fp)
   10f90:	1005003a 	cmpeq	r2,r2,zero
   10f94:	1000021e 	bne	r2,zero,10fa0 <i2c_read+0x78>
   10f98:	e03ffc05 	stb	zero,-16(fp)
   10f9c:	00000206 	br	10fa8 <i2c_read+0x80>
   10fa0:	01000204 	movi	r4,8
   10fa4:	e13ffc05 	stb	r4,-16(fp)
   10fa8:	e0fffd03 	ldbu	r3,-12(fp)
   10fac:	e13ffc03 	ldbu	r4,-16(fp)
   10fb0:	1904b03a 	or	r2,r3,r4
   10fb4:	e0bff805 	stb	r2,-32(fp)
	IOWR_8DIRECT(IIC_BASE, OC_I2C_CR, status);
   10fb8:	e0fff803 	ldbu	r3,-32(fp)
   10fbc:	008000b4 	movhi	r2,2
   10fc0:	10840504 	addi	r2,r2,4116
   10fc4:	10c00025 	stbio	r3,0(r2)
	while (IORD_8DIRECT(IIC_BASE, OC_I2C_SR) & OC_I2C_TIP);
   10fc8:	008000b4 	movhi	r2,2
   10fcc:	10840504 	addi	r2,r2,4116
   10fd0:	10800023 	ldbuio	r2,0(r2)
   10fd4:	1080008c 	andi	r2,r2,2
   10fd8:	1004c03a 	cmpne	r2,r2,zero
   10fdc:	103ffa1e 	bne	r2,zero,10fc8 <i2c_read+0xa0>
	return IORD_8DIRECT(IIC_BASE, OC_I2C_RXR);
   10fe0:	008000b4 	movhi	r2,2
   10fe4:	108404c4 	addi	r2,r2,4115
   10fe8:	10800023 	ldbuio	r2,0(r2)
   10fec:	10803fcc 	andi	r2,r2,255
}
   10ff0:	e037883a 	mov	sp,fp
   10ff4:	df000017 	ldw	fp,0(sp)
   10ff8:	dec00104 	addi	sp,sp,4
   10ffc:	f800283a 	ret

00011000 <writeTo>:
short g_offy = 0;
short g_offz = 0;

short alpha_x, alpha_y, alpha_z, temp;

void writeTo(unsigned char address, unsigned char val) {
   11000:	defffc04 	addi	sp,sp,-16
   11004:	dfc00315 	stw	ra,12(sp)
   11008:	df000215 	stw	fp,8(sp)
   1100c:	df000204 	addi	fp,sp,8
   11010:	e13ffe05 	stb	r4,-8(fp)
   11014:	e17fff05 	stb	r5,-4(fp)
	i2c_write(GYRO_W,1,0);
   11018:	01003404 	movi	r4,208
   1101c:	01400044 	movi	r5,1
   11020:	000d883a 	mov	r6,zero
   11024:	0010e400 	call	10e40 <i2c_write>
	i2c_write(address,0,0);
   11028:	e13ffe03 	ldbu	r4,-8(fp)
   1102c:	000b883a 	mov	r5,zero
   11030:	000d883a 	mov	r6,zero
   11034:	0010e400 	call	10e40 <i2c_write>
	i2c_write(val,0,1);
   11038:	e13fff03 	ldbu	r4,-4(fp)
   1103c:	000b883a 	mov	r5,zero
   11040:	01800044 	movi	r6,1
   11044:	0010e400 	call	10e40 <i2c_write>
}
   11048:	e037883a 	mov	sp,fp
   1104c:	dfc00117 	ldw	ra,4(sp)
   11050:	df000017 	ldw	fp,0(sp)
   11054:	dec00204 	addi	sp,sp,8
   11058:	f800283a 	ret

0001105c <readFrom>:

void readFrom(unsigned char address, int num, unsigned char buff[]) {
   1105c:	defff904 	addi	sp,sp,-28
   11060:	dfc00615 	stw	ra,24(sp)
   11064:	df000515 	stw	fp,20(sp)
   11068:	dc000415 	stw	r16,16(sp)
   1106c:	df000404 	addi	fp,sp,16
   11070:	e17ffe15 	stw	r5,-8(fp)
   11074:	e1bfff15 	stw	r6,-4(fp)
   11078:	e13ffd05 	stb	r4,-12(fp)
	int i = 0;
   1107c:	e03ffc15 	stw	zero,-16(fp)
	i2c_write(GYRO_W,1,0);
   11080:	01003404 	movi	r4,208
   11084:	01400044 	movi	r5,1
   11088:	000d883a 	mov	r6,zero
   1108c:	0010e400 	call	10e40 <i2c_write>
	i2c_write(address,0,1);
   11090:	e13ffd03 	ldbu	r4,-12(fp)
   11094:	000b883a 	mov	r5,zero
   11098:	01800044 	movi	r6,1
   1109c:	0010e400 	call	10e40 <i2c_write>

	i2c_write(GYRO_R,1,0);
   110a0:	01003444 	movi	r4,209
   110a4:	01400044 	movi	r5,1
   110a8:	000d883a 	mov	r6,zero
   110ac:	0010e400 	call	10e40 <i2c_write>

	for (i=0;i<num-1;i++){
   110b0:	e03ffc15 	stw	zero,-16(fp)
   110b4:	00000c06 	br	110e8 <readFrom+0x8c>
		buff[i] = i2c_read(0,0,1);
   110b8:	e0bffc17 	ldw	r2,-16(fp)
   110bc:	1007883a 	mov	r3,r2
   110c0:	e0bfff17 	ldw	r2,-4(fp)
   110c4:	18a1883a 	add	r16,r3,r2
   110c8:	0009883a 	mov	r4,zero
   110cc:	000b883a 	mov	r5,zero
   110d0:	01800044 	movi	r6,1
   110d4:	0010f280 	call	10f28 <i2c_read>
   110d8:	80800005 	stb	r2,0(r16)
	i2c_write(GYRO_W,1,0);
	i2c_write(address,0,1);

	i2c_write(GYRO_R,1,0);

	for (i=0;i<num-1;i++){
   110dc:	e0bffc17 	ldw	r2,-16(fp)
   110e0:	10800044 	addi	r2,r2,1
   110e4:	e0bffc15 	stw	r2,-16(fp)
   110e8:	e0bffe17 	ldw	r2,-8(fp)
   110ec:	10ffffc4 	addi	r3,r2,-1
   110f0:	e0bffc17 	ldw	r2,-16(fp)
   110f4:	10fff016 	blt	r2,r3,110b8 <readFrom+0x5c>
		buff[i] = i2c_read(0,0,1);
	}
	buff[5] = i2c_read(0,1,0);
   110f8:	e0bfff17 	ldw	r2,-4(fp)
   110fc:	14000144 	addi	r16,r2,5
   11100:	0009883a 	mov	r4,zero
   11104:	01400044 	movi	r5,1
   11108:	000d883a 	mov	r6,zero
   1110c:	0010f280 	call	10f28 <i2c_read>
   11110:	80800005 	stb	r2,0(r16)
}
   11114:	e037883a 	mov	sp,fp
   11118:	dfc00217 	ldw	ra,8(sp)
   1111c:	df000117 	ldw	fp,4(sp)
   11120:	dc000017 	ldw	r16,0(sp)
   11124:	dec00304 	addi	sp,sp,12
   11128:	f800283a 	ret

0001112c <gyro_init>:

/*
 * initialize gyro
 */
void gyro_init(){
   1112c:	defffe04 	addi	sp,sp,-8
   11130:	dfc00115 	stw	ra,4(sp)
   11134:	df000015 	stw	fp,0(sp)
   11138:	d839883a 	mov	fp,sp
	* sample rate to = 125alpha_z
	* parameter to +/- 2000 degrees/sec
	* low pass filter = 5alpha_z
	* no interrupt
	******************************************/
	writeTo(G_PWR_MGM, 0x00);
   1113c:	01000f84 	movi	r4,62
   11140:	000b883a 	mov	r5,zero
   11144:	00110000 	call	11000 <writeTo>
	writeTo(G_SMPLRT_DIV, 0x07); // EB, 50, 80, 7F, DE, 23, 20, FF
   11148:	01000544 	movi	r4,21
   1114c:	014001c4 	movi	r5,7
   11150:	00110000 	call	11000 <writeTo>
	writeTo(G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1Kalpha_z, 1E, 19
   11154:	01000584 	movi	r4,22
   11158:	01400784 	movi	r5,30
   1115c:	00110000 	call	11000 <writeTo>
	writeTo(G_INT_CFG, 0x00);
   11160:	010005c4 	movi	r4,23
   11164:	000b883a 	mov	r5,zero
   11168:	00110000 	call	11000 <writeTo>
}
   1116c:	e037883a 	mov	sp,fp
   11170:	dfc00117 	ldw	ra,4(sp)
   11174:	df000017 	ldw	fp,0(sp)
   11178:	dec00204 	addi	sp,sp,8
   1117c:	f800283a 	ret

00011180 <gyro_read_data>:

/*
 * refreshes alpha_x, alpha_y, alpha_z and tempeture variables
 */
void gyro_read_data(){
   11180:	defffb04 	addi	sp,sp,-20
   11184:	dfc00415 	stw	ra,16(sp)
   11188:	df000315 	stw	fp,12(sp)
   1118c:	df000304 	addi	fp,sp,12
	temp MSB = 1B, temp LSB = 1C
	x axis MSB = 1D, x axis LSB = 1E
	y axis MSB = 1F, y axis LSB = 20
	z axis MSB = 21, z axis LSB = 22
	*************************************/
	unsigned char regAddress = 0x1B;
   11190:	008006c4 	movi	r2,27
   11194:	e0bffd05 	stb	r2,-12(fp)
	unsigned char buff[G_TO_READ];
	readFrom(regAddress, G_TO_READ, buff);
   11198:	e13ffd03 	ldbu	r4,-12(fp)
   1119c:	e1bffd44 	addi	r6,fp,-11
   111a0:	01400204 	movi	r5,8
   111a4:	001105c0 	call	1105c <readFrom>
	alpha_x = ((buff[2] << 8) | buff[3]) + g_offx;
   111a8:	e0bffdc3 	ldbu	r2,-9(fp)
   111ac:	10803fcc 	andi	r2,r2,255
   111b0:	1004923a 	slli	r2,r2,8
   111b4:	1007883a 	mov	r3,r2
   111b8:	e0bffe03 	ldbu	r2,-8(fp)
   111bc:	10803fcc 	andi	r2,r2,255
   111c0:	1884b03a 	or	r2,r3,r2
   111c4:	1007883a 	mov	r3,r2
   111c8:	d0a0c20b 	ldhu	r2,-31992(gp)
   111cc:	1885883a 	add	r2,r3,r2
   111d0:	d0a0c38d 	sth	r2,-31986(gp)
	alpha_y = ((buff[4] << 8) | buff[5]) + g_offy;
   111d4:	e0bffe43 	ldbu	r2,-7(fp)
   111d8:	10803fcc 	andi	r2,r2,255
   111dc:	1004923a 	slli	r2,r2,8
   111e0:	1007883a 	mov	r3,r2
   111e4:	e0bffe83 	ldbu	r2,-6(fp)
   111e8:	10803fcc 	andi	r2,r2,255
   111ec:	1884b03a 	or	r2,r3,r2
   111f0:	1007883a 	mov	r3,r2
   111f4:	d0a0c28b 	ldhu	r2,-31990(gp)
   111f8:	1885883a 	add	r2,r3,r2
   111fc:	d0a0c50d 	sth	r2,-31980(gp)
	alpha_z = ((buff[6] << 8) | buff[7]) + g_offz;
   11200:	e0bffec3 	ldbu	r2,-5(fp)
   11204:	10803fcc 	andi	r2,r2,255
   11208:	1004923a 	slli	r2,r2,8
   1120c:	1007883a 	mov	r3,r2
   11210:	e0bfff03 	ldbu	r2,-4(fp)
   11214:	10803fcc 	andi	r2,r2,255
   11218:	1884b03a 	or	r2,r3,r2
   1121c:	1007883a 	mov	r3,r2
   11220:	d0a0c30b 	ldhu	r2,-31988(gp)
   11224:	1885883a 	add	r2,r3,r2
   11228:	d0a0c48d 	sth	r2,-31982(gp)
	temp = (buff[0] << 8) | buff[1];
   1122c:	e0bffd43 	ldbu	r2,-11(fp)
   11230:	10803fcc 	andi	r2,r2,255
   11234:	1004923a 	slli	r2,r2,8
   11238:	1007883a 	mov	r3,r2
   1123c:	e0bffd83 	ldbu	r2,-10(fp)
   11240:	10803fcc 	andi	r2,r2,255
   11244:	1884b03a 	or	r2,r3,r2
   11248:	d0a0c40d 	sth	r2,-31984(gp)
}
   1124c:	e037883a 	mov	sp,fp
   11250:	dfc00117 	ldw	ra,4(sp)
   11254:	df000017 	ldw	fp,0(sp)
   11258:	dec00204 	addi	sp,sp,8
   1125c:	f800283a 	ret

00011260 <atan2>:
   11260:	00112641 	jmpi	11264 <__ieee754_atan2>

00011264 <__ieee754_atan2>:
   11264:	3015883a 	mov	r10,r6
   11268:	3019883a 	mov	r12,r6
   1126c:	018dc83a 	sub	r6,zero,r6
   11270:	518cb03a 	or	r6,r10,r6
   11274:	300cd7fa 	srli	r6,r6,31
   11278:	03a00034 	movhi	r14,32768
   1127c:	73bfffc4 	addi	r14,r14,-1
   11280:	3b9e703a 	and	r15,r7,r14
   11284:	defffc04 	addi	sp,sp,-16
   11288:	33ccb03a 	or	r6,r6,r15
   1128c:	035ffc34 	movhi	r13,32752
   11290:	dc000015 	stw	r16,0(sp)
   11294:	dfc00315 	stw	ra,12(sp)
   11298:	dc800215 	stw	r18,8(sp)
   1129c:	dc400115 	stw	r17,4(sp)
   112a0:	3817883a 	mov	r11,r7
   112a4:	2011883a 	mov	r8,r4
   112a8:	2813883a 	mov	r9,r5
   112ac:	3821883a 	mov	r16,r7
   112b0:	69800736 	bltu	r13,r6,112d0 <__ieee754_atan2+0x6c>
   112b4:	0105c83a 	sub	r2,zero,r4
   112b8:	2084b03a 	or	r2,r4,r2
   112bc:	1004d7fa 	srli	r2,r2,31
   112c0:	2b8c703a 	and	r6,r5,r14
   112c4:	2823883a 	mov	r17,r5
   112c8:	1184b03a 	or	r2,r2,r6
   112cc:	68800d2e 	bgeu	r13,r2,11304 <__ieee754_atan2+0xa0>
   112d0:	4009883a 	mov	r4,r8
   112d4:	500d883a 	mov	r6,r10
   112d8:	00125440 	call	12544 <__adddf3>
   112dc:	1011883a 	mov	r8,r2
   112e0:	1813883a 	mov	r9,r3
   112e4:	4005883a 	mov	r2,r8
   112e8:	4807883a 	mov	r3,r9
   112ec:	dfc00317 	ldw	ra,12(sp)
   112f0:	dc800217 	ldw	r18,8(sp)
   112f4:	dc400117 	ldw	r17,4(sp)
   112f8:	dc000017 	ldw	r16,0(sp)
   112fc:	dec00404 	addi	sp,sp,16
   11300:	f800283a 	ret
   11304:	00b00434 	movhi	r2,49168
   11308:	3885883a 	add	r2,r7,r2
   1130c:	5084b03a 	or	r2,r10,r2
   11310:	10001026 	beq	r2,zero,11354 <__ieee754_atan2+0xf0>
   11314:	3805d7ba 	srai	r2,r7,30
   11318:	2806d7fa 	srli	r3,r5,31
   1131c:	2188b03a 	or	r4,r4,r6
   11320:	1080008c 	andi	r2,r2,2
   11324:	18a4b03a 	or	r18,r3,r2
   11328:	00800084 	movi	r2,2
   1132c:	2000101e 	bne	r4,zero,11370 <__ieee754_atan2+0x10c>
   11330:	90803826 	beq	r18,r2,11414 <__ieee754_atan2+0x1b0>
   11334:	14bfeb0e 	bge	r2,r18,112e4 <__ieee754_atan2+0x80>
   11338:	008000c4 	movi	r2,3
   1133c:	90800c1e 	bne	r18,r2,11370 <__ieee754_atan2+0x10c>
   11340:	02151134 	movhi	r8,21572
   11344:	420b4604 	addi	r8,r8,11544
   11348:	02700274 	movhi	r9,49161
   1134c:	4a487ec4 	addi	r9,r9,8699
   11350:	003fe406 	br	112e4 <__ieee754_atan2+0x80>
   11354:	4009883a 	mov	r4,r8
   11358:	dfc00317 	ldw	ra,12(sp)
   1135c:	dc800217 	ldw	r18,8(sp)
   11360:	dc400117 	ldw	r17,4(sp)
   11364:	dc000017 	ldw	r16,0(sp)
   11368:	dec00404 	addi	sp,sp,16
   1136c:	00115b41 	jmpi	115b4 <atan>
   11370:	63c4b03a 	or	r2,r12,r15
   11374:	10001426 	beq	r2,zero,113c8 <__ieee754_atan2+0x164>
   11378:	009ffc34 	movhi	r2,32752
   1137c:	78801d26 	beq	r15,r2,113f4 <__ieee754_atan2+0x190>
   11380:	009ffc34 	movhi	r2,32752
   11384:	30801026 	beq	r6,r2,113c8 <__ieee754_atan2+0x164>
   11388:	33c5c83a 	sub	r2,r6,r15
   1138c:	1009d53a 	srai	r4,r2,20
   11390:	00c00f04 	movi	r3,60
   11394:	1900240e 	bge	r3,r4,11428 <__ieee754_atan2+0x1c4>
   11398:	02951134 	movhi	r10,21572
   1139c:	528b4604 	addi	r10,r10,11544
   113a0:	02cffe74 	movhi	r11,16377
   113a4:	5ac87ec4 	addi	r11,r11,8699
   113a8:	00800044 	movi	r2,1
   113ac:	90802d26 	beq	r18,r2,11464 <__ieee754_atan2+0x200>
   113b0:	00800084 	movi	r2,2
   113b4:	90804426 	beq	r18,r2,114c8 <__ieee754_atan2+0x264>
   113b8:	90002e1e 	bne	r18,zero,11474 <__ieee754_atan2+0x210>
   113bc:	5011883a 	mov	r8,r10
   113c0:	5813883a 	mov	r9,r11
   113c4:	003fc706 	br	112e4 <__ieee754_atan2+0x80>
   113c8:	88000516 	blt	r17,zero,113e0 <__ieee754_atan2+0x17c>
   113cc:	02151134 	movhi	r8,21572
   113d0:	420b4604 	addi	r8,r8,11544
   113d4:	024ffe74 	movhi	r9,16377
   113d8:	4a487ec4 	addi	r9,r9,8699
   113dc:	003fc106 	br	112e4 <__ieee754_atan2+0x80>
   113e0:	02151134 	movhi	r8,21572
   113e4:	420b4604 	addi	r8,r8,11544
   113e8:	026ffe74 	movhi	r9,49145
   113ec:	4a487ec4 	addi	r9,r9,8699
   113f0:	003fbc06 	br	112e4 <__ieee754_atan2+0x80>
   113f4:	33c04b26 	beq	r6,r15,11524 <__ieee754_atan2+0x2c0>
   113f8:	00800044 	movi	r2,1
   113fc:	90805726 	beq	r18,r2,1155c <__ieee754_atan2+0x2f8>
   11400:	14805116 	blt	r2,r18,11548 <__ieee754_atan2+0x2e4>
   11404:	903fde1e 	bne	r18,zero,11380 <__ieee754_atan2+0x11c>
   11408:	0011883a 	mov	r8,zero
   1140c:	0013883a 	mov	r9,zero
   11410:	003fb406 	br	112e4 <__ieee754_atan2+0x80>
   11414:	02151134 	movhi	r8,21572
   11418:	420b4604 	addi	r8,r8,11544
   1141c:	02500274 	movhi	r9,16393
   11420:	4a487ec4 	addi	r9,r9,8699
   11424:	003faf06 	br	112e4 <__ieee754_atan2+0x80>
   11428:	80003916 	blt	r16,zero,11510 <__ieee754_atan2+0x2ac>
   1142c:	580f883a 	mov	r7,r11
   11430:	480b883a 	mov	r5,r9
   11434:	500d883a 	mov	r6,r10
   11438:	4009883a 	mov	r4,r8
   1143c:	001297c0 	call	1297c <__divdf3>
   11440:	180b883a 	mov	r5,r3
   11444:	1009883a 	mov	r4,r2
   11448:	0011c4c0 	call	11c4c <fabs>
   1144c:	180b883a 	mov	r5,r3
   11450:	1009883a 	mov	r4,r2
   11454:	00115b40 	call	115b4 <atan>
   11458:	1015883a 	mov	r10,r2
   1145c:	1817883a 	mov	r11,r3
   11460:	003fd106 	br	113a8 <__ieee754_atan2+0x144>
   11464:	59a0003c 	xorhi	r6,r11,32768
   11468:	5011883a 	mov	r8,r10
   1146c:	3013883a 	mov	r9,r6
   11470:	003f9c06 	br	112e4 <__ieee754_atan2+0x80>
   11474:	008cc534 	movhi	r2,13076
   11478:	109701c4 	addi	r2,r2,23559
   1147c:	00cf28b4 	movhi	r3,15522
   11480:	18e98984 	addi	r3,r3,-23002
   11484:	580b883a 	mov	r5,r11
   11488:	180f883a 	mov	r7,r3
   1148c:	5009883a 	mov	r4,r10
   11490:	100d883a 	mov	r6,r2
   11494:	00124c40 	call	124c4 <__subdf3>
   11498:	02151134 	movhi	r8,21572
   1149c:	420b4604 	addi	r8,r8,11544
   114a0:	02500274 	movhi	r9,16393
   114a4:	4a487ec4 	addi	r9,r9,8699
   114a8:	180b883a 	mov	r5,r3
   114ac:	480f883a 	mov	r7,r9
   114b0:	1009883a 	mov	r4,r2
   114b4:	400d883a 	mov	r6,r8
   114b8:	00124c40 	call	124c4 <__subdf3>
   114bc:	1011883a 	mov	r8,r2
   114c0:	1813883a 	mov	r9,r3
   114c4:	003f8706 	br	112e4 <__ieee754_atan2+0x80>
   114c8:	008cc534 	movhi	r2,13076
   114cc:	109701c4 	addi	r2,r2,23559
   114d0:	00cf28b4 	movhi	r3,15522
   114d4:	18e98984 	addi	r3,r3,-23002
   114d8:	580b883a 	mov	r5,r11
   114dc:	180f883a 	mov	r7,r3
   114e0:	5009883a 	mov	r4,r10
   114e4:	100d883a 	mov	r6,r2
   114e8:	00124c40 	call	124c4 <__subdf3>
   114ec:	02151134 	movhi	r8,21572
   114f0:	420b4604 	addi	r8,r8,11544
   114f4:	02500274 	movhi	r9,16393
   114f8:	4a487ec4 	addi	r9,r9,8699
   114fc:	480b883a 	mov	r5,r9
   11500:	180f883a 	mov	r7,r3
   11504:	4009883a 	mov	r4,r8
   11508:	100d883a 	mov	r6,r2
   1150c:	003fea06 	br	114b8 <__ieee754_atan2+0x254>
   11510:	00bff104 	movi	r2,-60
   11514:	20bfc50e 	bge	r4,r2,1142c <__ieee754_atan2+0x1c8>
   11518:	0015883a 	mov	r10,zero
   1151c:	0017883a 	mov	r11,zero
   11520:	003fa106 	br	113a8 <__ieee754_atan2+0x144>
   11524:	00800044 	movi	r2,1
   11528:	90801826 	beq	r18,r2,1158c <__ieee754_atan2+0x328>
   1152c:	14800e16 	blt	r2,r18,11568 <__ieee754_atan2+0x304>
   11530:	903f931e 	bne	r18,zero,11380 <__ieee754_atan2+0x11c>
   11534:	02151134 	movhi	r8,21572
   11538:	420b4604 	addi	r8,r8,11544
   1153c:	024ffa74 	movhi	r9,16361
   11540:	4a487ec4 	addi	r9,r9,8699
   11544:	003f6706 	br	112e4 <__ieee754_atan2+0x80>
   11548:	00800084 	movi	r2,2
   1154c:	90bfb126 	beq	r18,r2,11414 <__ieee754_atan2+0x1b0>
   11550:	008000c4 	movi	r2,3
   11554:	90bf8a1e 	bne	r18,r2,11380 <__ieee754_atan2+0x11c>
   11558:	003f7906 	br	11340 <__ieee754_atan2+0xdc>
   1155c:	0011883a 	mov	r8,zero
   11560:	02600034 	movhi	r9,32768
   11564:	003f5f06 	br	112e4 <__ieee754_atan2+0x80>
   11568:	00800084 	movi	r2,2
   1156c:	90800c26 	beq	r18,r2,115a0 <__ieee754_atan2+0x33c>
   11570:	008000c4 	movi	r2,3
   11574:	90bf821e 	bne	r18,r2,11380 <__ieee754_atan2+0x11c>
   11578:	021fccf4 	movhi	r8,32563
   1157c:	42087484 	addi	r8,r8,8658
   11580:	027000f4 	movhi	r9,49155
   11584:	4a765f04 	addi	r9,r9,-9860
   11588:	003f5606 	br	112e4 <__ieee754_atan2+0x80>
   1158c:	02151134 	movhi	r8,21572
   11590:	420b4604 	addi	r8,r8,11544
   11594:	026ffa74 	movhi	r9,49129
   11598:	4a487ec4 	addi	r9,r9,8699
   1159c:	003f5106 	br	112e4 <__ieee754_atan2+0x80>
   115a0:	021fccf4 	movhi	r8,32563
   115a4:	42087484 	addi	r8,r8,8658
   115a8:	025000f4 	movhi	r9,16387
   115ac:	4a765f04 	addi	r9,r9,-9860
   115b0:	003f4c06 	br	112e4 <__ieee754_atan2+0x80>

000115b4 <atan>:
   115b4:	defff304 	addi	sp,sp,-52
   115b8:	00a00034 	movhi	r2,32768
   115bc:	10bfffc4 	addi	r2,r2,-1
   115c0:	dc000315 	stw	r16,12(sp)
   115c4:	28a0703a 	and	r16,r5,r2
   115c8:	00910434 	movhi	r2,17424
   115cc:	10bfffc4 	addi	r2,r2,-1
   115d0:	df000b15 	stw	fp,44(sp)
   115d4:	dfc00c15 	stw	ra,48(sp)
   115d8:	ddc00a15 	stw	r23,40(sp)
   115dc:	dd800915 	stw	r22,36(sp)
   115e0:	dd400815 	stw	r21,32(sp)
   115e4:	dd000715 	stw	r20,28(sp)
   115e8:	dcc00615 	stw	r19,24(sp)
   115ec:	dc800515 	stw	r18,20(sp)
   115f0:	dc400415 	stw	r17,16(sp)
   115f4:	d9000115 	stw	r4,4(sp)
   115f8:	d9400215 	stw	r5,8(sp)
   115fc:	2839883a 	mov	fp,r5
   11600:	1400190e 	bge	r2,r16,11668 <atan+0xb4>
   11604:	2005883a 	mov	r2,r4
   11608:	011ffc34 	movhi	r4,32752
   1160c:	2400eb0e 	bge	r4,r16,119bc <atan+0x408>
   11610:	d9000117 	ldw	r4,4(sp)
   11614:	d9c00217 	ldw	r7,8(sp)
   11618:	200d883a 	mov	r6,r4
   1161c:	00125440 	call	12544 <__adddf3>
   11620:	d8800115 	stw	r2,4(sp)
   11624:	d8c00215 	stw	r3,8(sp)
   11628:	d9000117 	ldw	r4,4(sp)
   1162c:	2005883a 	mov	r2,r4
   11630:	d9000217 	ldw	r4,8(sp)
   11634:	2007883a 	mov	r3,r4
   11638:	dfc00c17 	ldw	ra,48(sp)
   1163c:	df000b17 	ldw	fp,44(sp)
   11640:	ddc00a17 	ldw	r23,40(sp)
   11644:	dd800917 	ldw	r22,36(sp)
   11648:	dd400817 	ldw	r21,32(sp)
   1164c:	dd000717 	ldw	r20,28(sp)
   11650:	dcc00617 	ldw	r19,24(sp)
   11654:	dc800517 	ldw	r18,20(sp)
   11658:	dc400417 	ldw	r17,16(sp)
   1165c:	dc000317 	ldw	r16,12(sp)
   11660:	dec00d04 	addi	sp,sp,52
   11664:	f800283a 	ret
   11668:	008ff734 	movhi	r2,16348
   1166c:	10bfffc4 	addi	r2,r2,-1
   11670:	1400ec16 	blt	r2,r16,11a24 <atan+0x470>
   11674:	008f8834 	movhi	r2,15904
   11678:	10bfffc4 	addi	r2,r2,-1
   1167c:	1400d80e 	bge	r2,r16,119e0 <atan+0x42c>
   11680:	00bfffc4 	movi	r2,-1
   11684:	d8800015 	stw	r2,0(sp)
   11688:	d9000117 	ldw	r4,4(sp)
   1168c:	d9400217 	ldw	r5,8(sp)
   11690:	200d883a 	mov	r6,r4
   11694:	280f883a 	mov	r7,r5
   11698:	00125b80 	call	125b8 <__muldf3>
   1169c:	1009883a 	mov	r4,r2
   116a0:	180b883a 	mov	r5,r3
   116a4:	100d883a 	mov	r6,r2
   116a8:	180f883a 	mov	r7,r3
   116ac:	1025883a 	mov	r18,r2
   116b0:	1827883a 	mov	r19,r3
   116b4:	00125b80 	call	125b8 <__muldf3>
   116b8:	1021883a 	mov	r16,r2
   116bc:	1823883a 	mov	r17,r3
   116c0:	00b8c8f4 	movhi	r2,58147
   116c4:	10b68444 	addi	r2,r2,-9711
   116c8:	00cfe474 	movhi	r3,16273
   116cc:	18eb4e84 	addi	r3,r3,-21190
   116d0:	180f883a 	mov	r7,r3
   116d4:	8009883a 	mov	r4,r16
   116d8:	880b883a 	mov	r5,r17
   116dc:	100d883a 	mov	r6,r2
   116e0:	00125b80 	call	125b8 <__muldf3>
   116e4:	02091db4 	movhi	r8,9334
   116e8:	42037ac4 	addi	r8,r8,3563
   116ec:	024fea74 	movhi	r9,16297
   116f0:	4a5ed2c4 	addi	r9,r9,31563
   116f4:	480f883a 	mov	r7,r9
   116f8:	400d883a 	mov	r6,r8
   116fc:	180b883a 	mov	r5,r3
   11700:	1009883a 	mov	r4,r2
   11704:	00125440 	call	12544 <__adddf3>
   11708:	180f883a 	mov	r7,r3
   1170c:	8009883a 	mov	r4,r16
   11710:	880b883a 	mov	r5,r17
   11714:	100d883a 	mov	r6,r2
   11718:	00125b80 	call	125b8 <__muldf3>
   1171c:	02283434 	movhi	r8,41168
   11720:	420f5444 	addi	r8,r8,15697
   11724:	024fec74 	movhi	r9,16305
   11728:	4a435984 	addi	r9,r9,3430
   1172c:	480f883a 	mov	r7,r9
   11730:	400d883a 	mov	r6,r8
   11734:	180b883a 	mov	r5,r3
   11738:	1009883a 	mov	r4,r2
   1173c:	00125440 	call	12544 <__adddf3>
   11740:	180f883a 	mov	r7,r3
   11744:	8009883a 	mov	r4,r16
   11748:	880b883a 	mov	r5,r17
   1174c:	100d883a 	mov	r6,r2
   11750:	00125b80 	call	125b8 <__muldf3>
   11754:	02315334 	movhi	r8,50508
   11758:	42081b84 	addi	r8,r8,8302
   1175c:	024fedf4 	movhi	r9,16311
   11760:	4a517344 	addi	r9,r9,17869
   11764:	480f883a 	mov	r7,r9
   11768:	400d883a 	mov	r6,r8
   1176c:	180b883a 	mov	r5,r3
   11770:	1009883a 	mov	r4,r2
   11774:	00125440 	call	12544 <__adddf3>
   11778:	180f883a 	mov	r7,r3
   1177c:	8009883a 	mov	r4,r16
   11780:	880b883a 	mov	r5,r17
   11784:	100d883a 	mov	r6,r2
   11788:	00125b80 	call	125b8 <__muldf3>
   1178c:	02248074 	movhi	r8,37377
   11790:	4220ffc4 	addi	r8,r8,-31745
   11794:	024ff0b4 	movhi	r9,16322
   11798:	4a524904 	addi	r9,r9,18724
   1179c:	480f883a 	mov	r7,r9
   117a0:	400d883a 	mov	r6,r8
   117a4:	180b883a 	mov	r5,r3
   117a8:	1009883a 	mov	r4,r2
   117ac:	00125440 	call	12544 <__adddf3>
   117b0:	180f883a 	mov	r7,r3
   117b4:	8009883a 	mov	r4,r16
   117b8:	880b883a 	mov	r5,r17
   117bc:	100d883a 	mov	r6,r2
   117c0:	00125b80 	call	125b8 <__muldf3>
   117c4:	02155574 	movhi	r8,21845
   117c8:	42154344 	addi	r8,r8,21773
   117cc:	024ff574 	movhi	r9,16341
   117d0:	4a555544 	addi	r9,r9,21845
   117d4:	480f883a 	mov	r7,r9
   117d8:	400d883a 	mov	r6,r8
   117dc:	180b883a 	mov	r5,r3
   117e0:	1009883a 	mov	r4,r2
   117e4:	00125440 	call	12544 <__adddf3>
   117e8:	180f883a 	mov	r7,r3
   117ec:	9009883a 	mov	r4,r18
   117f0:	980b883a 	mov	r5,r19
   117f4:	100d883a 	mov	r6,r2
   117f8:	00125b80 	call	125b8 <__muldf3>
   117fc:	020b1ab4 	movhi	r8,11370
   11800:	421b0bc4 	addi	r8,r8,27695
   11804:	026fe8f4 	movhi	r9,49059
   11808:	4a6d1104 	addi	r9,r9,-19388
   1180c:	480f883a 	mov	r7,r9
   11810:	400d883a 	mov	r6,r8
   11814:	8009883a 	mov	r4,r16
   11818:	880b883a 	mov	r5,r17
   1181c:	102d883a 	mov	r22,r2
   11820:	182f883a 	mov	r23,r3
   11824:	00125b80 	call	125b8 <__muldf3>
   11828:	0214b7f4 	movhi	r8,21215
   1182c:	423f6684 	addi	r8,r8,-614
   11830:	024febb4 	movhi	r9,16302
   11834:	4a778b44 	addi	r9,r9,-8659
   11838:	480f883a 	mov	r7,r9
   1183c:	400d883a 	mov	r6,r8
   11840:	180b883a 	mov	r5,r3
   11844:	1009883a 	mov	r4,r2
   11848:	00124c40 	call	124c4 <__subdf3>
   1184c:	180f883a 	mov	r7,r3
   11850:	8009883a 	mov	r4,r16
   11854:	880b883a 	mov	r5,r17
   11858:	100d883a 	mov	r6,r2
   1185c:	00125b80 	call	125b8 <__muldf3>
   11860:	022bdd74 	movhi	r8,44917
   11864:	42269b44 	addi	r8,r8,-26003
   11868:	024fed34 	movhi	r9,16308
   1186c:	4a6c3c84 	addi	r9,r9,-20238
   11870:	480f883a 	mov	r7,r9
   11874:	400d883a 	mov	r6,r8
   11878:	180b883a 	mov	r5,r3
   1187c:	1009883a 	mov	r4,r2
   11880:	00124c40 	call	124c4 <__subdf3>
   11884:	180f883a 	mov	r7,r3
   11888:	8009883a 	mov	r4,r16
   1188c:	880b883a 	mov	r5,r17
   11890:	100d883a 	mov	r6,r2
   11894:	00125b80 	call	125b8 <__muldf3>
   11898:	023f88f4 	movhi	r8,65059
   1189c:	42059c44 	addi	r8,r8,5745
   118a0:	024fef34 	movhi	r9,16316
   118a4:	4a5c7184 	addi	r9,r9,29126
   118a8:	480f883a 	mov	r7,r9
   118ac:	400d883a 	mov	r6,r8
   118b0:	180b883a 	mov	r5,r3
   118b4:	1009883a 	mov	r4,r2
   118b8:	00124c40 	call	124c4 <__subdf3>
   118bc:	180f883a 	mov	r7,r3
   118c0:	8009883a 	mov	r4,r16
   118c4:	880b883a 	mov	r5,r17
   118c8:	100d883a 	mov	r6,r2
   118cc:	00125b80 	call	125b8 <__muldf3>
   118d0:	02266674 	movhi	r8,39321
   118d4:	423af104 	addi	r8,r8,-5180
   118d8:	024ff2b4 	movhi	r9,16330
   118dc:	4a666644 	addi	r9,r9,-26215
   118e0:	480f883a 	mov	r7,r9
   118e4:	400d883a 	mov	r6,r8
   118e8:	180b883a 	mov	r5,r3
   118ec:	1009883a 	mov	r4,r2
   118f0:	00124c40 	call	124c4 <__subdf3>
   118f4:	180f883a 	mov	r7,r3
   118f8:	8009883a 	mov	r4,r16
   118fc:	880b883a 	mov	r5,r17
   11900:	100d883a 	mov	r6,r2
   11904:	00125b80 	call	125b8 <__muldf3>
   11908:	100f883a 	mov	r7,r2
   1190c:	d8800017 	ldw	r2,0(sp)
   11910:	b009883a 	mov	r4,r22
   11914:	b80b883a 	mov	r5,r23
   11918:	10006b16 	blt	r2,zero,11ac8 <atan+0x514>
   1191c:	d8800017 	ldw	r2,0(sp)
   11920:	380d883a 	mov	r6,r7
   11924:	b80b883a 	mov	r5,r23
   11928:	102490fa 	slli	r18,r2,3
   1192c:	00800074 	movhi	r2,1
   11930:	10962f04 	addi	r2,r2,22716
   11934:	180f883a 	mov	r7,r3
   11938:	9085883a 	add	r2,r18,r2
   1193c:	14000017 	ldw	r16,0(r2)
   11940:	14400117 	ldw	r17,4(r2)
   11944:	00125440 	call	12544 <__adddf3>
   11948:	d9000117 	ldw	r4,4(sp)
   1194c:	d9400217 	ldw	r5,8(sp)
   11950:	180f883a 	mov	r7,r3
   11954:	100d883a 	mov	r6,r2
   11958:	00125b80 	call	125b8 <__muldf3>
   1195c:	01000074 	movhi	r4,1
   11960:	21163704 	addi	r4,r4,22748
   11964:	9125883a 	add	r18,r18,r4
   11968:	92000017 	ldw	r8,0(r18)
   1196c:	92400117 	ldw	r9,4(r18)
   11970:	180b883a 	mov	r5,r3
   11974:	400d883a 	mov	r6,r8
   11978:	480f883a 	mov	r7,r9
   1197c:	1009883a 	mov	r4,r2
   11980:	00124c40 	call	124c4 <__subdf3>
   11984:	d9c00217 	ldw	r7,8(sp)
   11988:	d9800117 	ldw	r6,4(sp)
   1198c:	180b883a 	mov	r5,r3
   11990:	1009883a 	mov	r4,r2
   11994:	00124c40 	call	124c4 <__subdf3>
   11998:	180f883a 	mov	r7,r3
   1199c:	880b883a 	mov	r5,r17
   119a0:	8009883a 	mov	r4,r16
   119a4:	100d883a 	mov	r6,r2
   119a8:	00124c40 	call	124c4 <__subdf3>
   119ac:	e0003f16 	blt	fp,zero,11aac <atan+0x4f8>
   119b0:	d8800115 	stw	r2,4(sp)
   119b4:	d8c00215 	stw	r3,8(sp)
   119b8:	003f1b06 	br	11628 <atan+0x74>
   119bc:	81003f26 	beq	r16,r4,11abc <atan+0x508>
   119c0:	07005e0e 	bge	zero,fp,11b3c <atan+0x588>
   119c4:	01151134 	movhi	r4,21572
   119c8:	210b4604 	addi	r4,r4,11544
   119cc:	008ffe74 	movhi	r2,16377
   119d0:	10887ec4 	addi	r2,r2,8699
   119d4:	d9000115 	stw	r4,4(sp)
   119d8:	d8800215 	stw	r2,8(sp)
   119dc:	003f1206 	br	11628 <atan+0x74>
   119e0:	d9000117 	ldw	r4,4(sp)
   119e4:	00a20034 	movhi	r2,34816
   119e8:	109d6704 	addi	r2,r2,30108
   119ec:	00df8e34 	movhi	r3,32312
   119f0:	18f90f04 	addi	r3,r3,-7108
   119f4:	180f883a 	mov	r7,r3
   119f8:	100d883a 	mov	r6,r2
   119fc:	00125440 	call	12544 <__adddf3>
   11a00:	0011883a 	mov	r8,zero
   11a04:	024ffc34 	movhi	r9,16368
   11a08:	180b883a 	mov	r5,r3
   11a0c:	480f883a 	mov	r7,r9
   11a10:	1009883a 	mov	r4,r2
   11a14:	400d883a 	mov	r6,r8
   11a18:	0012c5c0 	call	12c5c <__gtdf2>
   11a1c:	00bf0216 	blt	zero,r2,11628 <atan+0x74>
   11a20:	003f1706 	br	11680 <atan+0xcc>
   11a24:	d9000117 	ldw	r4,4(sp)
   11a28:	0011c4c0 	call	11c4c <fabs>
   11a2c:	102d883a 	mov	r22,r2
   11a30:	008ffcf4 	movhi	r2,16371
   11a34:	10bfffc4 	addi	r2,r2,-1
   11a38:	182f883a 	mov	r23,r3
   11a3c:	14003016 	blt	r2,r16,11b00 <atan+0x54c>
   11a40:	008ff9b4 	movhi	r2,16358
   11a44:	10bfffc4 	addi	r2,r2,-1
   11a48:	1400430e 	bge	r2,r16,11b58 <atan+0x5a4>
   11a4c:	044ffc34 	movhi	r17,16368
   11a50:	0021883a 	mov	r16,zero
   11a54:	800d883a 	mov	r6,r16
   11a58:	880f883a 	mov	r7,r17
   11a5c:	b009883a 	mov	r4,r22
   11a60:	180b883a 	mov	r5,r3
   11a64:	00124c40 	call	124c4 <__subdf3>
   11a68:	880f883a 	mov	r7,r17
   11a6c:	000d883a 	mov	r6,zero
   11a70:	b80b883a 	mov	r5,r23
   11a74:	b009883a 	mov	r4,r22
   11a78:	1021883a 	mov	r16,r2
   11a7c:	1823883a 	mov	r17,r3
   11a80:	00125440 	call	12544 <__adddf3>
   11a84:	180f883a 	mov	r7,r3
   11a88:	8009883a 	mov	r4,r16
   11a8c:	880b883a 	mov	r5,r17
   11a90:	100d883a 	mov	r6,r2
   11a94:	001297c0 	call	1297c <__divdf3>
   11a98:	01000044 	movi	r4,1
   11a9c:	d8800115 	stw	r2,4(sp)
   11aa0:	d8c00215 	stw	r3,8(sp)
   11aa4:	d9000015 	stw	r4,0(sp)
   11aa8:	003ef706 	br	11688 <atan+0xd4>
   11aac:	18e0003c 	xorhi	r3,r3,32768
   11ab0:	d8800115 	stw	r2,4(sp)
   11ab4:	d8c00215 	stw	r3,8(sp)
   11ab8:	003edb06 	br	11628 <atan+0x74>
   11abc:	103ed41e 	bne	r2,zero,11610 <atan+0x5c>
   11ac0:	073fc016 	blt	zero,fp,119c4 <atan+0x410>
   11ac4:	00001d06 	br	11b3c <atan+0x588>
   11ac8:	380d883a 	mov	r6,r7
   11acc:	180f883a 	mov	r7,r3
   11ad0:	00125440 	call	12544 <__adddf3>
   11ad4:	d9000117 	ldw	r4,4(sp)
   11ad8:	d9400217 	ldw	r5,8(sp)
   11adc:	180f883a 	mov	r7,r3
   11ae0:	100d883a 	mov	r6,r2
   11ae4:	00125b80 	call	125b8 <__muldf3>
   11ae8:	d9400217 	ldw	r5,8(sp)
   11aec:	d9000117 	ldw	r4,4(sp)
   11af0:	180f883a 	mov	r7,r3
   11af4:	100d883a 	mov	r6,r2
   11af8:	00124c40 	call	124c4 <__subdf3>
   11afc:	003ec806 	br	11620 <atan+0x6c>
   11b00:	009000f4 	movhi	r2,16387
   11b04:	109fffc4 	addi	r2,r2,32767
   11b08:	1400310e 	bge	r2,r16,11bd0 <atan+0x61c>
   11b0c:	0005883a 	mov	r2,zero
   11b10:	00effc34 	movhi	r3,49136
   11b14:	1009883a 	mov	r4,r2
   11b18:	180b883a 	mov	r5,r3
   11b1c:	b80f883a 	mov	r7,r23
   11b20:	b00d883a 	mov	r6,r22
   11b24:	001297c0 	call	1297c <__divdf3>
   11b28:	010000c4 	movi	r4,3
   11b2c:	d8800115 	stw	r2,4(sp)
   11b30:	d8c00215 	stw	r3,8(sp)
   11b34:	d9000015 	stw	r4,0(sp)
   11b38:	003ed306 	br	11688 <atan+0xd4>
   11b3c:	01151134 	movhi	r4,21572
   11b40:	210b4604 	addi	r4,r4,11544
   11b44:	00affe74 	movhi	r2,49145
   11b48:	10887ec4 	addi	r2,r2,8699
   11b4c:	d9000115 	stw	r4,4(sp)
   11b50:	d8800215 	stw	r2,8(sp)
   11b54:	003eb406 	br	11628 <atan+0x74>
   11b58:	b009883a 	mov	r4,r22
   11b5c:	180b883a 	mov	r5,r3
   11b60:	b00d883a 	mov	r6,r22
   11b64:	180f883a 	mov	r7,r3
   11b68:	00125440 	call	12544 <__adddf3>
   11b6c:	0011883a 	mov	r8,zero
   11b70:	024ffc34 	movhi	r9,16368
   11b74:	480f883a 	mov	r7,r9
   11b78:	400d883a 	mov	r6,r8
   11b7c:	180b883a 	mov	r5,r3
   11b80:	1009883a 	mov	r4,r2
   11b84:	00124c40 	call	124c4 <__subdf3>
   11b88:	0011883a 	mov	r8,zero
   11b8c:	02500034 	movhi	r9,16384
   11b90:	480f883a 	mov	r7,r9
   11b94:	400d883a 	mov	r6,r8
   11b98:	b80b883a 	mov	r5,r23
   11b9c:	b009883a 	mov	r4,r22
   11ba0:	1021883a 	mov	r16,r2
   11ba4:	1823883a 	mov	r17,r3
   11ba8:	00125440 	call	12544 <__adddf3>
   11bac:	180f883a 	mov	r7,r3
   11bb0:	880b883a 	mov	r5,r17
   11bb4:	8009883a 	mov	r4,r16
   11bb8:	100d883a 	mov	r6,r2
   11bbc:	001297c0 	call	1297c <__divdf3>
   11bc0:	d8800115 	stw	r2,4(sp)
   11bc4:	d8c00215 	stw	r3,8(sp)
   11bc8:	d8000015 	stw	zero,0(sp)
   11bcc:	003eae06 	br	11688 <atan+0xd4>
   11bd0:	044ffe34 	movhi	r17,16376
   11bd4:	0021883a 	mov	r16,zero
   11bd8:	800d883a 	mov	r6,r16
   11bdc:	880f883a 	mov	r7,r17
   11be0:	b009883a 	mov	r4,r22
   11be4:	180b883a 	mov	r5,r3
   11be8:	00124c40 	call	124c4 <__subdf3>
   11bec:	880f883a 	mov	r7,r17
   11bf0:	000d883a 	mov	r6,zero
   11bf4:	b80b883a 	mov	r5,r23
   11bf8:	b009883a 	mov	r4,r22
   11bfc:	1021883a 	mov	r16,r2
   11c00:	1823883a 	mov	r17,r3
   11c04:	00125b80 	call	125b8 <__muldf3>
   11c08:	0011883a 	mov	r8,zero
   11c0c:	024ffc34 	movhi	r9,16368
   11c10:	480f883a 	mov	r7,r9
   11c14:	400d883a 	mov	r6,r8
   11c18:	180b883a 	mov	r5,r3
   11c1c:	1009883a 	mov	r4,r2
   11c20:	00125440 	call	12544 <__adddf3>
   11c24:	180f883a 	mov	r7,r3
   11c28:	8009883a 	mov	r4,r16
   11c2c:	880b883a 	mov	r5,r17
   11c30:	100d883a 	mov	r6,r2
   11c34:	001297c0 	call	1297c <__divdf3>
   11c38:	01000084 	movi	r4,2
   11c3c:	d8800115 	stw	r2,4(sp)
   11c40:	d8c00215 	stw	r3,8(sp)
   11c44:	d9000015 	stw	r4,0(sp)
   11c48:	003e8f06 	br	11688 <atan+0xd4>

00011c4c <fabs>:
   11c4c:	01e00034 	movhi	r7,32768
   11c50:	39ffffc4 	addi	r7,r7,-1
   11c54:	394e703a 	and	r7,r7,r5
   11c58:	2005883a 	mov	r2,r4
   11c5c:	3807883a 	mov	r3,r7
   11c60:	f800283a 	ret

00011c64 <__mulsf3>:
   11c64:	deffef04 	addi	sp,sp,-68
   11c68:	dc400f15 	stw	r17,60(sp)
   11c6c:	dc400204 	addi	r17,sp,8
   11c70:	dc000e15 	stw	r16,56(sp)
   11c74:	d9000015 	stw	r4,0(sp)
   11c78:	d9400115 	stw	r5,4(sp)
   11c7c:	d809883a 	mov	r4,sp
   11c80:	880b883a 	mov	r5,r17
   11c84:	dc000604 	addi	r16,sp,24
   11c88:	dfc01015 	stw	ra,64(sp)
   11c8c:	00131000 	call	13100 <__unpack_f>
   11c90:	d9000104 	addi	r4,sp,4
   11c94:	800b883a 	mov	r5,r16
   11c98:	00131000 	call	13100 <__unpack_f>
   11c9c:	d9000217 	ldw	r4,8(sp)
   11ca0:	00800044 	movi	r2,1
   11ca4:	01400104 	movi	r5,4
   11ca8:	1100142e 	bgeu	r2,r4,11cfc <__mulsf3+0x98>
   11cac:	d8c00617 	ldw	r3,24(sp)
   11cb0:	10c0052e 	bgeu	r2,r3,11cc8 <__mulsf3+0x64>
   11cb4:	21400f26 	beq	r4,r5,11cf4 <__mulsf3+0x90>
   11cb8:	19405d26 	beq	r3,r5,11e30 <__mulsf3+0x1cc>
   11cbc:	00800084 	movi	r2,2
   11cc0:	20800e26 	beq	r4,r2,11cfc <__mulsf3+0x98>
   11cc4:	1880181e 	bne	r3,r2,11d28 <__mulsf3+0xc4>
   11cc8:	d8c00717 	ldw	r3,28(sp)
   11ccc:	d8800317 	ldw	r2,12(sp)
   11cd0:	8009883a 	mov	r4,r16
   11cd4:	10c4c03a 	cmpne	r2,r2,r3
   11cd8:	d8800715 	stw	r2,28(sp)
   11cdc:	0012fa00 	call	12fa0 <__pack_f>
   11ce0:	dfc01017 	ldw	ra,64(sp)
   11ce4:	dc400f17 	ldw	r17,60(sp)
   11ce8:	dc000e17 	ldw	r16,56(sp)
   11cec:	dec01104 	addi	sp,sp,68
   11cf0:	f800283a 	ret
   11cf4:	00800084 	movi	r2,2
   11cf8:	18804f26 	beq	r3,r2,11e38 <__mulsf3+0x1d4>
   11cfc:	d8800317 	ldw	r2,12(sp)
   11d00:	d8c00717 	ldw	r3,28(sp)
   11d04:	8809883a 	mov	r4,r17
   11d08:	10c4c03a 	cmpne	r2,r2,r3
   11d0c:	d8800315 	stw	r2,12(sp)
   11d10:	0012fa00 	call	12fa0 <__pack_f>
   11d14:	dfc01017 	ldw	ra,64(sp)
   11d18:	dc400f17 	ldw	r17,60(sp)
   11d1c:	dc000e17 	ldw	r16,56(sp)
   11d20:	dec01104 	addi	sp,sp,68
   11d24:	f800283a 	ret
   11d28:	d8800517 	ldw	r2,20(sp)
   11d2c:	da000917 	ldw	r8,36(sp)
   11d30:	0013883a 	mov	r9,zero
   11d34:	0007883a 	mov	r3,zero
   11d38:	480f883a 	mov	r7,r9
   11d3c:	180b883a 	mov	r5,r3
   11d40:	400d883a 	mov	r6,r8
   11d44:	1009883a 	mov	r4,r2
   11d48:	0012e880 	call	12e88 <__muldi3>
   11d4c:	da800417 	ldw	r10,16(sp)
   11d50:	d9800817 	ldw	r6,32(sp)
   11d54:	da400317 	ldw	r9,12(sp)
   11d58:	52800084 	addi	r10,r10,2
   11d5c:	3295883a 	add	r10,r6,r10
   11d60:	d9800717 	ldw	r6,28(sp)
   11d64:	180b883a 	mov	r5,r3
   11d68:	180f883a 	mov	r7,r3
   11d6c:	4992c03a 	cmpne	r9,r9,r6
   11d70:	da400b15 	stw	r9,44(sp)
   11d74:	1007883a 	mov	r3,r2
   11d78:	da800c15 	stw	r10,48(sp)
   11d7c:	2800070e 	bge	r5,zero,11d9c <__mulsf3+0x138>
   11d80:	2880004c 	andi	r2,r5,1
   11d84:	1005003a 	cmpeq	r2,r2,zero
   11d88:	500d883a 	mov	r6,r10
   11d8c:	10001e26 	beq	r2,zero,11e08 <__mulsf3+0x1a4>
   11d90:	380ed07a 	srli	r7,r7,1
   11d94:	31800044 	addi	r6,r6,1
   11d98:	d9800c15 	stw	r6,48(sp)
   11d9c:	01100034 	movhi	r4,16384
   11da0:	213fffc4 	addi	r4,r4,-1
   11da4:	21c00b36 	bltu	r4,r7,11dd4 <__mulsf3+0x170>
   11da8:	d8800c17 	ldw	r2,48(sp)
   11dac:	00000206 	br	11db8 <__mulsf3+0x154>
   11db0:	18c7883a 	add	r3,r3,r3
   11db4:	21c00636 	bltu	r4,r7,11dd0 <__mulsf3+0x16c>
   11db8:	10bfffc4 	addi	r2,r2,-1
   11dbc:	39cf883a 	add	r7,r7,r7
   11dc0:	183ffb0e 	bge	r3,zero,11db0 <__mulsf3+0x14c>
   11dc4:	39c00054 	ori	r7,r7,1
   11dc8:	18c7883a 	add	r3,r3,r3
   11dcc:	21fffa2e 	bgeu	r4,r7,11db8 <__mulsf3+0x154>
   11dd0:	d8800c15 	stw	r2,48(sp)
   11dd4:	39001fcc 	andi	r4,r7,127
   11dd8:	00801004 	movi	r2,64
   11ddc:	20800d26 	beq	r4,r2,11e14 <__mulsf3+0x1b0>
   11de0:	008000c4 	movi	r2,3
   11de4:	d9000a04 	addi	r4,sp,40
   11de8:	d9c00d15 	stw	r7,52(sp)
   11dec:	d8800a15 	stw	r2,40(sp)
   11df0:	0012fa00 	call	12fa0 <__pack_f>
   11df4:	dfc01017 	ldw	ra,64(sp)
   11df8:	dc400f17 	ldw	r17,60(sp)
   11dfc:	dc000e17 	ldw	r16,56(sp)
   11e00:	dec01104 	addi	sp,sp,68
   11e04:	f800283a 	ret
   11e08:	1804d07a 	srli	r2,r3,1
   11e0c:	10e00034 	orhi	r3,r2,32768
   11e10:	003fdf06 	br	11d90 <__mulsf3+0x12c>
   11e14:	3880200c 	andi	r2,r7,128
   11e18:	103ff11e 	bne	r2,zero,11de0 <__mulsf3+0x17c>
   11e1c:	183ff026 	beq	r3,zero,11de0 <__mulsf3+0x17c>
   11e20:	3907883a 	add	r3,r7,r4
   11e24:	00bfe004 	movi	r2,-128
   11e28:	188e703a 	and	r7,r3,r2
   11e2c:	003fec06 	br	11de0 <__mulsf3+0x17c>
   11e30:	00800084 	movi	r2,2
   11e34:	20bfa41e 	bne	r4,r2,11cc8 <__mulsf3+0x64>
   11e38:	01000074 	movhi	r4,1
   11e3c:	21163f04 	addi	r4,r4,22780
   11e40:	003fb306 	br	11d10 <__mulsf3+0xac>

00011e44 <__eqsf2>:
   11e44:	defff304 	addi	sp,sp,-52
   11e48:	dc400b15 	stw	r17,44(sp)
   11e4c:	dc400204 	addi	r17,sp,8
   11e50:	dc000a15 	stw	r16,40(sp)
   11e54:	d9000015 	stw	r4,0(sp)
   11e58:	d9400115 	stw	r5,4(sp)
   11e5c:	d809883a 	mov	r4,sp
   11e60:	880b883a 	mov	r5,r17
   11e64:	dc000604 	addi	r16,sp,24
   11e68:	dfc00c15 	stw	ra,48(sp)
   11e6c:	00131000 	call	13100 <__unpack_f>
   11e70:	d9000104 	addi	r4,sp,4
   11e74:	800b883a 	mov	r5,r16
   11e78:	00131000 	call	13100 <__unpack_f>
   11e7c:	d8800217 	ldw	r2,8(sp)
   11e80:	00c00044 	movi	r3,1
   11e84:	180d883a 	mov	r6,r3
   11e88:	1880062e 	bgeu	r3,r2,11ea4 <__eqsf2+0x60>
   11e8c:	d8800617 	ldw	r2,24(sp)
   11e90:	8809883a 	mov	r4,r17
   11e94:	800b883a 	mov	r5,r16
   11e98:	1880022e 	bgeu	r3,r2,11ea4 <__eqsf2+0x60>
   11e9c:	00131c80 	call	131c8 <__fpcmp_parts_f>
   11ea0:	100d883a 	mov	r6,r2
   11ea4:	3005883a 	mov	r2,r6
   11ea8:	dfc00c17 	ldw	ra,48(sp)
   11eac:	dc400b17 	ldw	r17,44(sp)
   11eb0:	dc000a17 	ldw	r16,40(sp)
   11eb4:	dec00d04 	addi	sp,sp,52
   11eb8:	f800283a 	ret

00011ebc <__ltsf2>:
   11ebc:	defff304 	addi	sp,sp,-52
   11ec0:	dc400b15 	stw	r17,44(sp)
   11ec4:	dc400204 	addi	r17,sp,8
   11ec8:	dc000a15 	stw	r16,40(sp)
   11ecc:	d9000015 	stw	r4,0(sp)
   11ed0:	d9400115 	stw	r5,4(sp)
   11ed4:	d809883a 	mov	r4,sp
   11ed8:	880b883a 	mov	r5,r17
   11edc:	dc000604 	addi	r16,sp,24
   11ee0:	dfc00c15 	stw	ra,48(sp)
   11ee4:	00131000 	call	13100 <__unpack_f>
   11ee8:	d9000104 	addi	r4,sp,4
   11eec:	800b883a 	mov	r5,r16
   11ef0:	00131000 	call	13100 <__unpack_f>
   11ef4:	d8800217 	ldw	r2,8(sp)
   11ef8:	00c00044 	movi	r3,1
   11efc:	180d883a 	mov	r6,r3
   11f00:	1880062e 	bgeu	r3,r2,11f1c <__ltsf2+0x60>
   11f04:	d8800617 	ldw	r2,24(sp)
   11f08:	8809883a 	mov	r4,r17
   11f0c:	800b883a 	mov	r5,r16
   11f10:	1880022e 	bgeu	r3,r2,11f1c <__ltsf2+0x60>
   11f14:	00131c80 	call	131c8 <__fpcmp_parts_f>
   11f18:	100d883a 	mov	r6,r2
   11f1c:	3005883a 	mov	r2,r6
   11f20:	dfc00c17 	ldw	ra,48(sp)
   11f24:	dc400b17 	ldw	r17,44(sp)
   11f28:	dc000a17 	ldw	r16,40(sp)
   11f2c:	dec00d04 	addi	sp,sp,52
   11f30:	f800283a 	ret

00011f34 <__floatsisf>:
   11f34:	2006d7fa 	srli	r3,r4,31
   11f38:	defffa04 	addi	sp,sp,-24
   11f3c:	008000c4 	movi	r2,3
   11f40:	dfc00515 	stw	ra,20(sp)
   11f44:	dc000415 	stw	r16,16(sp)
   11f48:	d8800015 	stw	r2,0(sp)
   11f4c:	d8c00115 	stw	r3,4(sp)
   11f50:	2000081e 	bne	r4,zero,11f74 <__floatsisf+0x40>
   11f54:	00800084 	movi	r2,2
   11f58:	d8800015 	stw	r2,0(sp)
   11f5c:	d809883a 	mov	r4,sp
   11f60:	0012fa00 	call	12fa0 <__pack_f>
   11f64:	dfc00517 	ldw	ra,20(sp)
   11f68:	dc000417 	ldw	r16,16(sp)
   11f6c:	dec00604 	addi	sp,sp,24
   11f70:	f800283a 	ret
   11f74:	00800784 	movi	r2,30
   11f78:	1807003a 	cmpeq	r3,r3,zero
   11f7c:	d8800215 	stw	r2,8(sp)
   11f80:	18000e1e 	bne	r3,zero,11fbc <__floatsisf+0x88>
   11f84:	00a00034 	movhi	r2,32768
   11f88:	20800e26 	beq	r4,r2,11fc4 <__floatsisf+0x90>
   11f8c:	0121c83a 	sub	r16,zero,r4
   11f90:	8009883a 	mov	r4,r16
   11f94:	dc000315 	stw	r16,12(sp)
   11f98:	0012f200 	call	12f20 <__clzsi2>
   11f9c:	117fffc4 	addi	r5,r2,-1
   11fa0:	017fee0e 	bge	zero,r5,11f5c <__floatsisf+0x28>
   11fa4:	d8800217 	ldw	r2,8(sp)
   11fa8:	8146983a 	sll	r3,r16,r5
   11fac:	1145c83a 	sub	r2,r2,r5
   11fb0:	d8c00315 	stw	r3,12(sp)
   11fb4:	d8800215 	stw	r2,8(sp)
   11fb8:	003fe806 	br	11f5c <__floatsisf+0x28>
   11fbc:	2021883a 	mov	r16,r4
   11fc0:	003ff306 	br	11f90 <__floatsisf+0x5c>
   11fc4:	00b3c034 	movhi	r2,52992
   11fc8:	003fe606 	br	11f64 <__floatsisf+0x30>

00011fcc <__fixsfsi>:
   11fcc:	defffa04 	addi	sp,sp,-24
   11fd0:	d9000015 	stw	r4,0(sp)
   11fd4:	d9400104 	addi	r5,sp,4
   11fd8:	d809883a 	mov	r4,sp
   11fdc:	dfc00515 	stw	ra,20(sp)
   11fe0:	00131000 	call	13100 <__unpack_f>
   11fe4:	d8c00117 	ldw	r3,4(sp)
   11fe8:	00800084 	movi	r2,2
   11fec:	1880041e 	bne	r3,r2,12000 <__fixsfsi+0x34>
   11ff0:	0005883a 	mov	r2,zero
   11ff4:	dfc00517 	ldw	ra,20(sp)
   11ff8:	dec00604 	addi	sp,sp,24
   11ffc:	f800283a 	ret
   12000:	00800044 	movi	r2,1
   12004:	10fffa2e 	bgeu	r2,r3,11ff0 <__fixsfsi+0x24>
   12008:	00800104 	movi	r2,4
   1200c:	18800426 	beq	r3,r2,12020 <__fixsfsi+0x54>
   12010:	d8800317 	ldw	r2,12(sp)
   12014:	103ff616 	blt	r2,zero,11ff0 <__fixsfsi+0x24>
   12018:	00c00784 	movi	r3,30
   1201c:	1880070e 	bge	r3,r2,1203c <__fixsfsi+0x70>
   12020:	d8800217 	ldw	r2,8(sp)
   12024:	10000c1e 	bne	r2,zero,12058 <__fixsfsi+0x8c>
   12028:	00a00034 	movhi	r2,32768
   1202c:	10bfffc4 	addi	r2,r2,-1
   12030:	dfc00517 	ldw	ra,20(sp)
   12034:	dec00604 	addi	sp,sp,24
   12038:	f800283a 	ret
   1203c:	1885c83a 	sub	r2,r3,r2
   12040:	d9000217 	ldw	r4,8(sp)
   12044:	d8c00417 	ldw	r3,16(sp)
   12048:	1884d83a 	srl	r2,r3,r2
   1204c:	203fe926 	beq	r4,zero,11ff4 <__fixsfsi+0x28>
   12050:	0085c83a 	sub	r2,zero,r2
   12054:	003fe706 	br	11ff4 <__fixsfsi+0x28>
   12058:	00a00034 	movhi	r2,32768
   1205c:	003fe506 	br	11ff4 <__fixsfsi+0x28>

00012060 <__extendsfdf2>:
   12060:	defff904 	addi	sp,sp,-28
   12064:	d9000115 	stw	r4,4(sp)
   12068:	d9400204 	addi	r5,sp,8
   1206c:	d9000104 	addi	r4,sp,4
   12070:	dfc00615 	stw	ra,24(sp)
   12074:	00131000 	call	13100 <__unpack_f>
   12078:	d9c00517 	ldw	r7,20(sp)
   1207c:	0011883a 	mov	r8,zero
   12080:	400697ba 	slli	r3,r8,30
   12084:	3812d0ba 	srli	r9,r7,2
   12088:	380497ba 	slli	r2,r7,30
   1208c:	d9000217 	ldw	r4,8(sp)
   12090:	d9400317 	ldw	r5,12(sp)
   12094:	d9800417 	ldw	r6,16(sp)
   12098:	48c6b03a 	or	r3,r9,r3
   1209c:	100f883a 	mov	r7,r2
   120a0:	d8c00015 	stw	r3,0(sp)
   120a4:	0012ddc0 	call	12ddc <__make_dp>
   120a8:	dfc00617 	ldw	ra,24(sp)
   120ac:	dec00704 	addi	sp,sp,28
   120b0:	f800283a 	ret

000120b4 <_fpadd_parts>:
   120b4:	defff804 	addi	sp,sp,-32
   120b8:	dcc00315 	stw	r19,12(sp)
   120bc:	2027883a 	mov	r19,r4
   120c0:	21000017 	ldw	r4,0(r4)
   120c4:	00c00044 	movi	r3,1
   120c8:	dd400515 	stw	r21,20(sp)
   120cc:	dd000415 	stw	r20,16(sp)
   120d0:	ddc00715 	stw	r23,28(sp)
   120d4:	dd800615 	stw	r22,24(sp)
   120d8:	dc800215 	stw	r18,8(sp)
   120dc:	dc400115 	stw	r17,4(sp)
   120e0:	dc000015 	stw	r16,0(sp)
   120e4:	282b883a 	mov	r21,r5
   120e8:	3029883a 	mov	r20,r6
   120ec:	1900632e 	bgeu	r3,r4,1227c <_fpadd_parts+0x1c8>
   120f0:	28800017 	ldw	r2,0(r5)
   120f4:	1880812e 	bgeu	r3,r2,122fc <_fpadd_parts+0x248>
   120f8:	00c00104 	movi	r3,4
   120fc:	20c0dc26 	beq	r4,r3,12470 <_fpadd_parts+0x3bc>
   12100:	10c07e26 	beq	r2,r3,122fc <_fpadd_parts+0x248>
   12104:	00c00084 	movi	r3,2
   12108:	10c06726 	beq	r2,r3,122a8 <_fpadd_parts+0x1f4>
   1210c:	20c07b26 	beq	r4,r3,122fc <_fpadd_parts+0x248>
   12110:	9dc00217 	ldw	r23,8(r19)
   12114:	28c00217 	ldw	r3,8(r5)
   12118:	9c400317 	ldw	r17,12(r19)
   1211c:	2bc00317 	ldw	r15,12(r5)
   12120:	b8cdc83a 	sub	r6,r23,r3
   12124:	9c800417 	ldw	r18,16(r19)
   12128:	2c000417 	ldw	r16,16(r5)
   1212c:	3009883a 	mov	r4,r6
   12130:	30009716 	blt	r6,zero,12390 <_fpadd_parts+0x2dc>
   12134:	00800fc4 	movi	r2,63
   12138:	11806b16 	blt	r2,r6,122e8 <_fpadd_parts+0x234>
   1213c:	0100a40e 	bge	zero,r4,123d0 <_fpadd_parts+0x31c>
   12140:	35bff804 	addi	r22,r6,-32
   12144:	b000bc16 	blt	r22,zero,12438 <_fpadd_parts+0x384>
   12148:	8596d83a 	srl	r11,r16,r22
   1214c:	0019883a 	mov	r12,zero
   12150:	0013883a 	mov	r9,zero
   12154:	01000044 	movi	r4,1
   12158:	0015883a 	mov	r10,zero
   1215c:	b000be16 	blt	r22,zero,12458 <_fpadd_parts+0x3a4>
   12160:	2590983a 	sll	r8,r4,r22
   12164:	000f883a 	mov	r7,zero
   12168:	00bfffc4 	movi	r2,-1
   1216c:	3889883a 	add	r4,r7,r2
   12170:	408b883a 	add	r5,r8,r2
   12174:	21cd803a 	cmpltu	r6,r4,r7
   12178:	314b883a 	add	r5,r6,r5
   1217c:	7904703a 	and	r2,r15,r4
   12180:	8146703a 	and	r3,r16,r5
   12184:	10c4b03a 	or	r2,r2,r3
   12188:	10000226 	beq	r2,zero,12194 <_fpadd_parts+0xe0>
   1218c:	02400044 	movi	r9,1
   12190:	0015883a 	mov	r10,zero
   12194:	5a5eb03a 	or	r15,r11,r9
   12198:	62a0b03a 	or	r16,r12,r10
   1219c:	99400117 	ldw	r5,4(r19)
   121a0:	a8800117 	ldw	r2,4(r21)
   121a4:	28806e26 	beq	r5,r2,12360 <_fpadd_parts+0x2ac>
   121a8:	28006626 	beq	r5,zero,12344 <_fpadd_parts+0x290>
   121ac:	7c45c83a 	sub	r2,r15,r17
   121b0:	7889803a 	cmpltu	r4,r15,r2
   121b4:	8487c83a 	sub	r3,r16,r18
   121b8:	1909c83a 	sub	r4,r3,r4
   121bc:	100d883a 	mov	r6,r2
   121c0:	200f883a 	mov	r7,r4
   121c4:	38007716 	blt	r7,zero,123a4 <_fpadd_parts+0x2f0>
   121c8:	a5c00215 	stw	r23,8(r20)
   121cc:	a1c00415 	stw	r7,16(r20)
   121d0:	a0000115 	stw	zero,4(r20)
   121d4:	a1800315 	stw	r6,12(r20)
   121d8:	a2000317 	ldw	r8,12(r20)
   121dc:	a2400417 	ldw	r9,16(r20)
   121e0:	00bfffc4 	movi	r2,-1
   121e4:	408b883a 	add	r5,r8,r2
   121e8:	2a09803a 	cmpltu	r4,r5,r8
   121ec:	488d883a 	add	r6,r9,r2
   121f0:	01c40034 	movhi	r7,4096
   121f4:	39ffffc4 	addi	r7,r7,-1
   121f8:	218d883a 	add	r6,r4,r6
   121fc:	39801736 	bltu	r7,r6,1225c <_fpadd_parts+0x1a8>
   12200:	31c06526 	beq	r6,r7,12398 <_fpadd_parts+0x2e4>
   12204:	a3000217 	ldw	r12,8(r20)
   12208:	4209883a 	add	r4,r8,r8
   1220c:	00bfffc4 	movi	r2,-1
   12210:	220f803a 	cmpltu	r7,r4,r8
   12214:	4a4b883a 	add	r5,r9,r9
   12218:	394f883a 	add	r7,r7,r5
   1221c:	2095883a 	add	r10,r4,r2
   12220:	3897883a 	add	r11,r7,r2
   12224:	510d803a 	cmpltu	r6,r10,r4
   12228:	6099883a 	add	r12,r12,r2
   1222c:	32d7883a 	add	r11,r6,r11
   12230:	00840034 	movhi	r2,4096
   12234:	10bfffc4 	addi	r2,r2,-1
   12238:	2011883a 	mov	r8,r4
   1223c:	3813883a 	mov	r9,r7
   12240:	a1000315 	stw	r4,12(r20)
   12244:	a1c00415 	stw	r7,16(r20)
   12248:	a3000215 	stw	r12,8(r20)
   1224c:	12c00336 	bltu	r2,r11,1225c <_fpadd_parts+0x1a8>
   12250:	58bfed1e 	bne	r11,r2,12208 <_fpadd_parts+0x154>
   12254:	00bfff84 	movi	r2,-2
   12258:	12bfeb2e 	bgeu	r2,r10,12208 <_fpadd_parts+0x154>
   1225c:	a2800417 	ldw	r10,16(r20)
   12260:	008000c4 	movi	r2,3
   12264:	00c80034 	movhi	r3,8192
   12268:	18ffffc4 	addi	r3,r3,-1
   1226c:	a2400317 	ldw	r9,12(r20)
   12270:	a0800015 	stw	r2,0(r20)
   12274:	1a802336 	bltu	r3,r10,12304 <_fpadd_parts+0x250>
   12278:	a027883a 	mov	r19,r20
   1227c:	9805883a 	mov	r2,r19
   12280:	ddc00717 	ldw	r23,28(sp)
   12284:	dd800617 	ldw	r22,24(sp)
   12288:	dd400517 	ldw	r21,20(sp)
   1228c:	dd000417 	ldw	r20,16(sp)
   12290:	dcc00317 	ldw	r19,12(sp)
   12294:	dc800217 	ldw	r18,8(sp)
   12298:	dc400117 	ldw	r17,4(sp)
   1229c:	dc000017 	ldw	r16,0(sp)
   122a0:	dec00804 	addi	sp,sp,32
   122a4:	f800283a 	ret
   122a8:	20fff41e 	bne	r4,r3,1227c <_fpadd_parts+0x1c8>
   122ac:	31000015 	stw	r4,0(r6)
   122b0:	98800117 	ldw	r2,4(r19)
   122b4:	30800115 	stw	r2,4(r6)
   122b8:	98c00217 	ldw	r3,8(r19)
   122bc:	30c00215 	stw	r3,8(r6)
   122c0:	98800317 	ldw	r2,12(r19)
   122c4:	30800315 	stw	r2,12(r6)
   122c8:	98c00417 	ldw	r3,16(r19)
   122cc:	30c00415 	stw	r3,16(r6)
   122d0:	98800117 	ldw	r2,4(r19)
   122d4:	28c00117 	ldw	r3,4(r5)
   122d8:	3027883a 	mov	r19,r6
   122dc:	10c4703a 	and	r2,r2,r3
   122e0:	30800115 	stw	r2,4(r6)
   122e4:	003fe506 	br	1227c <_fpadd_parts+0x1c8>
   122e8:	1dc02616 	blt	r3,r23,12384 <_fpadd_parts+0x2d0>
   122ec:	0023883a 	mov	r17,zero
   122f0:	182f883a 	mov	r23,r3
   122f4:	0025883a 	mov	r18,zero
   122f8:	003fa806 	br	1219c <_fpadd_parts+0xe8>
   122fc:	a827883a 	mov	r19,r21
   12300:	003fde06 	br	1227c <_fpadd_parts+0x1c8>
   12304:	01800044 	movi	r6,1
   12308:	500497fa 	slli	r2,r10,31
   1230c:	4808d07a 	srli	r4,r9,1
   12310:	518ad83a 	srl	r5,r10,r6
   12314:	a2000217 	ldw	r8,8(r20)
   12318:	1108b03a 	or	r4,r2,r4
   1231c:	0007883a 	mov	r3,zero
   12320:	4984703a 	and	r2,r9,r6
   12324:	208cb03a 	or	r6,r4,r2
   12328:	28ceb03a 	or	r7,r5,r3
   1232c:	42000044 	addi	r8,r8,1
   12330:	a027883a 	mov	r19,r20
   12334:	a1c00415 	stw	r7,16(r20)
   12338:	a2000215 	stw	r8,8(r20)
   1233c:	a1800315 	stw	r6,12(r20)
   12340:	003fce06 	br	1227c <_fpadd_parts+0x1c8>
   12344:	8bc5c83a 	sub	r2,r17,r15
   12348:	8889803a 	cmpltu	r4,r17,r2
   1234c:	9407c83a 	sub	r3,r18,r16
   12350:	1909c83a 	sub	r4,r3,r4
   12354:	100d883a 	mov	r6,r2
   12358:	200f883a 	mov	r7,r4
   1235c:	003f9906 	br	121c4 <_fpadd_parts+0x110>
   12360:	7c45883a 	add	r2,r15,r17
   12364:	13c9803a 	cmpltu	r4,r2,r15
   12368:	8487883a 	add	r3,r16,r18
   1236c:	20c9883a 	add	r4,r4,r3
   12370:	a1400115 	stw	r5,4(r20)
   12374:	a5c00215 	stw	r23,8(r20)
   12378:	a0800315 	stw	r2,12(r20)
   1237c:	a1000415 	stw	r4,16(r20)
   12380:	003fb606 	br	1225c <_fpadd_parts+0x1a8>
   12384:	001f883a 	mov	r15,zero
   12388:	0021883a 	mov	r16,zero
   1238c:	003f8306 	br	1219c <_fpadd_parts+0xe8>
   12390:	018dc83a 	sub	r6,zero,r6
   12394:	003f6706 	br	12134 <_fpadd_parts+0x80>
   12398:	00bfff84 	movi	r2,-2
   1239c:	117faf36 	bltu	r2,r5,1225c <_fpadd_parts+0x1a8>
   123a0:	003f9806 	br	12204 <_fpadd_parts+0x150>
   123a4:	0005883a 	mov	r2,zero
   123a8:	1189c83a 	sub	r4,r2,r6
   123ac:	1105803a 	cmpltu	r2,r2,r4
   123b0:	01cbc83a 	sub	r5,zero,r7
   123b4:	2885c83a 	sub	r2,r5,r2
   123b8:	01800044 	movi	r6,1
   123bc:	a1800115 	stw	r6,4(r20)
   123c0:	a5c00215 	stw	r23,8(r20)
   123c4:	a1000315 	stw	r4,12(r20)
   123c8:	a0800415 	stw	r2,16(r20)
   123cc:	003f8206 	br	121d8 <_fpadd_parts+0x124>
   123d0:	203f7226 	beq	r4,zero,1219c <_fpadd_parts+0xe8>
   123d4:	35bff804 	addi	r22,r6,-32
   123d8:	b9af883a 	add	r23,r23,r6
   123dc:	b0003116 	blt	r22,zero,124a4 <_fpadd_parts+0x3f0>
   123e0:	959ad83a 	srl	r13,r18,r22
   123e4:	001d883a 	mov	r14,zero
   123e8:	000f883a 	mov	r7,zero
   123ec:	01000044 	movi	r4,1
   123f0:	0011883a 	mov	r8,zero
   123f4:	b0002516 	blt	r22,zero,1248c <_fpadd_parts+0x3d8>
   123f8:	2594983a 	sll	r10,r4,r22
   123fc:	0013883a 	mov	r9,zero
   12400:	00bfffc4 	movi	r2,-1
   12404:	4889883a 	add	r4,r9,r2
   12408:	508b883a 	add	r5,r10,r2
   1240c:	224d803a 	cmpltu	r6,r4,r9
   12410:	314b883a 	add	r5,r6,r5
   12414:	8904703a 	and	r2,r17,r4
   12418:	9146703a 	and	r3,r18,r5
   1241c:	10c4b03a 	or	r2,r2,r3
   12420:	10000226 	beq	r2,zero,1242c <_fpadd_parts+0x378>
   12424:	01c00044 	movi	r7,1
   12428:	0011883a 	mov	r8,zero
   1242c:	69e2b03a 	or	r17,r13,r7
   12430:	7224b03a 	or	r18,r14,r8
   12434:	003f5906 	br	1219c <_fpadd_parts+0xe8>
   12438:	8407883a 	add	r3,r16,r16
   1243c:	008007c4 	movi	r2,31
   12440:	1185c83a 	sub	r2,r2,r6
   12444:	1886983a 	sll	r3,r3,r2
   12448:	7996d83a 	srl	r11,r15,r6
   1244c:	8198d83a 	srl	r12,r16,r6
   12450:	1ad6b03a 	or	r11,r3,r11
   12454:	003f3e06 	br	12150 <_fpadd_parts+0x9c>
   12458:	2006d07a 	srli	r3,r4,1
   1245c:	008007c4 	movi	r2,31
   12460:	1185c83a 	sub	r2,r2,r6
   12464:	1890d83a 	srl	r8,r3,r2
   12468:	218e983a 	sll	r7,r4,r6
   1246c:	003f3e06 	br	12168 <_fpadd_parts+0xb4>
   12470:	113f821e 	bne	r2,r4,1227c <_fpadd_parts+0x1c8>
   12474:	28c00117 	ldw	r3,4(r5)
   12478:	98800117 	ldw	r2,4(r19)
   1247c:	10ff7f26 	beq	r2,r3,1227c <_fpadd_parts+0x1c8>
   12480:	04c00074 	movhi	r19,1
   12484:	9cd64304 	addi	r19,r19,22796
   12488:	003f7c06 	br	1227c <_fpadd_parts+0x1c8>
   1248c:	2006d07a 	srli	r3,r4,1
   12490:	008007c4 	movi	r2,31
   12494:	1185c83a 	sub	r2,r2,r6
   12498:	1894d83a 	srl	r10,r3,r2
   1249c:	2192983a 	sll	r9,r4,r6
   124a0:	003fd706 	br	12400 <_fpadd_parts+0x34c>
   124a4:	9487883a 	add	r3,r18,r18
   124a8:	008007c4 	movi	r2,31
   124ac:	1185c83a 	sub	r2,r2,r6
   124b0:	1886983a 	sll	r3,r3,r2
   124b4:	899ad83a 	srl	r13,r17,r6
   124b8:	919cd83a 	srl	r14,r18,r6
   124bc:	1b5ab03a 	or	r13,r3,r13
   124c0:	003fc906 	br	123e8 <_fpadd_parts+0x334>

000124c4 <__subdf3>:
   124c4:	deffea04 	addi	sp,sp,-88
   124c8:	dcc01415 	stw	r19,80(sp)
   124cc:	dcc00404 	addi	r19,sp,16
   124d0:	2011883a 	mov	r8,r4
   124d4:	2813883a 	mov	r9,r5
   124d8:	dc401315 	stw	r17,76(sp)
   124dc:	d809883a 	mov	r4,sp
   124e0:	980b883a 	mov	r5,r19
   124e4:	dc400904 	addi	r17,sp,36
   124e8:	dfc01515 	stw	ra,84(sp)
   124ec:	da400115 	stw	r9,4(sp)
   124f0:	d9c00315 	stw	r7,12(sp)
   124f4:	da000015 	stw	r8,0(sp)
   124f8:	d9800215 	stw	r6,8(sp)
   124fc:	00135b00 	call	135b0 <__unpack_d>
   12500:	d9000204 	addi	r4,sp,8
   12504:	880b883a 	mov	r5,r17
   12508:	00135b00 	call	135b0 <__unpack_d>
   1250c:	d8800a17 	ldw	r2,40(sp)
   12510:	880b883a 	mov	r5,r17
   12514:	9809883a 	mov	r4,r19
   12518:	d9800e04 	addi	r6,sp,56
   1251c:	1080005c 	xori	r2,r2,1
   12520:	d8800a15 	stw	r2,40(sp)
   12524:	00120b40 	call	120b4 <_fpadd_parts>
   12528:	1009883a 	mov	r4,r2
   1252c:	001329c0 	call	1329c <__pack_d>
   12530:	dfc01517 	ldw	ra,84(sp)
   12534:	dcc01417 	ldw	r19,80(sp)
   12538:	dc401317 	ldw	r17,76(sp)
   1253c:	dec01604 	addi	sp,sp,88
   12540:	f800283a 	ret

00012544 <__adddf3>:
   12544:	deffea04 	addi	sp,sp,-88
   12548:	dcc01415 	stw	r19,80(sp)
   1254c:	dcc00404 	addi	r19,sp,16
   12550:	2011883a 	mov	r8,r4
   12554:	2813883a 	mov	r9,r5
   12558:	dc401315 	stw	r17,76(sp)
   1255c:	d809883a 	mov	r4,sp
   12560:	980b883a 	mov	r5,r19
   12564:	dc400904 	addi	r17,sp,36
   12568:	dfc01515 	stw	ra,84(sp)
   1256c:	da400115 	stw	r9,4(sp)
   12570:	d9c00315 	stw	r7,12(sp)
   12574:	da000015 	stw	r8,0(sp)
   12578:	d9800215 	stw	r6,8(sp)
   1257c:	00135b00 	call	135b0 <__unpack_d>
   12580:	d9000204 	addi	r4,sp,8
   12584:	880b883a 	mov	r5,r17
   12588:	00135b00 	call	135b0 <__unpack_d>
   1258c:	d9800e04 	addi	r6,sp,56
   12590:	9809883a 	mov	r4,r19
   12594:	880b883a 	mov	r5,r17
   12598:	00120b40 	call	120b4 <_fpadd_parts>
   1259c:	1009883a 	mov	r4,r2
   125a0:	001329c0 	call	1329c <__pack_d>
   125a4:	dfc01517 	ldw	ra,84(sp)
   125a8:	dcc01417 	ldw	r19,80(sp)
   125ac:	dc401317 	ldw	r17,76(sp)
   125b0:	dec01604 	addi	sp,sp,88
   125b4:	f800283a 	ret

000125b8 <__muldf3>:
   125b8:	deffe004 	addi	sp,sp,-128
   125bc:	dc401815 	stw	r17,96(sp)
   125c0:	dc400404 	addi	r17,sp,16
   125c4:	2011883a 	mov	r8,r4
   125c8:	2813883a 	mov	r9,r5
   125cc:	dc001715 	stw	r16,92(sp)
   125d0:	d809883a 	mov	r4,sp
   125d4:	880b883a 	mov	r5,r17
   125d8:	dc000904 	addi	r16,sp,36
   125dc:	dfc01f15 	stw	ra,124(sp)
   125e0:	da400115 	stw	r9,4(sp)
   125e4:	d9c00315 	stw	r7,12(sp)
   125e8:	da000015 	stw	r8,0(sp)
   125ec:	d9800215 	stw	r6,8(sp)
   125f0:	ddc01e15 	stw	r23,120(sp)
   125f4:	dd801d15 	stw	r22,116(sp)
   125f8:	dd401c15 	stw	r21,112(sp)
   125fc:	dd001b15 	stw	r20,108(sp)
   12600:	dcc01a15 	stw	r19,104(sp)
   12604:	dc801915 	stw	r18,100(sp)
   12608:	00135b00 	call	135b0 <__unpack_d>
   1260c:	d9000204 	addi	r4,sp,8
   12610:	800b883a 	mov	r5,r16
   12614:	00135b00 	call	135b0 <__unpack_d>
   12618:	d9000417 	ldw	r4,16(sp)
   1261c:	00800044 	movi	r2,1
   12620:	1100102e 	bgeu	r2,r4,12664 <__muldf3+0xac>
   12624:	d8c00917 	ldw	r3,36(sp)
   12628:	10c0062e 	bgeu	r2,r3,12644 <__muldf3+0x8c>
   1262c:	00800104 	movi	r2,4
   12630:	20800a26 	beq	r4,r2,1265c <__muldf3+0xa4>
   12634:	1880cc26 	beq	r3,r2,12968 <__muldf3+0x3b0>
   12638:	00800084 	movi	r2,2
   1263c:	20800926 	beq	r4,r2,12664 <__muldf3+0xac>
   12640:	1880191e 	bne	r3,r2,126a8 <__muldf3+0xf0>
   12644:	d8c00a17 	ldw	r3,40(sp)
   12648:	d8800517 	ldw	r2,20(sp)
   1264c:	8009883a 	mov	r4,r16
   12650:	10c4c03a 	cmpne	r2,r2,r3
   12654:	d8800a15 	stw	r2,40(sp)
   12658:	00000706 	br	12678 <__muldf3+0xc0>
   1265c:	00800084 	movi	r2,2
   12660:	1880c326 	beq	r3,r2,12970 <__muldf3+0x3b8>
   12664:	d8800517 	ldw	r2,20(sp)
   12668:	d8c00a17 	ldw	r3,40(sp)
   1266c:	8809883a 	mov	r4,r17
   12670:	10c4c03a 	cmpne	r2,r2,r3
   12674:	d8800515 	stw	r2,20(sp)
   12678:	001329c0 	call	1329c <__pack_d>
   1267c:	dfc01f17 	ldw	ra,124(sp)
   12680:	ddc01e17 	ldw	r23,120(sp)
   12684:	dd801d17 	ldw	r22,116(sp)
   12688:	dd401c17 	ldw	r21,112(sp)
   1268c:	dd001b17 	ldw	r20,108(sp)
   12690:	dcc01a17 	ldw	r19,104(sp)
   12694:	dc801917 	ldw	r18,100(sp)
   12698:	dc401817 	ldw	r17,96(sp)
   1269c:	dc001717 	ldw	r16,92(sp)
   126a0:	dec02004 	addi	sp,sp,128
   126a4:	f800283a 	ret
   126a8:	dd800717 	ldw	r22,28(sp)
   126ac:	dc800c17 	ldw	r18,48(sp)
   126b0:	002b883a 	mov	r21,zero
   126b4:	0023883a 	mov	r17,zero
   126b8:	a80b883a 	mov	r5,r21
   126bc:	b00d883a 	mov	r6,r22
   126c0:	880f883a 	mov	r7,r17
   126c4:	ddc00817 	ldw	r23,32(sp)
   126c8:	dcc00d17 	ldw	r19,52(sp)
   126cc:	9009883a 	mov	r4,r18
   126d0:	0012e880 	call	12e88 <__muldi3>
   126d4:	001b883a 	mov	r13,zero
   126d8:	680f883a 	mov	r7,r13
   126dc:	b009883a 	mov	r4,r22
   126e0:	000b883a 	mov	r5,zero
   126e4:	980d883a 	mov	r6,r19
   126e8:	b82d883a 	mov	r22,r23
   126ec:	002f883a 	mov	r23,zero
   126f0:	db401615 	stw	r13,88(sp)
   126f4:	d8801315 	stw	r2,76(sp)
   126f8:	d8c01415 	stw	r3,80(sp)
   126fc:	dcc01515 	stw	r19,84(sp)
   12700:	0012e880 	call	12e88 <__muldi3>
   12704:	b00d883a 	mov	r6,r22
   12708:	000b883a 	mov	r5,zero
   1270c:	9009883a 	mov	r4,r18
   12710:	b80f883a 	mov	r7,r23
   12714:	1021883a 	mov	r16,r2
   12718:	1823883a 	mov	r17,r3
   1271c:	0012e880 	call	12e88 <__muldi3>
   12720:	8085883a 	add	r2,r16,r2
   12724:	140d803a 	cmpltu	r6,r2,r16
   12728:	88c7883a 	add	r3,r17,r3
   1272c:	30cd883a 	add	r6,r6,r3
   12730:	1029883a 	mov	r20,r2
   12734:	302b883a 	mov	r21,r6
   12738:	da801317 	ldw	r10,76(sp)
   1273c:	dac01417 	ldw	r11,80(sp)
   12740:	db001517 	ldw	r12,84(sp)
   12744:	db401617 	ldw	r13,88(sp)
   12748:	3440612e 	bgeu	r6,r17,128d0 <__muldf3+0x318>
   1274c:	0009883a 	mov	r4,zero
   12750:	5105883a 	add	r2,r10,r4
   12754:	128d803a 	cmpltu	r6,r2,r10
   12758:	5d07883a 	add	r3,r11,r20
   1275c:	30cd883a 	add	r6,r6,r3
   12760:	0021883a 	mov	r16,zero
   12764:	04400044 	movi	r17,1
   12768:	1025883a 	mov	r18,r2
   1276c:	3027883a 	mov	r19,r6
   12770:	32c06236 	bltu	r6,r11,128fc <__muldf3+0x344>
   12774:	59807a26 	beq	r11,r6,12960 <__muldf3+0x3a8>
   12778:	680b883a 	mov	r5,r13
   1277c:	b80f883a 	mov	r7,r23
   12780:	6009883a 	mov	r4,r12
   12784:	b00d883a 	mov	r6,r22
   12788:	0012e880 	call	12e88 <__muldi3>
   1278c:	1009883a 	mov	r4,r2
   12790:	000f883a 	mov	r7,zero
   12794:	1545883a 	add	r2,r2,r21
   12798:	1111803a 	cmpltu	r8,r2,r4
   1279c:	19c7883a 	add	r3,r3,r7
   127a0:	40c7883a 	add	r3,r8,r3
   127a4:	88cb883a 	add	r5,r17,r3
   127a8:	d8c00617 	ldw	r3,24(sp)
   127ac:	8089883a 	add	r4,r16,r2
   127b0:	d8800b17 	ldw	r2,44(sp)
   127b4:	18c00104 	addi	r3,r3,4
   127b8:	240d803a 	cmpltu	r6,r4,r16
   127bc:	10c7883a 	add	r3,r2,r3
   127c0:	2013883a 	mov	r9,r4
   127c4:	d8800a17 	ldw	r2,40(sp)
   127c8:	d9000517 	ldw	r4,20(sp)
   127cc:	314d883a 	add	r6,r6,r5
   127d0:	3015883a 	mov	r10,r6
   127d4:	2088c03a 	cmpne	r4,r4,r2
   127d8:	00880034 	movhi	r2,8192
   127dc:	10bfffc4 	addi	r2,r2,-1
   127e0:	d9000f15 	stw	r4,60(sp)
   127e4:	d8c01015 	stw	r3,64(sp)
   127e8:	1180162e 	bgeu	r2,r6,12844 <__muldf3+0x28c>
   127ec:	1811883a 	mov	r8,r3
   127f0:	101f883a 	mov	r15,r2
   127f4:	980497fa 	slli	r2,r19,31
   127f8:	9016d07a 	srli	r11,r18,1
   127fc:	500697fa 	slli	r3,r10,31
   12800:	480cd07a 	srli	r6,r9,1
   12804:	500ed07a 	srli	r7,r10,1
   12808:	12d6b03a 	or	r11,r2,r11
   1280c:	00800044 	movi	r2,1
   12810:	198cb03a 	or	r6,r3,r6
   12814:	4888703a 	and	r4,r9,r2
   12818:	9818d07a 	srli	r12,r19,1
   1281c:	001b883a 	mov	r13,zero
   12820:	03a00034 	movhi	r14,32768
   12824:	3013883a 	mov	r9,r6
   12828:	3815883a 	mov	r10,r7
   1282c:	4091883a 	add	r8,r8,r2
   12830:	20000226 	beq	r4,zero,1283c <__muldf3+0x284>
   12834:	5b64b03a 	or	r18,r11,r13
   12838:	63a6b03a 	or	r19,r12,r14
   1283c:	7abfed36 	bltu	r15,r10,127f4 <__muldf3+0x23c>
   12840:	da001015 	stw	r8,64(sp)
   12844:	00840034 	movhi	r2,4096
   12848:	10bfffc4 	addi	r2,r2,-1
   1284c:	12801436 	bltu	r2,r10,128a0 <__muldf3+0x2e8>
   12850:	da001017 	ldw	r8,64(sp)
   12854:	101f883a 	mov	r15,r2
   12858:	4a45883a 	add	r2,r9,r9
   1285c:	124d803a 	cmpltu	r6,r2,r9
   12860:	5287883a 	add	r3,r10,r10
   12864:	9497883a 	add	r11,r18,r18
   12868:	5c8f803a 	cmpltu	r7,r11,r18
   1286c:	9cd9883a 	add	r12,r19,r19
   12870:	01000044 	movi	r4,1
   12874:	30cd883a 	add	r6,r6,r3
   12878:	3b0f883a 	add	r7,r7,r12
   1287c:	423fffc4 	addi	r8,r8,-1
   12880:	1013883a 	mov	r9,r2
   12884:	3015883a 	mov	r10,r6
   12888:	111ab03a 	or	r13,r2,r4
   1288c:	98003016 	blt	r19,zero,12950 <__muldf3+0x398>
   12890:	5825883a 	mov	r18,r11
   12894:	3827883a 	mov	r19,r7
   12898:	7abfef2e 	bgeu	r15,r10,12858 <__muldf3+0x2a0>
   1289c:	da001015 	stw	r8,64(sp)
   128a0:	00803fc4 	movi	r2,255
   128a4:	488e703a 	and	r7,r9,r2
   128a8:	00802004 	movi	r2,128
   128ac:	0007883a 	mov	r3,zero
   128b0:	0011883a 	mov	r8,zero
   128b4:	38801826 	beq	r7,r2,12918 <__muldf3+0x360>
   128b8:	008000c4 	movi	r2,3
   128bc:	d9000e04 	addi	r4,sp,56
   128c0:	da801215 	stw	r10,72(sp)
   128c4:	d8800e15 	stw	r2,56(sp)
   128c8:	da401115 	stw	r9,68(sp)
   128cc:	003f6a06 	br	12678 <__muldf3+0xc0>
   128d0:	89802126 	beq	r17,r6,12958 <__muldf3+0x3a0>
   128d4:	0009883a 	mov	r4,zero
   128d8:	5105883a 	add	r2,r10,r4
   128dc:	128d803a 	cmpltu	r6,r2,r10
   128e0:	5d07883a 	add	r3,r11,r20
   128e4:	30cd883a 	add	r6,r6,r3
   128e8:	0021883a 	mov	r16,zero
   128ec:	0023883a 	mov	r17,zero
   128f0:	1025883a 	mov	r18,r2
   128f4:	3027883a 	mov	r19,r6
   128f8:	32ff9e2e 	bgeu	r6,r11,12774 <__muldf3+0x1bc>
   128fc:	00800044 	movi	r2,1
   12900:	8089883a 	add	r4,r16,r2
   12904:	240d803a 	cmpltu	r6,r4,r16
   12908:	344d883a 	add	r6,r6,r17
   1290c:	2021883a 	mov	r16,r4
   12910:	3023883a 	mov	r17,r6
   12914:	003f9806 	br	12778 <__muldf3+0x1c0>
   12918:	403fe71e 	bne	r8,zero,128b8 <__muldf3+0x300>
   1291c:	01004004 	movi	r4,256
   12920:	4904703a 	and	r2,r9,r4
   12924:	10c4b03a 	or	r2,r2,r3
   12928:	103fe31e 	bne	r2,zero,128b8 <__muldf3+0x300>
   1292c:	94c4b03a 	or	r2,r18,r19
   12930:	103fe126 	beq	r2,zero,128b8 <__muldf3+0x300>
   12934:	49c5883a 	add	r2,r9,r7
   12938:	1251803a 	cmpltu	r8,r2,r9
   1293c:	4291883a 	add	r8,r8,r10
   12940:	013fc004 	movi	r4,-256
   12944:	1112703a 	and	r9,r2,r4
   12948:	4015883a 	mov	r10,r8
   1294c:	003fda06 	br	128b8 <__muldf3+0x300>
   12950:	6813883a 	mov	r9,r13
   12954:	003fce06 	br	12890 <__muldf3+0x2d8>
   12958:	143f7c36 	bltu	r2,r16,1274c <__muldf3+0x194>
   1295c:	003fdd06 	br	128d4 <__muldf3+0x31c>
   12960:	12bf852e 	bgeu	r2,r10,12778 <__muldf3+0x1c0>
   12964:	003fe506 	br	128fc <__muldf3+0x344>
   12968:	00800084 	movi	r2,2
   1296c:	20bf351e 	bne	r4,r2,12644 <__muldf3+0x8c>
   12970:	01000074 	movhi	r4,1
   12974:	21164304 	addi	r4,r4,22796
   12978:	003f3f06 	br	12678 <__muldf3+0xc0>

0001297c <__divdf3>:
   1297c:	deffed04 	addi	sp,sp,-76
   12980:	dcc01115 	stw	r19,68(sp)
   12984:	dcc00404 	addi	r19,sp,16
   12988:	2011883a 	mov	r8,r4
   1298c:	2813883a 	mov	r9,r5
   12990:	dc000e15 	stw	r16,56(sp)
   12994:	d809883a 	mov	r4,sp
   12998:	980b883a 	mov	r5,r19
   1299c:	dc000904 	addi	r16,sp,36
   129a0:	dfc01215 	stw	ra,72(sp)
   129a4:	da400115 	stw	r9,4(sp)
   129a8:	d9c00315 	stw	r7,12(sp)
   129ac:	da000015 	stw	r8,0(sp)
   129b0:	d9800215 	stw	r6,8(sp)
   129b4:	dc801015 	stw	r18,64(sp)
   129b8:	dc400f15 	stw	r17,60(sp)
   129bc:	00135b00 	call	135b0 <__unpack_d>
   129c0:	d9000204 	addi	r4,sp,8
   129c4:	800b883a 	mov	r5,r16
   129c8:	00135b00 	call	135b0 <__unpack_d>
   129cc:	d9000417 	ldw	r4,16(sp)
   129d0:	00800044 	movi	r2,1
   129d4:	11000b2e 	bgeu	r2,r4,12a04 <__divdf3+0x88>
   129d8:	d9400917 	ldw	r5,36(sp)
   129dc:	1140762e 	bgeu	r2,r5,12bb8 <__divdf3+0x23c>
   129e0:	d8800517 	ldw	r2,20(sp)
   129e4:	d8c00a17 	ldw	r3,40(sp)
   129e8:	01800104 	movi	r6,4
   129ec:	10c4f03a 	xor	r2,r2,r3
   129f0:	d8800515 	stw	r2,20(sp)
   129f4:	21800226 	beq	r4,r6,12a00 <__divdf3+0x84>
   129f8:	00800084 	movi	r2,2
   129fc:	2080141e 	bne	r4,r2,12a50 <__divdf3+0xd4>
   12a00:	29000926 	beq	r5,r4,12a28 <__divdf3+0xac>
   12a04:	9809883a 	mov	r4,r19
   12a08:	001329c0 	call	1329c <__pack_d>
   12a0c:	dfc01217 	ldw	ra,72(sp)
   12a10:	dcc01117 	ldw	r19,68(sp)
   12a14:	dc801017 	ldw	r18,64(sp)
   12a18:	dc400f17 	ldw	r17,60(sp)
   12a1c:	dc000e17 	ldw	r16,56(sp)
   12a20:	dec01304 	addi	sp,sp,76
   12a24:	f800283a 	ret
   12a28:	01000074 	movhi	r4,1
   12a2c:	21164304 	addi	r4,r4,22796
   12a30:	001329c0 	call	1329c <__pack_d>
   12a34:	dfc01217 	ldw	ra,72(sp)
   12a38:	dcc01117 	ldw	r19,68(sp)
   12a3c:	dc801017 	ldw	r18,64(sp)
   12a40:	dc400f17 	ldw	r17,60(sp)
   12a44:	dc000e17 	ldw	r16,56(sp)
   12a48:	dec01304 	addi	sp,sp,76
   12a4c:	f800283a 	ret
   12a50:	29805b26 	beq	r5,r6,12bc0 <__divdf3+0x244>
   12a54:	28802d26 	beq	r5,r2,12b0c <__divdf3+0x190>
   12a58:	d8c00617 	ldw	r3,24(sp)
   12a5c:	d8800b17 	ldw	r2,44(sp)
   12a60:	d9c00817 	ldw	r7,32(sp)
   12a64:	dc400d17 	ldw	r17,52(sp)
   12a68:	188bc83a 	sub	r5,r3,r2
   12a6c:	d9800717 	ldw	r6,28(sp)
   12a70:	dc000c17 	ldw	r16,48(sp)
   12a74:	d9400615 	stw	r5,24(sp)
   12a78:	3c403836 	bltu	r7,r17,12b5c <__divdf3+0x1e0>
   12a7c:	89c03626 	beq	r17,r7,12b58 <__divdf3+0x1dc>
   12a80:	0015883a 	mov	r10,zero
   12a84:	001d883a 	mov	r14,zero
   12a88:	02c40034 	movhi	r11,4096
   12a8c:	001f883a 	mov	r15,zero
   12a90:	003f883a 	mov	ra,zero
   12a94:	04800f44 	movi	r18,61
   12a98:	00000f06 	br	12ad8 <__divdf3+0x15c>
   12a9c:	601d883a 	mov	r14,r12
   12aa0:	681f883a 	mov	r15,r13
   12aa4:	400d883a 	mov	r6,r8
   12aa8:	100f883a 	mov	r7,r2
   12aac:	3191883a 	add	r8,r6,r6
   12ab0:	5808d07a 	srli	r4,r11,1
   12ab4:	4185803a 	cmpltu	r2,r8,r6
   12ab8:	39d3883a 	add	r9,r7,r7
   12abc:	28c6b03a 	or	r3,r5,r3
   12ac0:	1245883a 	add	r2,r2,r9
   12ac4:	1815883a 	mov	r10,r3
   12ac8:	2017883a 	mov	r11,r4
   12acc:	400d883a 	mov	r6,r8
   12ad0:	100f883a 	mov	r7,r2
   12ad4:	fc801726 	beq	ra,r18,12b34 <__divdf3+0x1b8>
   12ad8:	580a97fa 	slli	r5,r11,31
   12adc:	5006d07a 	srli	r3,r10,1
   12ae0:	ffc00044 	addi	ra,ra,1
   12ae4:	3c7ff136 	bltu	r7,r17,12aac <__divdf3+0x130>
   12ae8:	3411c83a 	sub	r8,r6,r16
   12aec:	3205803a 	cmpltu	r2,r6,r8
   12af0:	3c53c83a 	sub	r9,r7,r17
   12af4:	7298b03a 	or	r12,r14,r10
   12af8:	7adab03a 	or	r13,r15,r11
   12afc:	4885c83a 	sub	r2,r9,r2
   12b00:	89ffe61e 	bne	r17,r7,12a9c <__divdf3+0x120>
   12b04:	343fe936 	bltu	r6,r16,12aac <__divdf3+0x130>
   12b08:	003fe406 	br	12a9c <__divdf3+0x120>
   12b0c:	9809883a 	mov	r4,r19
   12b10:	d9800415 	stw	r6,16(sp)
   12b14:	001329c0 	call	1329c <__pack_d>
   12b18:	dfc01217 	ldw	ra,72(sp)
   12b1c:	dcc01117 	ldw	r19,68(sp)
   12b20:	dc801017 	ldw	r18,64(sp)
   12b24:	dc400f17 	ldw	r17,60(sp)
   12b28:	dc000e17 	ldw	r16,56(sp)
   12b2c:	dec01304 	addi	sp,sp,76
   12b30:	f800283a 	ret
   12b34:	00803fc4 	movi	r2,255
   12b38:	7090703a 	and	r8,r14,r2
   12b3c:	00802004 	movi	r2,128
   12b40:	0007883a 	mov	r3,zero
   12b44:	0013883a 	mov	r9,zero
   12b48:	40800d26 	beq	r8,r2,12b80 <__divdf3+0x204>
   12b4c:	dbc00815 	stw	r15,32(sp)
   12b50:	db800715 	stw	r14,28(sp)
   12b54:	003fab06 	br	12a04 <__divdf3+0x88>
   12b58:	343fc92e 	bgeu	r6,r16,12a80 <__divdf3+0x104>
   12b5c:	3185883a 	add	r2,r6,r6
   12b60:	1189803a 	cmpltu	r4,r2,r6
   12b64:	39c7883a 	add	r3,r7,r7
   12b68:	20c9883a 	add	r4,r4,r3
   12b6c:	297fffc4 	addi	r5,r5,-1
   12b70:	100d883a 	mov	r6,r2
   12b74:	200f883a 	mov	r7,r4
   12b78:	d9400615 	stw	r5,24(sp)
   12b7c:	003fc006 	br	12a80 <__divdf3+0x104>
   12b80:	483ff21e 	bne	r9,zero,12b4c <__divdf3+0x1d0>
   12b84:	01004004 	movi	r4,256
   12b88:	7104703a 	and	r2,r14,r4
   12b8c:	10c4b03a 	or	r2,r2,r3
   12b90:	103fee1e 	bne	r2,zero,12b4c <__divdf3+0x1d0>
   12b94:	31c4b03a 	or	r2,r6,r7
   12b98:	103fec26 	beq	r2,zero,12b4c <__divdf3+0x1d0>
   12b9c:	7205883a 	add	r2,r14,r8
   12ba0:	1391803a 	cmpltu	r8,r2,r14
   12ba4:	43d1883a 	add	r8,r8,r15
   12ba8:	013fc004 	movi	r4,-256
   12bac:	111c703a 	and	r14,r2,r4
   12bb0:	401f883a 	mov	r15,r8
   12bb4:	003fe506 	br	12b4c <__divdf3+0x1d0>
   12bb8:	8009883a 	mov	r4,r16
   12bbc:	003f9206 	br	12a08 <__divdf3+0x8c>
   12bc0:	9809883a 	mov	r4,r19
   12bc4:	d8000715 	stw	zero,28(sp)
   12bc8:	d8000815 	stw	zero,32(sp)
   12bcc:	d8000615 	stw	zero,24(sp)
   12bd0:	003f8d06 	br	12a08 <__divdf3+0x8c>

00012bd4 <__eqdf2>:
   12bd4:	deffef04 	addi	sp,sp,-68
   12bd8:	dc400f15 	stw	r17,60(sp)
   12bdc:	dc400404 	addi	r17,sp,16
   12be0:	2005883a 	mov	r2,r4
   12be4:	2807883a 	mov	r3,r5
   12be8:	dc000e15 	stw	r16,56(sp)
   12bec:	d809883a 	mov	r4,sp
   12bf0:	880b883a 	mov	r5,r17
   12bf4:	dc000904 	addi	r16,sp,36
   12bf8:	d8c00115 	stw	r3,4(sp)
   12bfc:	d8800015 	stw	r2,0(sp)
   12c00:	d9800215 	stw	r6,8(sp)
   12c04:	dfc01015 	stw	ra,64(sp)
   12c08:	d9c00315 	stw	r7,12(sp)
   12c0c:	00135b00 	call	135b0 <__unpack_d>
   12c10:	d9000204 	addi	r4,sp,8
   12c14:	800b883a 	mov	r5,r16
   12c18:	00135b00 	call	135b0 <__unpack_d>
   12c1c:	d8800417 	ldw	r2,16(sp)
   12c20:	00c00044 	movi	r3,1
   12c24:	180d883a 	mov	r6,r3
   12c28:	1880062e 	bgeu	r3,r2,12c44 <__eqdf2+0x70>
   12c2c:	d8800917 	ldw	r2,36(sp)
   12c30:	8809883a 	mov	r4,r17
   12c34:	800b883a 	mov	r5,r16
   12c38:	1880022e 	bgeu	r3,r2,12c44 <__eqdf2+0x70>
   12c3c:	00136e80 	call	136e8 <__fpcmp_parts_d>
   12c40:	100d883a 	mov	r6,r2
   12c44:	3005883a 	mov	r2,r6
   12c48:	dfc01017 	ldw	ra,64(sp)
   12c4c:	dc400f17 	ldw	r17,60(sp)
   12c50:	dc000e17 	ldw	r16,56(sp)
   12c54:	dec01104 	addi	sp,sp,68
   12c58:	f800283a 	ret

00012c5c <__gtdf2>:
   12c5c:	deffef04 	addi	sp,sp,-68
   12c60:	dc400f15 	stw	r17,60(sp)
   12c64:	dc400404 	addi	r17,sp,16
   12c68:	2005883a 	mov	r2,r4
   12c6c:	2807883a 	mov	r3,r5
   12c70:	dc000e15 	stw	r16,56(sp)
   12c74:	d809883a 	mov	r4,sp
   12c78:	880b883a 	mov	r5,r17
   12c7c:	dc000904 	addi	r16,sp,36
   12c80:	d8c00115 	stw	r3,4(sp)
   12c84:	d8800015 	stw	r2,0(sp)
   12c88:	d9800215 	stw	r6,8(sp)
   12c8c:	dfc01015 	stw	ra,64(sp)
   12c90:	d9c00315 	stw	r7,12(sp)
   12c94:	00135b00 	call	135b0 <__unpack_d>
   12c98:	d9000204 	addi	r4,sp,8
   12c9c:	800b883a 	mov	r5,r16
   12ca0:	00135b00 	call	135b0 <__unpack_d>
   12ca4:	d8800417 	ldw	r2,16(sp)
   12ca8:	00c00044 	movi	r3,1
   12cac:	01bfffc4 	movi	r6,-1
   12cb0:	1880062e 	bgeu	r3,r2,12ccc <__gtdf2+0x70>
   12cb4:	d8800917 	ldw	r2,36(sp)
   12cb8:	8809883a 	mov	r4,r17
   12cbc:	800b883a 	mov	r5,r16
   12cc0:	1880022e 	bgeu	r3,r2,12ccc <__gtdf2+0x70>
   12cc4:	00136e80 	call	136e8 <__fpcmp_parts_d>
   12cc8:	100d883a 	mov	r6,r2
   12ccc:	3005883a 	mov	r2,r6
   12cd0:	dfc01017 	ldw	ra,64(sp)
   12cd4:	dc400f17 	ldw	r17,60(sp)
   12cd8:	dc000e17 	ldw	r16,56(sp)
   12cdc:	dec01104 	addi	sp,sp,68
   12ce0:	f800283a 	ret

00012ce4 <__floatsidf>:
   12ce4:	2006d7fa 	srli	r3,r4,31
   12ce8:	defff604 	addi	sp,sp,-40
   12cec:	008000c4 	movi	r2,3
   12cf0:	dfc00915 	stw	ra,36(sp)
   12cf4:	dcc00815 	stw	r19,32(sp)
   12cf8:	dc800715 	stw	r18,28(sp)
   12cfc:	dc400615 	stw	r17,24(sp)
   12d00:	dc000515 	stw	r16,20(sp)
   12d04:	d8800015 	stw	r2,0(sp)
   12d08:	d8c00115 	stw	r3,4(sp)
   12d0c:	20000f1e 	bne	r4,zero,12d4c <__floatsidf+0x68>
   12d10:	00800084 	movi	r2,2
   12d14:	d8800015 	stw	r2,0(sp)
   12d18:	d809883a 	mov	r4,sp
   12d1c:	001329c0 	call	1329c <__pack_d>
   12d20:	1009883a 	mov	r4,r2
   12d24:	180b883a 	mov	r5,r3
   12d28:	2005883a 	mov	r2,r4
   12d2c:	2807883a 	mov	r3,r5
   12d30:	dfc00917 	ldw	ra,36(sp)
   12d34:	dcc00817 	ldw	r19,32(sp)
   12d38:	dc800717 	ldw	r18,28(sp)
   12d3c:	dc400617 	ldw	r17,24(sp)
   12d40:	dc000517 	ldw	r16,20(sp)
   12d44:	dec00a04 	addi	sp,sp,40
   12d48:	f800283a 	ret
   12d4c:	00800f04 	movi	r2,60
   12d50:	1807003a 	cmpeq	r3,r3,zero
   12d54:	d8800215 	stw	r2,8(sp)
   12d58:	18001126 	beq	r3,zero,12da0 <__floatsidf+0xbc>
   12d5c:	0027883a 	mov	r19,zero
   12d60:	2025883a 	mov	r18,r4
   12d64:	d9000315 	stw	r4,12(sp)
   12d68:	dcc00415 	stw	r19,16(sp)
   12d6c:	0012f200 	call	12f20 <__clzsi2>
   12d70:	11000744 	addi	r4,r2,29
   12d74:	013fe80e 	bge	zero,r4,12d18 <__floatsidf+0x34>
   12d78:	10bfff44 	addi	r2,r2,-3
   12d7c:	10000c16 	blt	r2,zero,12db0 <__floatsidf+0xcc>
   12d80:	90a2983a 	sll	r17,r18,r2
   12d84:	0021883a 	mov	r16,zero
   12d88:	d8800217 	ldw	r2,8(sp)
   12d8c:	dc400415 	stw	r17,16(sp)
   12d90:	dc000315 	stw	r16,12(sp)
   12d94:	1105c83a 	sub	r2,r2,r4
   12d98:	d8800215 	stw	r2,8(sp)
   12d9c:	003fde06 	br	12d18 <__floatsidf+0x34>
   12da0:	00a00034 	movhi	r2,32768
   12da4:	20800a26 	beq	r4,r2,12dd0 <__floatsidf+0xec>
   12da8:	0109c83a 	sub	r4,zero,r4
   12dac:	003feb06 	br	12d5c <__floatsidf+0x78>
   12db0:	9006d07a 	srli	r3,r18,1
   12db4:	008007c4 	movi	r2,31
   12db8:	1105c83a 	sub	r2,r2,r4
   12dbc:	1886d83a 	srl	r3,r3,r2
   12dc0:	9922983a 	sll	r17,r19,r4
   12dc4:	9120983a 	sll	r16,r18,r4
   12dc8:	1c62b03a 	or	r17,r3,r17
   12dcc:	003fee06 	br	12d88 <__floatsidf+0xa4>
   12dd0:	0009883a 	mov	r4,zero
   12dd4:	01707834 	movhi	r5,49632
   12dd8:	003fd306 	br	12d28 <__floatsidf+0x44>

00012ddc <__make_dp>:
   12ddc:	defff904 	addi	sp,sp,-28
   12de0:	d8c00717 	ldw	r3,28(sp)
   12de4:	d9000015 	stw	r4,0(sp)
   12de8:	d809883a 	mov	r4,sp
   12dec:	dfc00515 	stw	ra,20(sp)
   12df0:	d9c00615 	stw	r7,24(sp)
   12df4:	d9400115 	stw	r5,4(sp)
   12df8:	d9800215 	stw	r6,8(sp)
   12dfc:	d8c00415 	stw	r3,16(sp)
   12e00:	d9c00315 	stw	r7,12(sp)
   12e04:	001329c0 	call	1329c <__pack_d>
   12e08:	dfc00517 	ldw	ra,20(sp)
   12e0c:	dec00704 	addi	sp,sp,28
   12e10:	f800283a 	ret

00012e14 <__truncdfsf2>:
   12e14:	defff804 	addi	sp,sp,-32
   12e18:	2005883a 	mov	r2,r4
   12e1c:	2807883a 	mov	r3,r5
   12e20:	d809883a 	mov	r4,sp
   12e24:	d9400204 	addi	r5,sp,8
   12e28:	d8c00115 	stw	r3,4(sp)
   12e2c:	d8800015 	stw	r2,0(sp)
   12e30:	dfc00715 	stw	ra,28(sp)
   12e34:	00135b00 	call	135b0 <__unpack_d>
   12e38:	d9c00517 	ldw	r7,20(sp)
   12e3c:	da000617 	ldw	r8,24(sp)
   12e40:	02d00034 	movhi	r11,16384
   12e44:	5affffc4 	addi	r11,r11,-1
   12e48:	3812d7ba 	srli	r9,r7,30
   12e4c:	401a90ba 	slli	r13,r8,2
   12e50:	3ac4703a 	and	r2,r7,r11
   12e54:	0007883a 	mov	r3,zero
   12e58:	6a52b03a 	or	r9,r13,r9
   12e5c:	10c4b03a 	or	r2,r2,r3
   12e60:	d9000217 	ldw	r4,8(sp)
   12e64:	d9400317 	ldw	r5,12(sp)
   12e68:	d9800417 	ldw	r6,16(sp)
   12e6c:	480f883a 	mov	r7,r9
   12e70:	10000126 	beq	r2,zero,12e78 <__truncdfsf2+0x64>
   12e74:	49c00054 	ori	r7,r9,1
   12e78:	00132700 	call	13270 <__make_fp>
   12e7c:	dfc00717 	ldw	ra,28(sp)
   12e80:	dec00804 	addi	sp,sp,32
   12e84:	f800283a 	ret

00012e88 <__muldi3>:
   12e88:	2011883a 	mov	r8,r4
   12e8c:	427fffcc 	andi	r9,r8,65535
   12e90:	4018d43a 	srli	r12,r8,16
   12e94:	32bfffcc 	andi	r10,r6,65535
   12e98:	3016d43a 	srli	r11,r6,16
   12e9c:	4a85383a 	mul	r2,r9,r10
   12ea0:	6295383a 	mul	r10,r12,r10
   12ea4:	4ad3383a 	mul	r9,r9,r11
   12ea8:	113fffcc 	andi	r4,r2,65535
   12eac:	1004d43a 	srli	r2,r2,16
   12eb0:	4a93883a 	add	r9,r9,r10
   12eb4:	3807883a 	mov	r3,r7
   12eb8:	1245883a 	add	r2,r2,r9
   12ebc:	280f883a 	mov	r7,r5
   12ec0:	180b883a 	mov	r5,r3
   12ec4:	1006943a 	slli	r3,r2,16
   12ec8:	defffd04 	addi	sp,sp,-12
   12ecc:	dc800215 	stw	r18,8(sp)
   12ed0:	1907883a 	add	r3,r3,r4
   12ed4:	dc400115 	stw	r17,4(sp)
   12ed8:	dc000015 	stw	r16,0(sp)
   12edc:	4165383a 	mul	r18,r8,r5
   12ee0:	31e3383a 	mul	r17,r6,r7
   12ee4:	1012d43a 	srli	r9,r2,16
   12ee8:	62d9383a 	mul	r12,r12,r11
   12eec:	181f883a 	mov	r15,r3
   12ef0:	1280022e 	bgeu	r2,r10,12efc <__muldi3+0x74>
   12ef4:	00800074 	movhi	r2,1
   12ef8:	6099883a 	add	r12,r12,r2
   12efc:	624d883a 	add	r6,r12,r9
   12f00:	9187883a 	add	r3,r18,r6
   12f04:	88c7883a 	add	r3,r17,r3
   12f08:	7805883a 	mov	r2,r15
   12f0c:	dc800217 	ldw	r18,8(sp)
   12f10:	dc400117 	ldw	r17,4(sp)
   12f14:	dc000017 	ldw	r16,0(sp)
   12f18:	dec00304 	addi	sp,sp,12
   12f1c:	f800283a 	ret

00012f20 <__clzsi2>:
   12f20:	00bfffd4 	movui	r2,65535
   12f24:	11000e36 	bltu	r2,r4,12f60 <__clzsi2+0x40>
   12f28:	00803fc4 	movi	r2,255
   12f2c:	01400204 	movi	r5,8
   12f30:	0007883a 	mov	r3,zero
   12f34:	11001036 	bltu	r2,r4,12f78 <__clzsi2+0x58>
   12f38:	000b883a 	mov	r5,zero
   12f3c:	20c6d83a 	srl	r3,r4,r3
   12f40:	00800074 	movhi	r2,1
   12f44:	10964804 	addi	r2,r2,22816
   12f48:	1887883a 	add	r3,r3,r2
   12f4c:	18800003 	ldbu	r2,0(r3)
   12f50:	00c00804 	movi	r3,32
   12f54:	2885883a 	add	r2,r5,r2
   12f58:	1885c83a 	sub	r2,r3,r2
   12f5c:	f800283a 	ret
   12f60:	01400404 	movi	r5,16
   12f64:	00804034 	movhi	r2,256
   12f68:	10bfffc4 	addi	r2,r2,-1
   12f6c:	2807883a 	mov	r3,r5
   12f70:	113ff22e 	bgeu	r2,r4,12f3c <__clzsi2+0x1c>
   12f74:	01400604 	movi	r5,24
   12f78:	2807883a 	mov	r3,r5
   12f7c:	20c6d83a 	srl	r3,r4,r3
   12f80:	00800074 	movhi	r2,1
   12f84:	10964804 	addi	r2,r2,22816
   12f88:	1887883a 	add	r3,r3,r2
   12f8c:	18800003 	ldbu	r2,0(r3)
   12f90:	00c00804 	movi	r3,32
   12f94:	2885883a 	add	r2,r5,r2
   12f98:	1885c83a 	sub	r2,r3,r2
   12f9c:	f800283a 	ret

00012fa0 <__pack_f>:
   12fa0:	20c00017 	ldw	r3,0(r4)
   12fa4:	01c00044 	movi	r7,1
   12fa8:	21800317 	ldw	r6,12(r4)
   12fac:	21400117 	ldw	r5,4(r4)
   12fb0:	38c02d2e 	bgeu	r7,r3,13068 <__pack_f+0xc8>
   12fb4:	00800104 	movi	r2,4
   12fb8:	18802826 	beq	r3,r2,1305c <__pack_f+0xbc>
   12fbc:	00800084 	movi	r2,2
   12fc0:	18800126 	beq	r3,r2,12fc8 <__pack_f+0x28>
   12fc4:	3000101e 	bne	r6,zero,13008 <__pack_f+0x68>
   12fc8:	000d883a 	mov	r6,zero
   12fcc:	0007883a 	mov	r3,zero
   12fd0:	19003fcc 	andi	r4,r3,255
   12fd4:	200895fa 	slli	r4,r4,23
   12fd8:	00c02034 	movhi	r3,128
   12fdc:	18ffffc4 	addi	r3,r3,-1
   12fe0:	30c6703a 	and	r3,r6,r3
   12fe4:	10a0002c 	andhi	r2,r2,32768
   12fe8:	10c4b03a 	or	r2,r2,r3
   12fec:	280a97fa 	slli	r5,r5,31
   12ff0:	1104b03a 	or	r2,r2,r4
   12ff4:	00e00034 	movhi	r3,32768
   12ff8:	18ffffc4 	addi	r3,r3,-1
   12ffc:	10c4703a 	and	r2,r2,r3
   13000:	1144b03a 	or	r2,r2,r5
   13004:	f800283a 	ret
   13008:	21000217 	ldw	r4,8(r4)
   1300c:	00bfe084 	movi	r2,-126
   13010:	20801b16 	blt	r4,r2,13080 <__pack_f+0xe0>
   13014:	00801fc4 	movi	r2,127
   13018:	11001016 	blt	r2,r4,1305c <__pack_f+0xbc>
   1301c:	308e703a 	and	r7,r6,r2
   13020:	2087883a 	add	r3,r4,r2
   13024:	00801004 	movi	r2,64
   13028:	38800526 	beq	r7,r2,13040 <__pack_f+0xa0>
   1302c:	31800fc4 	addi	r6,r6,63
   13030:	30000716 	blt	r6,zero,13050 <__pack_f+0xb0>
   13034:	300490ba 	slli	r2,r6,2
   13038:	100cd27a 	srli	r6,r2,9
   1303c:	003fe406 	br	12fd0 <__pack_f+0x30>
   13040:	3080200c 	andi	r2,r6,128
   13044:	103ffa26 	beq	r2,zero,13030 <__pack_f+0x90>
   13048:	31cd883a 	add	r6,r6,r7
   1304c:	003ff806 	br	13030 <__pack_f+0x90>
   13050:	300cd07a 	srli	r6,r6,1
   13054:	18c00044 	addi	r3,r3,1
   13058:	003ff606 	br	13034 <__pack_f+0x94>
   1305c:	000d883a 	mov	r6,zero
   13060:	00ffffc4 	movi	r3,-1
   13064:	003fda06 	br	12fd0 <__pack_f+0x30>
   13068:	31800434 	orhi	r6,r6,16
   1306c:	00802034 	movhi	r2,128
   13070:	10bfffc4 	addi	r2,r2,-1
   13074:	308c703a 	and	r6,r6,r2
   13078:	00ffffc4 	movi	r3,-1
   1307c:	003fd406 	br	12fd0 <__pack_f+0x30>
   13080:	1109c83a 	sub	r4,r2,r4
   13084:	00800644 	movi	r2,25
   13088:	11001216 	blt	r2,r4,130d4 <__pack_f+0x134>
   1308c:	3904983a 	sll	r2,r7,r4
   13090:	3106d83a 	srl	r3,r6,r4
   13094:	10bfffc4 	addi	r2,r2,-1
   13098:	3084703a 	and	r2,r6,r2
   1309c:	1004c03a 	cmpne	r2,r2,zero
   130a0:	1886b03a 	or	r3,r3,r2
   130a4:	19001fcc 	andi	r4,r3,127
   130a8:	00801004 	movi	r2,64
   130ac:	20800c26 	beq	r4,r2,130e0 <__pack_f+0x140>
   130b0:	18c00fc4 	addi	r3,r3,63
   130b4:	00900034 	movhi	r2,16384
   130b8:	10bfffc4 	addi	r2,r2,-1
   130bc:	180cd1fa 	srli	r6,r3,7
   130c0:	10c7803a 	cmpltu	r3,r2,r3
   130c4:	00802034 	movhi	r2,128
   130c8:	10bfffc4 	addi	r2,r2,-1
   130cc:	308c703a 	and	r6,r6,r2
   130d0:	003fbf06 	br	12fd0 <__pack_f+0x30>
   130d4:	0007883a 	mov	r3,zero
   130d8:	000d883a 	mov	r6,zero
   130dc:	003ff906 	br	130c4 <__pack_f+0x124>
   130e0:	1880200c 	andi	r2,r3,128
   130e4:	10000126 	beq	r2,zero,130ec <__pack_f+0x14c>
   130e8:	1907883a 	add	r3,r3,r4
   130ec:	180cd1fa 	srli	r6,r3,7
   130f0:	00900034 	movhi	r2,16384
   130f4:	10bfffc4 	addi	r2,r2,-1
   130f8:	10c7803a 	cmpltu	r3,r2,r3
   130fc:	003ff106 	br	130c4 <__pack_f+0x124>

00013100 <__unpack_f>:
   13100:	21800017 	ldw	r6,0(r4)
   13104:	00c02034 	movhi	r3,128
   13108:	18ffffc4 	addi	r3,r3,-1
   1310c:	3004d5fa 	srli	r2,r6,23
   13110:	3008d7fa 	srli	r4,r6,31
   13114:	30ce703a 	and	r7,r6,r3
   13118:	10c03fcc 	andi	r3,r2,255
   1311c:	29000115 	stw	r4,4(r5)
   13120:	1800131e 	bne	r3,zero,13170 <__unpack_f+0x70>
   13124:	38000f26 	beq	r7,zero,13164 <__unpack_f+0x64>
   13128:	380691fa 	slli	r3,r7,7
   1312c:	01bfe084 	movi	r6,-126
   13130:	008000c4 	movi	r2,3
   13134:	01100034 	movhi	r4,16384
   13138:	213fffc4 	addi	r4,r4,-1
   1313c:	28800015 	stw	r2,0(r5)
   13140:	29800215 	stw	r6,8(r5)
   13144:	20c00536 	bltu	r4,r3,1315c <__unpack_f+0x5c>
   13148:	3005883a 	mov	r2,r6
   1314c:	18c7883a 	add	r3,r3,r3
   13150:	10bfffc4 	addi	r2,r2,-1
   13154:	20fffd2e 	bgeu	r4,r3,1314c <__unpack_f+0x4c>
   13158:	28800215 	stw	r2,8(r5)
   1315c:	28c00315 	stw	r3,12(r5)
   13160:	f800283a 	ret
   13164:	00800084 	movi	r2,2
   13168:	28800015 	stw	r2,0(r5)
   1316c:	f800283a 	ret
   13170:	00803fc4 	movi	r2,255
   13174:	18800826 	beq	r3,r2,13198 <__unpack_f+0x98>
   13178:	380491fa 	slli	r2,r7,7
   1317c:	18ffe044 	addi	r3,r3,-127
   13180:	28c00215 	stw	r3,8(r5)
   13184:	10900034 	orhi	r2,r2,16384
   13188:	28800315 	stw	r2,12(r5)
   1318c:	008000c4 	movi	r2,3
   13190:	28800015 	stw	r2,0(r5)
   13194:	f800283a 	ret
   13198:	3800031e 	bne	r7,zero,131a8 <__unpack_f+0xa8>
   1319c:	00800104 	movi	r2,4
   131a0:	28800015 	stw	r2,0(r5)
   131a4:	f800283a 	ret
   131a8:	3080042c 	andhi	r2,r6,16
   131ac:	10000426 	beq	r2,zero,131c0 <__unpack_f+0xc0>
   131b0:	00800044 	movi	r2,1
   131b4:	28800015 	stw	r2,0(r5)
   131b8:	29c00315 	stw	r7,12(r5)
   131bc:	f800283a 	ret
   131c0:	28000015 	stw	zero,0(r5)
   131c4:	003ffc06 	br	131b8 <__unpack_f+0xb8>

000131c8 <__fpcmp_parts_f>:
   131c8:	21800017 	ldw	r6,0(r4)
   131cc:	00c00044 	movi	r3,1
   131d0:	19800a2e 	bgeu	r3,r6,131fc <__fpcmp_parts_f+0x34>
   131d4:	28800017 	ldw	r2,0(r5)
   131d8:	1880082e 	bgeu	r3,r2,131fc <__fpcmp_parts_f+0x34>
   131dc:	00c00104 	movi	r3,4
   131e0:	30c01e26 	beq	r6,r3,1325c <__fpcmp_parts_f+0x94>
   131e4:	10c01a26 	beq	r2,r3,13250 <__fpcmp_parts_f+0x88>
   131e8:	00c00084 	movi	r3,2
   131ec:	30c00526 	beq	r6,r3,13204 <__fpcmp_parts_f+0x3c>
   131f0:	10c0071e 	bne	r2,r3,13210 <__fpcmp_parts_f+0x48>
   131f4:	20800117 	ldw	r2,4(r4)
   131f8:	1000091e 	bne	r2,zero,13220 <__fpcmp_parts_f+0x58>
   131fc:	00800044 	movi	r2,1
   13200:	f800283a 	ret
   13204:	10c0121e 	bne	r2,r3,13250 <__fpcmp_parts_f+0x88>
   13208:	0005883a 	mov	r2,zero
   1320c:	f800283a 	ret
   13210:	20c00117 	ldw	r3,4(r4)
   13214:	28800117 	ldw	r2,4(r5)
   13218:	18800326 	beq	r3,r2,13228 <__fpcmp_parts_f+0x60>
   1321c:	183ff726 	beq	r3,zero,131fc <__fpcmp_parts_f+0x34>
   13220:	00bfffc4 	movi	r2,-1
   13224:	f800283a 	ret
   13228:	21800217 	ldw	r6,8(r4)
   1322c:	28800217 	ldw	r2,8(r5)
   13230:	11bffa16 	blt	r2,r6,1321c <__fpcmp_parts_f+0x54>
   13234:	30800416 	blt	r6,r2,13248 <__fpcmp_parts_f+0x80>
   13238:	21000317 	ldw	r4,12(r4)
   1323c:	29400317 	ldw	r5,12(r5)
   13240:	293ff636 	bltu	r5,r4,1321c <__fpcmp_parts_f+0x54>
   13244:	217ff02e 	bgeu	r4,r5,13208 <__fpcmp_parts_f+0x40>
   13248:	183fec1e 	bne	r3,zero,131fc <__fpcmp_parts_f+0x34>
   1324c:	003ff406 	br	13220 <__fpcmp_parts_f+0x58>
   13250:	28800117 	ldw	r2,4(r5)
   13254:	103fe91e 	bne	r2,zero,131fc <__fpcmp_parts_f+0x34>
   13258:	003ff106 	br	13220 <__fpcmp_parts_f+0x58>
   1325c:	11bfe51e 	bne	r2,r6,131f4 <__fpcmp_parts_f+0x2c>
   13260:	28c00117 	ldw	r3,4(r5)
   13264:	20800117 	ldw	r2,4(r4)
   13268:	1885c83a 	sub	r2,r3,r2
   1326c:	f800283a 	ret

00013270 <__make_fp>:
   13270:	defffb04 	addi	sp,sp,-20
   13274:	d9000015 	stw	r4,0(sp)
   13278:	d809883a 	mov	r4,sp
   1327c:	dfc00415 	stw	ra,16(sp)
   13280:	d9400115 	stw	r5,4(sp)
   13284:	d9800215 	stw	r6,8(sp)
   13288:	d9c00315 	stw	r7,12(sp)
   1328c:	0012fa00 	call	12fa0 <__pack_f>
   13290:	dfc00417 	ldw	ra,16(sp)
   13294:	dec00504 	addi	sp,sp,20
   13298:	f800283a 	ret

0001329c <__pack_d>:
   1329c:	20c00017 	ldw	r3,0(r4)
   132a0:	defffd04 	addi	sp,sp,-12
   132a4:	dc000015 	stw	r16,0(sp)
   132a8:	dc800215 	stw	r18,8(sp)
   132ac:	dc400115 	stw	r17,4(sp)
   132b0:	00800044 	movi	r2,1
   132b4:	22000317 	ldw	r8,12(r4)
   132b8:	001f883a 	mov	r15,zero
   132bc:	22400417 	ldw	r9,16(r4)
   132c0:	24000117 	ldw	r16,4(r4)
   132c4:	10c0552e 	bgeu	r2,r3,1341c <__pack_d+0x180>
   132c8:	00800104 	movi	r2,4
   132cc:	18804f26 	beq	r3,r2,1340c <__pack_d+0x170>
   132d0:	00800084 	movi	r2,2
   132d4:	18800226 	beq	r3,r2,132e0 <__pack_d+0x44>
   132d8:	4244b03a 	or	r2,r8,r9
   132dc:	10001a1e 	bne	r2,zero,13348 <__pack_d+0xac>
   132e0:	000d883a 	mov	r6,zero
   132e4:	000f883a 	mov	r7,zero
   132e8:	0011883a 	mov	r8,zero
   132ec:	00800434 	movhi	r2,16
   132f0:	10bfffc4 	addi	r2,r2,-1
   132f4:	301d883a 	mov	r14,r6
   132f8:	3884703a 	and	r2,r7,r2
   132fc:	400a953a 	slli	r5,r8,20
   13300:	79bffc2c 	andhi	r6,r15,65520
   13304:	308cb03a 	or	r6,r6,r2
   13308:	00e00434 	movhi	r3,32784
   1330c:	18ffffc4 	addi	r3,r3,-1
   13310:	800497fa 	slli	r2,r16,31
   13314:	30c6703a 	and	r3,r6,r3
   13318:	1946b03a 	or	r3,r3,r5
   1331c:	01600034 	movhi	r5,32768
   13320:	297fffc4 	addi	r5,r5,-1
   13324:	194a703a 	and	r5,r3,r5
   13328:	288ab03a 	or	r5,r5,r2
   1332c:	2807883a 	mov	r3,r5
   13330:	7005883a 	mov	r2,r14
   13334:	dc800217 	ldw	r18,8(sp)
   13338:	dc400117 	ldw	r17,4(sp)
   1333c:	dc000017 	ldw	r16,0(sp)
   13340:	dec00304 	addi	sp,sp,12
   13344:	f800283a 	ret
   13348:	21000217 	ldw	r4,8(r4)
   1334c:	00bf0084 	movi	r2,-1022
   13350:	20803f16 	blt	r4,r2,13450 <__pack_d+0x1b4>
   13354:	0080ffc4 	movi	r2,1023
   13358:	11002c16 	blt	r2,r4,1340c <__pack_d+0x170>
   1335c:	00803fc4 	movi	r2,255
   13360:	408c703a 	and	r6,r8,r2
   13364:	00802004 	movi	r2,128
   13368:	0007883a 	mov	r3,zero
   1336c:	000f883a 	mov	r7,zero
   13370:	2280ffc4 	addi	r10,r4,1023
   13374:	30801e26 	beq	r6,r2,133f0 <__pack_d+0x154>
   13378:	00801fc4 	movi	r2,127
   1337c:	4089883a 	add	r4,r8,r2
   13380:	220d803a 	cmpltu	r6,r4,r8
   13384:	324d883a 	add	r6,r6,r9
   13388:	2011883a 	mov	r8,r4
   1338c:	3013883a 	mov	r9,r6
   13390:	00880034 	movhi	r2,8192
   13394:	10bfffc4 	addi	r2,r2,-1
   13398:	12400d36 	bltu	r2,r9,133d0 <__pack_d+0x134>
   1339c:	4804963a 	slli	r2,r9,24
   133a0:	400cd23a 	srli	r6,r8,8
   133a4:	480ed23a 	srli	r7,r9,8
   133a8:	013fffc4 	movi	r4,-1
   133ac:	118cb03a 	or	r6,r2,r6
   133b0:	01400434 	movhi	r5,16
   133b4:	297fffc4 	addi	r5,r5,-1
   133b8:	3104703a 	and	r2,r6,r4
   133bc:	3946703a 	and	r3,r7,r5
   133c0:	5201ffcc 	andi	r8,r10,2047
   133c4:	100d883a 	mov	r6,r2
   133c8:	180f883a 	mov	r7,r3
   133cc:	003fc706 	br	132ec <__pack_d+0x50>
   133d0:	480897fa 	slli	r4,r9,31
   133d4:	4004d07a 	srli	r2,r8,1
   133d8:	4806d07a 	srli	r3,r9,1
   133dc:	52800044 	addi	r10,r10,1
   133e0:	2084b03a 	or	r2,r4,r2
   133e4:	1011883a 	mov	r8,r2
   133e8:	1813883a 	mov	r9,r3
   133ec:	003feb06 	br	1339c <__pack_d+0x100>
   133f0:	383fe11e 	bne	r7,zero,13378 <__pack_d+0xdc>
   133f4:	01004004 	movi	r4,256
   133f8:	4104703a 	and	r2,r8,r4
   133fc:	10c4b03a 	or	r2,r2,r3
   13400:	103fe326 	beq	r2,zero,13390 <__pack_d+0xf4>
   13404:	3005883a 	mov	r2,r6
   13408:	003fdc06 	br	1337c <__pack_d+0xe0>
   1340c:	000d883a 	mov	r6,zero
   13410:	000f883a 	mov	r7,zero
   13414:	0201ffc4 	movi	r8,2047
   13418:	003fb406 	br	132ec <__pack_d+0x50>
   1341c:	0005883a 	mov	r2,zero
   13420:	00c00234 	movhi	r3,8
   13424:	408cb03a 	or	r6,r8,r2
   13428:	48ceb03a 	or	r7,r9,r3
   1342c:	013fffc4 	movi	r4,-1
   13430:	01400434 	movhi	r5,16
   13434:	297fffc4 	addi	r5,r5,-1
   13438:	3104703a 	and	r2,r6,r4
   1343c:	3946703a 	and	r3,r7,r5
   13440:	100d883a 	mov	r6,r2
   13444:	180f883a 	mov	r7,r3
   13448:	0201ffc4 	movi	r8,2047
   1344c:	003fa706 	br	132ec <__pack_d+0x50>
   13450:	1109c83a 	sub	r4,r2,r4
   13454:	00800e04 	movi	r2,56
   13458:	11004316 	blt	r2,r4,13568 <__pack_d+0x2cc>
   1345c:	21fff804 	addi	r7,r4,-32
   13460:	38004516 	blt	r7,zero,13578 <__pack_d+0x2dc>
   13464:	49d8d83a 	srl	r12,r9,r7
   13468:	001b883a 	mov	r13,zero
   1346c:	0023883a 	mov	r17,zero
   13470:	01400044 	movi	r5,1
   13474:	0025883a 	mov	r18,zero
   13478:	38004716 	blt	r7,zero,13598 <__pack_d+0x2fc>
   1347c:	29d6983a 	sll	r11,r5,r7
   13480:	0015883a 	mov	r10,zero
   13484:	00bfffc4 	movi	r2,-1
   13488:	5089883a 	add	r4,r10,r2
   1348c:	588b883a 	add	r5,r11,r2
   13490:	228d803a 	cmpltu	r6,r4,r10
   13494:	314b883a 	add	r5,r6,r5
   13498:	4104703a 	and	r2,r8,r4
   1349c:	4946703a 	and	r3,r9,r5
   134a0:	10c4b03a 	or	r2,r2,r3
   134a4:	10000226 	beq	r2,zero,134b0 <__pack_d+0x214>
   134a8:	04400044 	movi	r17,1
   134ac:	0025883a 	mov	r18,zero
   134b0:	00803fc4 	movi	r2,255
   134b4:	644eb03a 	or	r7,r12,r17
   134b8:	3892703a 	and	r9,r7,r2
   134bc:	00802004 	movi	r2,128
   134c0:	6c90b03a 	or	r8,r13,r18
   134c4:	0015883a 	mov	r10,zero
   134c8:	48801626 	beq	r9,r2,13524 <__pack_d+0x288>
   134cc:	01001fc4 	movi	r4,127
   134d0:	3905883a 	add	r2,r7,r4
   134d4:	11cd803a 	cmpltu	r6,r2,r7
   134d8:	320d883a 	add	r6,r6,r8
   134dc:	100f883a 	mov	r7,r2
   134e0:	00840034 	movhi	r2,4096
   134e4:	10bfffc4 	addi	r2,r2,-1
   134e8:	3011883a 	mov	r8,r6
   134ec:	0007883a 	mov	r3,zero
   134f0:	11801b36 	bltu	r2,r6,13560 <__pack_d+0x2c4>
   134f4:	4004963a 	slli	r2,r8,24
   134f8:	3808d23a 	srli	r4,r7,8
   134fc:	400ad23a 	srli	r5,r8,8
   13500:	1813883a 	mov	r9,r3
   13504:	1108b03a 	or	r4,r2,r4
   13508:	00bfffc4 	movi	r2,-1
   1350c:	00c00434 	movhi	r3,16
   13510:	18ffffc4 	addi	r3,r3,-1
   13514:	208c703a 	and	r6,r4,r2
   13518:	28ce703a 	and	r7,r5,r3
   1351c:	4a01ffcc 	andi	r8,r9,2047
   13520:	003f7206 	br	132ec <__pack_d+0x50>
   13524:	503fe91e 	bne	r10,zero,134cc <__pack_d+0x230>
   13528:	01004004 	movi	r4,256
   1352c:	3904703a 	and	r2,r7,r4
   13530:	0007883a 	mov	r3,zero
   13534:	10c4b03a 	or	r2,r2,r3
   13538:	10000626 	beq	r2,zero,13554 <__pack_d+0x2b8>
   1353c:	3a45883a 	add	r2,r7,r9
   13540:	11cd803a 	cmpltu	r6,r2,r7
   13544:	320d883a 	add	r6,r6,r8
   13548:	100f883a 	mov	r7,r2
   1354c:	3011883a 	mov	r8,r6
   13550:	0007883a 	mov	r3,zero
   13554:	00840034 	movhi	r2,4096
   13558:	10bfffc4 	addi	r2,r2,-1
   1355c:	123fe52e 	bgeu	r2,r8,134f4 <__pack_d+0x258>
   13560:	00c00044 	movi	r3,1
   13564:	003fe306 	br	134f4 <__pack_d+0x258>
   13568:	0009883a 	mov	r4,zero
   1356c:	0013883a 	mov	r9,zero
   13570:	000b883a 	mov	r5,zero
   13574:	003fe406 	br	13508 <__pack_d+0x26c>
   13578:	4a47883a 	add	r3,r9,r9
   1357c:	008007c4 	movi	r2,31
   13580:	1105c83a 	sub	r2,r2,r4
   13584:	1886983a 	sll	r3,r3,r2
   13588:	4118d83a 	srl	r12,r8,r4
   1358c:	491ad83a 	srl	r13,r9,r4
   13590:	1b18b03a 	or	r12,r3,r12
   13594:	003fb506 	br	1346c <__pack_d+0x1d0>
   13598:	2806d07a 	srli	r3,r5,1
   1359c:	008007c4 	movi	r2,31
   135a0:	1105c83a 	sub	r2,r2,r4
   135a4:	1896d83a 	srl	r11,r3,r2
   135a8:	2914983a 	sll	r10,r5,r4
   135ac:	003fb506 	br	13484 <__pack_d+0x1e8>

000135b0 <__unpack_d>:
   135b0:	20c00117 	ldw	r3,4(r4)
   135b4:	22400017 	ldw	r9,0(r4)
   135b8:	00800434 	movhi	r2,16
   135bc:	10bfffc4 	addi	r2,r2,-1
   135c0:	1808d53a 	srli	r4,r3,20
   135c4:	180cd7fa 	srli	r6,r3,31
   135c8:	1894703a 	and	r10,r3,r2
   135cc:	2201ffcc 	andi	r8,r4,2047
   135d0:	281b883a 	mov	r13,r5
   135d4:	4817883a 	mov	r11,r9
   135d8:	29800115 	stw	r6,4(r5)
   135dc:	5019883a 	mov	r12,r10
   135e0:	40001e1e 	bne	r8,zero,1365c <__unpack_d+0xac>
   135e4:	4a84b03a 	or	r2,r9,r10
   135e8:	10001926 	beq	r2,zero,13650 <__unpack_d+0xa0>
   135ec:	4804d63a 	srli	r2,r9,24
   135f0:	500c923a 	slli	r6,r10,8
   135f4:	013f0084 	movi	r4,-1022
   135f8:	00c40034 	movhi	r3,4096
   135fc:	18ffffc4 	addi	r3,r3,-1
   13600:	118cb03a 	or	r6,r2,r6
   13604:	008000c4 	movi	r2,3
   13608:	480a923a 	slli	r5,r9,8
   1360c:	68800015 	stw	r2,0(r13)
   13610:	69000215 	stw	r4,8(r13)
   13614:	19800b36 	bltu	r3,r6,13644 <__unpack_d+0x94>
   13618:	200f883a 	mov	r7,r4
   1361c:	1811883a 	mov	r8,r3
   13620:	2945883a 	add	r2,r5,r5
   13624:	1149803a 	cmpltu	r4,r2,r5
   13628:	3187883a 	add	r3,r6,r6
   1362c:	20c9883a 	add	r4,r4,r3
   13630:	100b883a 	mov	r5,r2
   13634:	200d883a 	mov	r6,r4
   13638:	39ffffc4 	addi	r7,r7,-1
   1363c:	413ff82e 	bgeu	r8,r4,13620 <__unpack_d+0x70>
   13640:	69c00215 	stw	r7,8(r13)
   13644:	69800415 	stw	r6,16(r13)
   13648:	69400315 	stw	r5,12(r13)
   1364c:	f800283a 	ret
   13650:	00800084 	movi	r2,2
   13654:	28800015 	stw	r2,0(r5)
   13658:	f800283a 	ret
   1365c:	0081ffc4 	movi	r2,2047
   13660:	40800f26 	beq	r8,r2,136a0 <__unpack_d+0xf0>
   13664:	480cd63a 	srli	r6,r9,24
   13668:	5006923a 	slli	r3,r10,8
   1366c:	4804923a 	slli	r2,r9,8
   13670:	0009883a 	mov	r4,zero
   13674:	30c6b03a 	or	r3,r6,r3
   13678:	01440034 	movhi	r5,4096
   1367c:	110cb03a 	or	r6,r2,r4
   13680:	423f0044 	addi	r8,r8,-1023
   13684:	194eb03a 	or	r7,r3,r5
   13688:	008000c4 	movi	r2,3
   1368c:	69c00415 	stw	r7,16(r13)
   13690:	6a000215 	stw	r8,8(r13)
   13694:	68800015 	stw	r2,0(r13)
   13698:	69800315 	stw	r6,12(r13)
   1369c:	f800283a 	ret
   136a0:	4a84b03a 	or	r2,r9,r10
   136a4:	1000031e 	bne	r2,zero,136b4 <__unpack_d+0x104>
   136a8:	00800104 	movi	r2,4
   136ac:	28800015 	stw	r2,0(r5)
   136b0:	f800283a 	ret
   136b4:	0009883a 	mov	r4,zero
   136b8:	01400234 	movhi	r5,8
   136bc:	4904703a 	and	r2,r9,r4
   136c0:	5146703a 	and	r3,r10,r5
   136c4:	10c4b03a 	or	r2,r2,r3
   136c8:	10000526 	beq	r2,zero,136e0 <__unpack_d+0x130>
   136cc:	00800044 	movi	r2,1
   136d0:	68800015 	stw	r2,0(r13)
   136d4:	6b000415 	stw	r12,16(r13)
   136d8:	6ac00315 	stw	r11,12(r13)
   136dc:	f800283a 	ret
   136e0:	68000015 	stw	zero,0(r13)
   136e4:	003ffb06 	br	136d4 <__unpack_d+0x124>

000136e8 <__fpcmp_parts_d>:
   136e8:	21800017 	ldw	r6,0(r4)
   136ec:	00c00044 	movi	r3,1
   136f0:	19800a2e 	bgeu	r3,r6,1371c <__fpcmp_parts_d+0x34>
   136f4:	28800017 	ldw	r2,0(r5)
   136f8:	1880082e 	bgeu	r3,r2,1371c <__fpcmp_parts_d+0x34>
   136fc:	00c00104 	movi	r3,4
   13700:	30c02626 	beq	r6,r3,1379c <__fpcmp_parts_d+0xb4>
   13704:	10c02226 	beq	r2,r3,13790 <__fpcmp_parts_d+0xa8>
   13708:	00c00084 	movi	r3,2
   1370c:	30c00526 	beq	r6,r3,13724 <__fpcmp_parts_d+0x3c>
   13710:	10c0071e 	bne	r2,r3,13730 <__fpcmp_parts_d+0x48>
   13714:	20800117 	ldw	r2,4(r4)
   13718:	1000091e 	bne	r2,zero,13740 <__fpcmp_parts_d+0x58>
   1371c:	00800044 	movi	r2,1
   13720:	f800283a 	ret
   13724:	10c01a1e 	bne	r2,r3,13790 <__fpcmp_parts_d+0xa8>
   13728:	0005883a 	mov	r2,zero
   1372c:	f800283a 	ret
   13730:	22000117 	ldw	r8,4(r4)
   13734:	28800117 	ldw	r2,4(r5)
   13738:	40800326 	beq	r8,r2,13748 <__fpcmp_parts_d+0x60>
   1373c:	403ff726 	beq	r8,zero,1371c <__fpcmp_parts_d+0x34>
   13740:	00bfffc4 	movi	r2,-1
   13744:	f800283a 	ret
   13748:	20c00217 	ldw	r3,8(r4)
   1374c:	28800217 	ldw	r2,8(r5)
   13750:	10fffa16 	blt	r2,r3,1373c <__fpcmp_parts_d+0x54>
   13754:	18800916 	blt	r3,r2,1377c <__fpcmp_parts_d+0x94>
   13758:	21c00417 	ldw	r7,16(r4)
   1375c:	28c00417 	ldw	r3,16(r5)
   13760:	21800317 	ldw	r6,12(r4)
   13764:	28800317 	ldw	r2,12(r5)
   13768:	19fff436 	bltu	r3,r7,1373c <__fpcmp_parts_d+0x54>
   1376c:	38c00526 	beq	r7,r3,13784 <__fpcmp_parts_d+0x9c>
   13770:	38c00236 	bltu	r7,r3,1377c <__fpcmp_parts_d+0x94>
   13774:	19ffec1e 	bne	r3,r7,13728 <__fpcmp_parts_d+0x40>
   13778:	30bfeb2e 	bgeu	r6,r2,13728 <__fpcmp_parts_d+0x40>
   1377c:	403fe71e 	bne	r8,zero,1371c <__fpcmp_parts_d+0x34>
   13780:	003fef06 	br	13740 <__fpcmp_parts_d+0x58>
   13784:	11bffa2e 	bgeu	r2,r6,13770 <__fpcmp_parts_d+0x88>
   13788:	403fe426 	beq	r8,zero,1371c <__fpcmp_parts_d+0x34>
   1378c:	003fec06 	br	13740 <__fpcmp_parts_d+0x58>
   13790:	28800117 	ldw	r2,4(r5)
   13794:	103fe11e 	bne	r2,zero,1371c <__fpcmp_parts_d+0x34>
   13798:	003fe906 	br	13740 <__fpcmp_parts_d+0x58>
   1379c:	11bfdd1e 	bne	r2,r6,13714 <__fpcmp_parts_d+0x2c>
   137a0:	28c00117 	ldw	r3,4(r5)
   137a4:	20800117 	ldw	r2,4(r4)
   137a8:	1885c83a 	sub	r2,r3,r2
   137ac:	f800283a 	ret

000137b0 <printf>:
   137b0:	defffb04 	addi	sp,sp,-20
   137b4:	dfc00115 	stw	ra,4(sp)
   137b8:	d9400215 	stw	r5,8(sp)
   137bc:	d9800315 	stw	r6,12(sp)
   137c0:	d9c00415 	stw	r7,16(sp)
   137c4:	00800074 	movhi	r2,1
   137c8:	10974304 	addi	r2,r2,23820
   137cc:	11400017 	ldw	r5,0(r2)
   137d0:	d8800204 	addi	r2,sp,8
   137d4:	d8800015 	stw	r2,0(sp)
   137d8:	29c00217 	ldw	r7,8(r5)
   137dc:	100d883a 	mov	r6,r2
   137e0:	00800074 	movhi	r2,1
   137e4:	108fcf04 	addi	r2,r2,16188
   137e8:	200b883a 	mov	r5,r4
   137ec:	38800115 	stw	r2,4(r7)
   137f0:	3809883a 	mov	r4,r7
   137f4:	0013f180 	call	13f18 <__vfprintf_internal>
   137f8:	dfc00117 	ldw	ra,4(sp)
   137fc:	dec00504 	addi	sp,sp,20
   13800:	f800283a 	ret

00013804 <_printf_r>:
   13804:	defffc04 	addi	sp,sp,-16
   13808:	dfc00115 	stw	ra,4(sp)
   1380c:	d9800215 	stw	r6,8(sp)
   13810:	d9c00315 	stw	r7,12(sp)
   13814:	22000217 	ldw	r8,8(r4)
   13818:	d8800204 	addi	r2,sp,8
   1381c:	d8800015 	stw	r2,0(sp)
   13820:	100f883a 	mov	r7,r2
   13824:	00800074 	movhi	r2,1
   13828:	108fcf04 	addi	r2,r2,16188
   1382c:	280d883a 	mov	r6,r5
   13830:	40800115 	stw	r2,4(r8)
   13834:	400b883a 	mov	r5,r8
   13838:	00138e80 	call	138e8 <___vfprintf_internal_r>
   1383c:	dfc00117 	ldw	ra,4(sp)
   13840:	dec00404 	addi	sp,sp,16
   13844:	f800283a 	ret

00013848 <strlen>:
   13848:	20800007 	ldb	r2,0(r4)
   1384c:	10000526 	beq	r2,zero,13864 <strlen+0x1c>
   13850:	2007883a 	mov	r3,r4
   13854:	18c00044 	addi	r3,r3,1
   13858:	18800007 	ldb	r2,0(r3)
   1385c:	103ffd1e 	bne	r2,zero,13854 <strlen+0xc>
   13860:	1905c83a 	sub	r2,r3,r4
   13864:	f800283a 	ret

00013868 <print_repeat>:
   13868:	defffb04 	addi	sp,sp,-20
   1386c:	dc800315 	stw	r18,12(sp)
   13870:	dc400215 	stw	r17,8(sp)
   13874:	dc000115 	stw	r16,4(sp)
   13878:	dfc00415 	stw	ra,16(sp)
   1387c:	2025883a 	mov	r18,r4
   13880:	2823883a 	mov	r17,r5
   13884:	3821883a 	mov	r16,r7
   13888:	d9800005 	stb	r6,0(sp)
   1388c:	9009883a 	mov	r4,r18
   13890:	880b883a 	mov	r5,r17
   13894:	d80d883a 	mov	r6,sp
   13898:	01c00044 	movi	r7,1
   1389c:	04000b0e 	bge	zero,r16,138cc <print_repeat+0x64>
   138a0:	88c00117 	ldw	r3,4(r17)
   138a4:	843fffc4 	addi	r16,r16,-1
   138a8:	183ee83a 	callr	r3
   138ac:	103ff726 	beq	r2,zero,1388c <print_repeat+0x24>
   138b0:	00bfffc4 	movi	r2,-1
   138b4:	dfc00417 	ldw	ra,16(sp)
   138b8:	dc800317 	ldw	r18,12(sp)
   138bc:	dc400217 	ldw	r17,8(sp)
   138c0:	dc000117 	ldw	r16,4(sp)
   138c4:	dec00504 	addi	sp,sp,20
   138c8:	f800283a 	ret
   138cc:	0005883a 	mov	r2,zero
   138d0:	dfc00417 	ldw	ra,16(sp)
   138d4:	dc800317 	ldw	r18,12(sp)
   138d8:	dc400217 	ldw	r17,8(sp)
   138dc:	dc000117 	ldw	r16,4(sp)
   138e0:	dec00504 	addi	sp,sp,20
   138e4:	f800283a 	ret

000138e8 <___vfprintf_internal_r>:
   138e8:	deffe404 	addi	sp,sp,-112
   138ec:	ddc01915 	stw	r23,100(sp)
   138f0:	dd801815 	stw	r22,96(sp)
   138f4:	dcc01515 	stw	r19,84(sp)
   138f8:	dc401315 	stw	r17,76(sp)
   138fc:	dc001215 	stw	r16,72(sp)
   13900:	dfc01b15 	stw	ra,108(sp)
   13904:	df001a15 	stw	fp,104(sp)
   13908:	dd401715 	stw	r21,92(sp)
   1390c:	dd001615 	stw	r20,88(sp)
   13910:	dc801415 	stw	r18,80(sp)
   13914:	d9001015 	stw	r4,64(sp)
   13918:	2827883a 	mov	r19,r5
   1391c:	d9c01115 	stw	r7,68(sp)
   13920:	3023883a 	mov	r17,r6
   13924:	0021883a 	mov	r16,zero
   13928:	d8000f15 	stw	zero,60(sp)
   1392c:	d8000e15 	stw	zero,56(sp)
   13930:	002f883a 	mov	r23,zero
   13934:	d8000915 	stw	zero,36(sp)
   13938:	d8000d15 	stw	zero,52(sp)
   1393c:	d8000c15 	stw	zero,48(sp)
   13940:	d8000b15 	stw	zero,44(sp)
   13944:	002d883a 	mov	r22,zero
   13948:	89400003 	ldbu	r5,0(r17)
   1394c:	01c00044 	movi	r7,1
   13950:	8c400044 	addi	r17,r17,1
   13954:	29003fcc 	andi	r4,r5,255
   13958:	2100201c 	xori	r4,r4,128
   1395c:	213fe004 	addi	r4,r4,-128
   13960:	20001526 	beq	r4,zero,139b8 <___vfprintf_internal_r+0xd0>
   13964:	81c03326 	beq	r16,r7,13a34 <___vfprintf_internal_r+0x14c>
   13968:	3c002016 	blt	r7,r16,139ec <___vfprintf_internal_r+0x104>
   1396c:	803ff61e 	bne	r16,zero,13948 <___vfprintf_internal_r+0x60>
   13970:	00800944 	movi	r2,37
   13974:	2081311e 	bne	r4,r2,13e3c <___vfprintf_internal_r+0x554>
   13978:	05ffffc4 	movi	r23,-1
   1397c:	00800284 	movi	r2,10
   13980:	d9c00c15 	stw	r7,48(sp)
   13984:	d8000f15 	stw	zero,60(sp)
   13988:	d8000e15 	stw	zero,56(sp)
   1398c:	ddc00915 	stw	r23,36(sp)
   13990:	d8800d15 	stw	r2,52(sp)
   13994:	d8000b15 	stw	zero,44(sp)
   13998:	89400003 	ldbu	r5,0(r17)
   1399c:	3821883a 	mov	r16,r7
   139a0:	8c400044 	addi	r17,r17,1
   139a4:	29003fcc 	andi	r4,r5,255
   139a8:	2100201c 	xori	r4,r4,128
   139ac:	213fe004 	addi	r4,r4,-128
   139b0:	01c00044 	movi	r7,1
   139b4:	203feb1e 	bne	r4,zero,13964 <___vfprintf_internal_r+0x7c>
   139b8:	b005883a 	mov	r2,r22
   139bc:	dfc01b17 	ldw	ra,108(sp)
   139c0:	df001a17 	ldw	fp,104(sp)
   139c4:	ddc01917 	ldw	r23,100(sp)
   139c8:	dd801817 	ldw	r22,96(sp)
   139cc:	dd401717 	ldw	r21,92(sp)
   139d0:	dd001617 	ldw	r20,88(sp)
   139d4:	dcc01517 	ldw	r19,84(sp)
   139d8:	dc801417 	ldw	r18,80(sp)
   139dc:	dc401317 	ldw	r17,76(sp)
   139e0:	dc001217 	ldw	r16,72(sp)
   139e4:	dec01c04 	addi	sp,sp,112
   139e8:	f800283a 	ret
   139ec:	00800084 	movi	r2,2
   139f0:	80801526 	beq	r16,r2,13a48 <___vfprintf_internal_r+0x160>
   139f4:	008000c4 	movi	r2,3
   139f8:	80bfd31e 	bne	r16,r2,13948 <___vfprintf_internal_r+0x60>
   139fc:	29bff404 	addi	r6,r5,-48
   13a00:	30c03fcc 	andi	r3,r6,255
   13a04:	00800244 	movi	r2,9
   13a08:	10c01c36 	bltu	r2,r3,13a7c <___vfprintf_internal_r+0x194>
   13a0c:	d8c00917 	ldw	r3,36(sp)
   13a10:	18010816 	blt	r3,zero,13e34 <___vfprintf_internal_r+0x54c>
   13a14:	d9000917 	ldw	r4,36(sp)
   13a18:	20c002a4 	muli	r3,r4,10
   13a1c:	30803fcc 	andi	r2,r6,255
   13a20:	1080201c 	xori	r2,r2,128
   13a24:	10bfe004 	addi	r2,r2,-128
   13a28:	1887883a 	add	r3,r3,r2
   13a2c:	d8c00915 	stw	r3,36(sp)
   13a30:	003fc506 	br	13948 <___vfprintf_internal_r+0x60>
   13a34:	00800c04 	movi	r2,48
   13a38:	20809526 	beq	r4,r2,13c90 <___vfprintf_internal_r+0x3a8>
   13a3c:	00800944 	movi	r2,37
   13a40:	20810e26 	beq	r4,r2,13e7c <___vfprintf_internal_r+0x594>
   13a44:	04000084 	movi	r16,2
   13a48:	29bff404 	addi	r6,r5,-48
   13a4c:	30c03fcc 	andi	r3,r6,255
   13a50:	00800244 	movi	r2,9
   13a54:	10c00736 	bltu	r2,r3,13a74 <___vfprintf_internal_r+0x18c>
   13a58:	b8009816 	blt	r23,zero,13cbc <___vfprintf_internal_r+0x3d4>
   13a5c:	b9c002a4 	muli	r7,r23,10
   13a60:	30803fcc 	andi	r2,r6,255
   13a64:	1080201c 	xori	r2,r2,128
   13a68:	10bfe004 	addi	r2,r2,-128
   13a6c:	38af883a 	add	r23,r7,r2
   13a70:	003fb506 	br	13948 <___vfprintf_internal_r+0x60>
   13a74:	00800b84 	movi	r2,46
   13a78:	20808a26 	beq	r4,r2,13ca4 <___vfprintf_internal_r+0x3bc>
   13a7c:	00801b04 	movi	r2,108
   13a80:	20808a26 	beq	r4,r2,13cac <___vfprintf_internal_r+0x3c4>
   13a84:	d8c00917 	ldw	r3,36(sp)
   13a88:	18008e16 	blt	r3,zero,13cc4 <___vfprintf_internal_r+0x3dc>
   13a8c:	d8000f15 	stw	zero,60(sp)
   13a90:	28bfea04 	addi	r2,r5,-88
   13a94:	10803fcc 	andi	r2,r2,255
   13a98:	00c00804 	movi	r3,32
   13a9c:	18802836 	bltu	r3,r2,13b40 <___vfprintf_internal_r+0x258>
   13aa0:	1085883a 	add	r2,r2,r2
   13aa4:	1085883a 	add	r2,r2,r2
   13aa8:	00c00074 	movhi	r3,1
   13aac:	18ceaf04 	addi	r3,r3,15036
   13ab0:	10c5883a 	add	r2,r2,r3
   13ab4:	11000017 	ldw	r4,0(r2)
   13ab8:	2000683a 	jmp	r4
   13abc:	00013d38 	rdprs	zero,zero,1268
   13ac0:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ac4:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ac8:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13acc:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ad0:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ad4:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ad8:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13adc:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ae0:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ae4:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13ae8:	00013d50 	cmplti	zero,zero,1269
   13aec:	00013b54 	movui	zero,1261
   13af0:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13af4:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13af8:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13afc:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b00:	00013b54 	movui	zero,1261
   13b04:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b08:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b0c:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b10:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b14:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b18:	00013db8 	rdprs	zero,zero,1270
   13b1c:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b20:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b24:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b28:	00013dc8 	cmpgei	zero,zero,1271
   13b2c:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b30:	00013b50 	cmplti	zero,zero,1261
   13b34:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b38:	00013b40 	call	13b4 <__alt_mem_onchip_memory2_0-0xec4c>
   13b3c:	00013b48 	cmpgei	zero,zero,1261
   13b40:	0021883a 	mov	r16,zero
   13b44:	003f8006 	br	13948 <___vfprintf_internal_r+0x60>
   13b48:	00800404 	movi	r2,16
   13b4c:	d8800d15 	stw	r2,52(sp)
   13b50:	d8000c15 	stw	zero,48(sp)
   13b54:	d8800c17 	ldw	r2,48(sp)
   13b58:	10006c1e 	bne	r2,zero,13d0c <___vfprintf_internal_r+0x424>
   13b5c:	d9001117 	ldw	r4,68(sp)
   13b60:	21c00104 	addi	r7,r4,4
   13b64:	24000017 	ldw	r16,0(r4)
   13b68:	d9c01115 	stw	r7,68(sp)
   13b6c:	d8000a15 	stw	zero,40(sp)
   13b70:	80006d26 	beq	r16,zero,13d28 <___vfprintf_internal_r+0x440>
   13b74:	d8c00b17 	ldw	r3,44(sp)
   13b78:	dc800044 	addi	r18,sp,1
   13b7c:	9039883a 	mov	fp,r18
   13b80:	05400244 	movi	r21,9
   13b84:	1829003a 	cmpeq	r20,r3,zero
   13b88:	00000506 	br	13ba0 <___vfprintf_internal_r+0x2b8>
   13b8c:	21000c04 	addi	r4,r4,48
   13b90:	91000005 	stb	r4,0(r18)
   13b94:	94800044 	addi	r18,r18,1
   13b98:	18000e26 	beq	r3,zero,13bd4 <___vfprintf_internal_r+0x2ec>
   13b9c:	1821883a 	mov	r16,r3
   13ba0:	d9400d17 	ldw	r5,52(sp)
   13ba4:	8009883a 	mov	r4,r16
   13ba8:	00141ac0 	call	141ac <__udivsi3>
   13bac:	d9000d17 	ldw	r4,52(sp)
   13bb0:	1007883a 	mov	r3,r2
   13bb4:	2085383a 	mul	r2,r4,r2
   13bb8:	8089c83a 	sub	r4,r16,r2
   13bbc:	a93ff30e 	bge	r21,r4,13b8c <___vfprintf_internal_r+0x2a4>
   13bc0:	a000361e 	bne	r20,zero,13c9c <___vfprintf_internal_r+0x3b4>
   13bc4:	21000dc4 	addi	r4,r4,55
   13bc8:	91000005 	stb	r4,0(r18)
   13bcc:	94800044 	addi	r18,r18,1
   13bd0:	183ff21e 	bne	r3,zero,13b9c <___vfprintf_internal_r+0x2b4>
   13bd4:	9729c83a 	sub	r20,r18,fp
   13bd8:	d8800917 	ldw	r2,36(sp)
   13bdc:	150bc83a 	sub	r5,r2,r20
   13be0:	0140100e 	bge	zero,r5,13c24 <___vfprintf_internal_r+0x33c>
   13be4:	e0800804 	addi	r2,fp,32
   13be8:	90800e2e 	bgeu	r18,r2,13c24 <___vfprintf_internal_r+0x33c>
   13bec:	00800c04 	movi	r2,48
   13bf0:	28ffffc4 	addi	r3,r5,-1
   13bf4:	90800005 	stb	r2,0(r18)
   13bf8:	91000044 	addi	r4,r18,1
   13bfc:	00c0070e 	bge	zero,r3,13c1c <___vfprintf_internal_r+0x334>
   13c00:	e0800804 	addi	r2,fp,32
   13c04:	2080052e 	bgeu	r4,r2,13c1c <___vfprintf_internal_r+0x334>
   13c08:	00800c04 	movi	r2,48
   13c0c:	20800005 	stb	r2,0(r4)
   13c10:	21000044 	addi	r4,r4,1
   13c14:	9145883a 	add	r2,r18,r5
   13c18:	20bff91e 	bne	r4,r2,13c00 <___vfprintf_internal_r+0x318>
   13c1c:	2729c83a 	sub	r20,r4,fp
   13c20:	2025883a 	mov	r18,r4
   13c24:	d8c00a17 	ldw	r3,40(sp)
   13c28:	d9000f17 	ldw	r4,60(sp)
   13c2c:	1d05883a 	add	r2,r3,r20
   13c30:	b8a1c83a 	sub	r16,r23,r2
   13c34:	20002626 	beq	r4,zero,13cd0 <___vfprintf_internal_r+0x3e8>
   13c38:	1805003a 	cmpeq	r2,r3,zero
   13c3c:	1000a226 	beq	r2,zero,13ec8 <___vfprintf_internal_r+0x5e0>
   13c40:	04009916 	blt	zero,r16,13ea8 <___vfprintf_internal_r+0x5c0>
   13c44:	b005883a 	mov	r2,r22
   13c48:	0500890e 	bge	zero,r20,13e70 <___vfprintf_internal_r+0x588>
   13c4c:	102d883a 	mov	r22,r2
   13c50:	1521883a 	add	r16,r2,r20
   13c54:	00000206 	br	13c60 <___vfprintf_internal_r+0x378>
   13c58:	b5800044 	addi	r22,r22,1
   13c5c:	85bfb826 	beq	r16,r22,13b40 <___vfprintf_internal_r+0x258>
   13c60:	94bfffc4 	addi	r18,r18,-1
   13c64:	90800003 	ldbu	r2,0(r18)
   13c68:	98c00117 	ldw	r3,4(r19)
   13c6c:	d9001017 	ldw	r4,64(sp)
   13c70:	d8800005 	stb	r2,0(sp)
   13c74:	980b883a 	mov	r5,r19
   13c78:	d80d883a 	mov	r6,sp
   13c7c:	01c00044 	movi	r7,1
   13c80:	183ee83a 	callr	r3
   13c84:	103ff426 	beq	r2,zero,13c58 <___vfprintf_internal_r+0x370>
   13c88:	05bfffc4 	movi	r22,-1
   13c8c:	003f4a06 	br	139b8 <___vfprintf_internal_r+0xd0>
   13c90:	04000084 	movi	r16,2
   13c94:	d9c00f15 	stw	r7,60(sp)
   13c98:	003f2b06 	br	13948 <___vfprintf_internal_r+0x60>
   13c9c:	210015c4 	addi	r4,r4,87
   13ca0:	003fbb06 	br	13b90 <___vfprintf_internal_r+0x2a8>
   13ca4:	040000c4 	movi	r16,3
   13ca8:	003f2706 	br	13948 <___vfprintf_internal_r+0x60>
   13cac:	00800044 	movi	r2,1
   13cb0:	040000c4 	movi	r16,3
   13cb4:	d8800e15 	stw	r2,56(sp)
   13cb8:	003f2306 	br	13948 <___vfprintf_internal_r+0x60>
   13cbc:	000f883a 	mov	r7,zero
   13cc0:	003f6706 	br	13a60 <___vfprintf_internal_r+0x178>
   13cc4:	01000044 	movi	r4,1
   13cc8:	d9000915 	stw	r4,36(sp)
   13ccc:	003f7006 	br	13a90 <___vfprintf_internal_r+0x1a8>
   13cd0:	04008916 	blt	zero,r16,13ef8 <___vfprintf_internal_r+0x610>
   13cd4:	d8c00a17 	ldw	r3,40(sp)
   13cd8:	1805003a 	cmpeq	r2,r3,zero
   13cdc:	103fd91e 	bne	r2,zero,13c44 <___vfprintf_internal_r+0x35c>
   13ce0:	98c00117 	ldw	r3,4(r19)
   13ce4:	d9001017 	ldw	r4,64(sp)
   13ce8:	00800b44 	movi	r2,45
   13cec:	d8800005 	stb	r2,0(sp)
   13cf0:	980b883a 	mov	r5,r19
   13cf4:	d80d883a 	mov	r6,sp
   13cf8:	01c00044 	movi	r7,1
   13cfc:	183ee83a 	callr	r3
   13d00:	103fe11e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13d04:	b0800044 	addi	r2,r22,1
   13d08:	003fcf06 	br	13c48 <___vfprintf_internal_r+0x360>
   13d0c:	d8c01117 	ldw	r3,68(sp)
   13d10:	1c000017 	ldw	r16,0(r3)
   13d14:	18c00104 	addi	r3,r3,4
   13d18:	d8c01115 	stw	r3,68(sp)
   13d1c:	80005016 	blt	r16,zero,13e60 <___vfprintf_internal_r+0x578>
   13d20:	d8000a15 	stw	zero,40(sp)
   13d24:	803f931e 	bne	r16,zero,13b74 <___vfprintf_internal_r+0x28c>
   13d28:	dc800044 	addi	r18,sp,1
   13d2c:	9039883a 	mov	fp,r18
   13d30:	0029883a 	mov	r20,zero
   13d34:	003fa806 	br	13bd8 <___vfprintf_internal_r+0x2f0>
   13d38:	00800404 	movi	r2,16
   13d3c:	00c00044 	movi	r3,1
   13d40:	d8800d15 	stw	r2,52(sp)
   13d44:	d8000c15 	stw	zero,48(sp)
   13d48:	d8c00b15 	stw	r3,44(sp)
   13d4c:	003f8106 	br	13b54 <___vfprintf_internal_r+0x26c>
   13d50:	04000044 	movi	r16,1
   13d54:	85c0080e 	bge	r16,r23,13d78 <___vfprintf_internal_r+0x490>
   13d58:	d9001017 	ldw	r4,64(sp)
   13d5c:	980b883a 	mov	r5,r19
   13d60:	01800804 	movi	r6,32
   13d64:	b9ffffc4 	addi	r7,r23,-1
   13d68:	00138680 	call	13868 <print_repeat>
   13d6c:	103fc61e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13d70:	bd85883a 	add	r2,r23,r22
   13d74:	15bfffc4 	addi	r22,r2,-1
   13d78:	d8c01117 	ldw	r3,68(sp)
   13d7c:	d9001017 	ldw	r4,64(sp)
   13d80:	800f883a 	mov	r7,r16
   13d84:	18800017 	ldw	r2,0(r3)
   13d88:	98c00117 	ldw	r3,4(r19)
   13d8c:	980b883a 	mov	r5,r19
   13d90:	d8800005 	stb	r2,0(sp)
   13d94:	d80d883a 	mov	r6,sp
   13d98:	183ee83a 	callr	r3
   13d9c:	103fba1e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13da0:	d9001117 	ldw	r4,68(sp)
   13da4:	b5800044 	addi	r22,r22,1
   13da8:	0021883a 	mov	r16,zero
   13dac:	21000104 	addi	r4,r4,4
   13db0:	d9001115 	stw	r4,68(sp)
   13db4:	003ee406 	br	13948 <___vfprintf_internal_r+0x60>
   13db8:	01000204 	movi	r4,8
   13dbc:	d9000d15 	stw	r4,52(sp)
   13dc0:	d8000c15 	stw	zero,48(sp)
   13dc4:	003f6306 	br	13b54 <___vfprintf_internal_r+0x26c>
   13dc8:	d8801117 	ldw	r2,68(sp)
   13dcc:	15000017 	ldw	r20,0(r2)
   13dd0:	a009883a 	mov	r4,r20
   13dd4:	00138480 	call	13848 <strlen>
   13dd8:	b8a1c83a 	sub	r16,r23,r2
   13ddc:	1025883a 	mov	r18,r2
   13de0:	0400070e 	bge	zero,r16,13e00 <___vfprintf_internal_r+0x518>
   13de4:	d9001017 	ldw	r4,64(sp)
   13de8:	980b883a 	mov	r5,r19
   13dec:	01800804 	movi	r6,32
   13df0:	800f883a 	mov	r7,r16
   13df4:	00138680 	call	13868 <print_repeat>
   13df8:	103fa31e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13dfc:	b42d883a 	add	r22,r22,r16
   13e00:	98c00117 	ldw	r3,4(r19)
   13e04:	d9001017 	ldw	r4,64(sp)
   13e08:	a00d883a 	mov	r6,r20
   13e0c:	980b883a 	mov	r5,r19
   13e10:	900f883a 	mov	r7,r18
   13e14:	183ee83a 	callr	r3
   13e18:	103f9b1e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13e1c:	d8c01117 	ldw	r3,68(sp)
   13e20:	b4ad883a 	add	r22,r22,r18
   13e24:	0021883a 	mov	r16,zero
   13e28:	18c00104 	addi	r3,r3,4
   13e2c:	d8c01115 	stw	r3,68(sp)
   13e30:	003ec506 	br	13948 <___vfprintf_internal_r+0x60>
   13e34:	0007883a 	mov	r3,zero
   13e38:	003ef806 	br	13a1c <___vfprintf_internal_r+0x134>
   13e3c:	98c00117 	ldw	r3,4(r19)
   13e40:	d9001017 	ldw	r4,64(sp)
   13e44:	d9400005 	stb	r5,0(sp)
   13e48:	d80d883a 	mov	r6,sp
   13e4c:	980b883a 	mov	r5,r19
   13e50:	183ee83a 	callr	r3
   13e54:	103f8c1e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13e58:	b5800044 	addi	r22,r22,1
   13e5c:	003eba06 	br	13948 <___vfprintf_internal_r+0x60>
   13e60:	00800044 	movi	r2,1
   13e64:	0421c83a 	sub	r16,zero,r16
   13e68:	d8800a15 	stw	r2,40(sp)
   13e6c:	003f4006 	br	13b70 <___vfprintf_internal_r+0x288>
   13e70:	102d883a 	mov	r22,r2
   13e74:	0021883a 	mov	r16,zero
   13e78:	003eb306 	br	13948 <___vfprintf_internal_r+0x60>
   13e7c:	98c00117 	ldw	r3,4(r19)
   13e80:	d9000005 	stb	r4,0(sp)
   13e84:	d9001017 	ldw	r4,64(sp)
   13e88:	980b883a 	mov	r5,r19
   13e8c:	d80d883a 	mov	r6,sp
   13e90:	800f883a 	mov	r7,r16
   13e94:	183ee83a 	callr	r3
   13e98:	103f7b1e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13e9c:	b42d883a 	add	r22,r22,r16
   13ea0:	0021883a 	mov	r16,zero
   13ea4:	003ea806 	br	13948 <___vfprintf_internal_r+0x60>
   13ea8:	d9001017 	ldw	r4,64(sp)
   13eac:	980b883a 	mov	r5,r19
   13eb0:	01800c04 	movi	r6,48
   13eb4:	800f883a 	mov	r7,r16
   13eb8:	00138680 	call	13868 <print_repeat>
   13ebc:	103f721e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13ec0:	b405883a 	add	r2,r22,r16
   13ec4:	003f6006 	br	13c48 <___vfprintf_internal_r+0x360>
   13ec8:	98c00117 	ldw	r3,4(r19)
   13ecc:	d9001017 	ldw	r4,64(sp)
   13ed0:	00800b44 	movi	r2,45
   13ed4:	d8800005 	stb	r2,0(sp)
   13ed8:	980b883a 	mov	r5,r19
   13edc:	d80d883a 	mov	r6,sp
   13ee0:	01c00044 	movi	r7,1
   13ee4:	183ee83a 	callr	r3
   13ee8:	103f671e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13eec:	b5800044 	addi	r22,r22,1
   13ef0:	043f540e 	bge	zero,r16,13c44 <___vfprintf_internal_r+0x35c>
   13ef4:	003fec06 	br	13ea8 <___vfprintf_internal_r+0x5c0>
   13ef8:	d9001017 	ldw	r4,64(sp)
   13efc:	980b883a 	mov	r5,r19
   13f00:	01800804 	movi	r6,32
   13f04:	800f883a 	mov	r7,r16
   13f08:	00138680 	call	13868 <print_repeat>
   13f0c:	103f5e1e 	bne	r2,zero,13c88 <___vfprintf_internal_r+0x3a0>
   13f10:	b42d883a 	add	r22,r22,r16
   13f14:	003f6f06 	br	13cd4 <___vfprintf_internal_r+0x3ec>

00013f18 <__vfprintf_internal>:
   13f18:	00800074 	movhi	r2,1
   13f1c:	10974304 	addi	r2,r2,23820
   13f20:	2013883a 	mov	r9,r4
   13f24:	11000017 	ldw	r4,0(r2)
   13f28:	2805883a 	mov	r2,r5
   13f2c:	300f883a 	mov	r7,r6
   13f30:	480b883a 	mov	r5,r9
   13f34:	100d883a 	mov	r6,r2
   13f38:	00138e81 	jmpi	138e8 <___vfprintf_internal_r>

00013f3c <__sfvwrite_small_dev>:
   13f3c:	2880000b 	ldhu	r2,0(r5)
   13f40:	defffa04 	addi	sp,sp,-24
   13f44:	dcc00315 	stw	r19,12(sp)
   13f48:	1080020c 	andi	r2,r2,8
   13f4c:	dc800215 	stw	r18,8(sp)
   13f50:	dc400115 	stw	r17,4(sp)
   13f54:	dfc00515 	stw	ra,20(sp)
   13f58:	dd000415 	stw	r20,16(sp)
   13f5c:	dc000015 	stw	r16,0(sp)
   13f60:	2825883a 	mov	r18,r5
   13f64:	2027883a 	mov	r19,r4
   13f68:	3023883a 	mov	r17,r6
   13f6c:	10002026 	beq	r2,zero,13ff0 <__sfvwrite_small_dev+0xb4>
   13f70:	2940008f 	ldh	r5,2(r5)
   13f74:	28000f16 	blt	r5,zero,13fb4 <__sfvwrite_small_dev+0x78>
   13f78:	01c01b0e 	bge	zero,r7,13fe8 <__sfvwrite_small_dev+0xac>
   13f7c:	3821883a 	mov	r16,r7
   13f80:	05010004 	movi	r20,1024
   13f84:	00000206 	br	13f90 <__sfvwrite_small_dev+0x54>
   13f88:	0400170e 	bge	zero,r16,13fe8 <__sfvwrite_small_dev+0xac>
   13f8c:	9140008f 	ldh	r5,2(r18)
   13f90:	880d883a 	mov	r6,r17
   13f94:	9809883a 	mov	r4,r19
   13f98:	800f883a 	mov	r7,r16
   13f9c:	a400010e 	bge	r20,r16,13fa4 <__sfvwrite_small_dev+0x68>
   13fa0:	01c10004 	movi	r7,1024
   13fa4:	0013ff80 	call	13ff8 <_write_r>
   13fa8:	88a3883a 	add	r17,r17,r2
   13fac:	80a1c83a 	sub	r16,r16,r2
   13fb0:	00bff516 	blt	zero,r2,13f88 <__sfvwrite_small_dev+0x4c>
   13fb4:	9080000b 	ldhu	r2,0(r18)
   13fb8:	00ffffc4 	movi	r3,-1
   13fbc:	10801014 	ori	r2,r2,64
   13fc0:	9080000d 	sth	r2,0(r18)
   13fc4:	1805883a 	mov	r2,r3
   13fc8:	dfc00517 	ldw	ra,20(sp)
   13fcc:	dd000417 	ldw	r20,16(sp)
   13fd0:	dcc00317 	ldw	r19,12(sp)
   13fd4:	dc800217 	ldw	r18,8(sp)
   13fd8:	dc400117 	ldw	r17,4(sp)
   13fdc:	dc000017 	ldw	r16,0(sp)
   13fe0:	dec00604 	addi	sp,sp,24
   13fe4:	f800283a 	ret
   13fe8:	0007883a 	mov	r3,zero
   13fec:	003ff506 	br	13fc4 <__sfvwrite_small_dev+0x88>
   13ff0:	00ffffc4 	movi	r3,-1
   13ff4:	003ff306 	br	13fc4 <__sfvwrite_small_dev+0x88>

00013ff8 <_write_r>:
   13ff8:	defffd04 	addi	sp,sp,-12
   13ffc:	dc000015 	stw	r16,0(sp)
   14000:	04000074 	movhi	r16,1
   14004:	84180804 	addi	r16,r16,24608
   14008:	dc400115 	stw	r17,4(sp)
   1400c:	80000015 	stw	zero,0(r16)
   14010:	2023883a 	mov	r17,r4
   14014:	2809883a 	mov	r4,r5
   14018:	300b883a 	mov	r5,r6
   1401c:	380d883a 	mov	r6,r7
   14020:	dfc00215 	stw	ra,8(sp)
   14024:	00143440 	call	14344 <write>
   14028:	1007883a 	mov	r3,r2
   1402c:	00bfffc4 	movi	r2,-1
   14030:	18800626 	beq	r3,r2,1404c <_write_r+0x54>
   14034:	1805883a 	mov	r2,r3
   14038:	dfc00217 	ldw	ra,8(sp)
   1403c:	dc400117 	ldw	r17,4(sp)
   14040:	dc000017 	ldw	r16,0(sp)
   14044:	dec00304 	addi	sp,sp,12
   14048:	f800283a 	ret
   1404c:	80800017 	ldw	r2,0(r16)
   14050:	103ff826 	beq	r2,zero,14034 <_write_r+0x3c>
   14054:	88800015 	stw	r2,0(r17)
   14058:	1805883a 	mov	r2,r3
   1405c:	dfc00217 	ldw	ra,8(sp)
   14060:	dc400117 	ldw	r17,4(sp)
   14064:	dc000017 	ldw	r16,0(sp)
   14068:	dec00304 	addi	sp,sp,12
   1406c:	f800283a 	ret

00014070 <udivmodsi4>:
   14070:	29001b2e 	bgeu	r5,r4,140e0 <udivmodsi4+0x70>
   14074:	28001a16 	blt	r5,zero,140e0 <udivmodsi4+0x70>
   14078:	00800044 	movi	r2,1
   1407c:	0007883a 	mov	r3,zero
   14080:	01c007c4 	movi	r7,31
   14084:	00000306 	br	14094 <udivmodsi4+0x24>
   14088:	19c01326 	beq	r3,r7,140d8 <udivmodsi4+0x68>
   1408c:	18c00044 	addi	r3,r3,1
   14090:	28000416 	blt	r5,zero,140a4 <udivmodsi4+0x34>
   14094:	294b883a 	add	r5,r5,r5
   14098:	1085883a 	add	r2,r2,r2
   1409c:	293ffa36 	bltu	r5,r4,14088 <udivmodsi4+0x18>
   140a0:	10000d26 	beq	r2,zero,140d8 <udivmodsi4+0x68>
   140a4:	0007883a 	mov	r3,zero
   140a8:	21400236 	bltu	r4,r5,140b4 <udivmodsi4+0x44>
   140ac:	2149c83a 	sub	r4,r4,r5
   140b0:	1886b03a 	or	r3,r3,r2
   140b4:	1004d07a 	srli	r2,r2,1
   140b8:	280ad07a 	srli	r5,r5,1
   140bc:	103ffa1e 	bne	r2,zero,140a8 <udivmodsi4+0x38>
   140c0:	30000226 	beq	r6,zero,140cc <udivmodsi4+0x5c>
   140c4:	2005883a 	mov	r2,r4
   140c8:	f800283a 	ret
   140cc:	1809883a 	mov	r4,r3
   140d0:	2005883a 	mov	r2,r4
   140d4:	f800283a 	ret
   140d8:	0007883a 	mov	r3,zero
   140dc:	003ff806 	br	140c0 <udivmodsi4+0x50>
   140e0:	00800044 	movi	r2,1
   140e4:	0007883a 	mov	r3,zero
   140e8:	003fef06 	br	140a8 <udivmodsi4+0x38>

000140ec <__divsi3>:
   140ec:	defffe04 	addi	sp,sp,-8
   140f0:	dc000015 	stw	r16,0(sp)
   140f4:	dfc00115 	stw	ra,4(sp)
   140f8:	0021883a 	mov	r16,zero
   140fc:	20000c16 	blt	r4,zero,14130 <__divsi3+0x44>
   14100:	000d883a 	mov	r6,zero
   14104:	28000e16 	blt	r5,zero,14140 <__divsi3+0x54>
   14108:	00140700 	call	14070 <udivmodsi4>
   1410c:	1007883a 	mov	r3,r2
   14110:	8005003a 	cmpeq	r2,r16,zero
   14114:	1000011e 	bne	r2,zero,1411c <__divsi3+0x30>
   14118:	00c7c83a 	sub	r3,zero,r3
   1411c:	1805883a 	mov	r2,r3
   14120:	dfc00117 	ldw	ra,4(sp)
   14124:	dc000017 	ldw	r16,0(sp)
   14128:	dec00204 	addi	sp,sp,8
   1412c:	f800283a 	ret
   14130:	0109c83a 	sub	r4,zero,r4
   14134:	04000044 	movi	r16,1
   14138:	000d883a 	mov	r6,zero
   1413c:	283ff20e 	bge	r5,zero,14108 <__divsi3+0x1c>
   14140:	014bc83a 	sub	r5,zero,r5
   14144:	8021003a 	cmpeq	r16,r16,zero
   14148:	003fef06 	br	14108 <__divsi3+0x1c>

0001414c <__modsi3>:
   1414c:	deffff04 	addi	sp,sp,-4
   14150:	dfc00015 	stw	ra,0(sp)
   14154:	01800044 	movi	r6,1
   14158:	2807883a 	mov	r3,r5
   1415c:	20000416 	blt	r4,zero,14170 <__modsi3+0x24>
   14160:	28000c16 	blt	r5,zero,14194 <__modsi3+0x48>
   14164:	dfc00017 	ldw	ra,0(sp)
   14168:	dec00104 	addi	sp,sp,4
   1416c:	00140701 	jmpi	14070 <udivmodsi4>
   14170:	0109c83a 	sub	r4,zero,r4
   14174:	28000b16 	blt	r5,zero,141a4 <__modsi3+0x58>
   14178:	180b883a 	mov	r5,r3
   1417c:	01800044 	movi	r6,1
   14180:	00140700 	call	14070 <udivmodsi4>
   14184:	0085c83a 	sub	r2,zero,r2
   14188:	dfc00017 	ldw	ra,0(sp)
   1418c:	dec00104 	addi	sp,sp,4
   14190:	f800283a 	ret
   14194:	014bc83a 	sub	r5,zero,r5
   14198:	dfc00017 	ldw	ra,0(sp)
   1419c:	dec00104 	addi	sp,sp,4
   141a0:	00140701 	jmpi	14070 <udivmodsi4>
   141a4:	0147c83a 	sub	r3,zero,r5
   141a8:	003ff306 	br	14178 <__modsi3+0x2c>

000141ac <__udivsi3>:
   141ac:	000d883a 	mov	r6,zero
   141b0:	00140701 	jmpi	14070 <udivmodsi4>

000141b4 <__umodsi3>:
   141b4:	01800044 	movi	r6,1
   141b8:	00140701 	jmpi	14070 <udivmodsi4>

000141bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   141bc:	defffe04 	addi	sp,sp,-8
   141c0:	dfc00115 	stw	ra,4(sp)
   141c4:	df000015 	stw	fp,0(sp)
   141c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   141cc:	01000074 	movhi	r4,1
   141d0:	21174b04 	addi	r4,r4,23852
   141d4:	01400074 	movhi	r5,1
   141d8:	29569504 	addi	r5,r5,23124
   141dc:	01800074 	movhi	r6,1
   141e0:	31974b04 	addi	r6,r6,23852
   141e4:	001423c0 	call	1423c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   141e8:	01000074 	movhi	r4,1
   141ec:	21000804 	addi	r4,r4,32
   141f0:	01400074 	movhi	r5,1
   141f4:	29400804 	addi	r5,r5,32
   141f8:	01800074 	movhi	r6,1
   141fc:	31800804 	addi	r6,r6,32
   14200:	001423c0 	call	1423c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14204:	01000074 	movhi	r4,1
   14208:	21161604 	addi	r4,r4,22616
   1420c:	01400074 	movhi	r5,1
   14210:	29561604 	addi	r5,r5,22616
   14214:	01800074 	movhi	r6,1
   14218:	31969504 	addi	r6,r6,23124
   1421c:	001423c0 	call	1423c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14220:	0014a600 	call	14a60 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14224:	0014cac0 	call	14cac <alt_icache_flush_all>
}
   14228:	e037883a 	mov	sp,fp
   1422c:	dfc00117 	ldw	ra,4(sp)
   14230:	df000017 	ldw	fp,0(sp)
   14234:	dec00204 	addi	sp,sp,8
   14238:	f800283a 	ret

0001423c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1423c:	defffc04 	addi	sp,sp,-16
   14240:	df000315 	stw	fp,12(sp)
   14244:	df000304 	addi	fp,sp,12
   14248:	e13ffd15 	stw	r4,-12(fp)
   1424c:	e17ffe15 	stw	r5,-8(fp)
   14250:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   14254:	e0fffe17 	ldw	r3,-8(fp)
   14258:	e0bffd17 	ldw	r2,-12(fp)
   1425c:	18800e26 	beq	r3,r2,14298 <alt_load_section+0x5c>
  {
    while( to != end )
   14260:	00000a06 	br	1428c <alt_load_section+0x50>
    {
      *to++ = *from++;
   14264:	e0bffd17 	ldw	r2,-12(fp)
   14268:	10c00017 	ldw	r3,0(r2)
   1426c:	e0bffe17 	ldw	r2,-8(fp)
   14270:	10c00015 	stw	r3,0(r2)
   14274:	e0bffe17 	ldw	r2,-8(fp)
   14278:	10800104 	addi	r2,r2,4
   1427c:	e0bffe15 	stw	r2,-8(fp)
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	10800104 	addi	r2,r2,4
   14288:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1428c:	e0fffe17 	ldw	r3,-8(fp)
   14290:	e0bfff17 	ldw	r2,-4(fp)
   14294:	18bff31e 	bne	r3,r2,14264 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   14298:	e037883a 	mov	sp,fp
   1429c:	df000017 	ldw	fp,0(sp)
   142a0:	dec00104 	addi	sp,sp,4
   142a4:	f800283a 	ret

000142a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   142a8:	defffd04 	addi	sp,sp,-12
   142ac:	dfc00215 	stw	ra,8(sp)
   142b0:	df000115 	stw	fp,4(sp)
   142b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   142b8:	0009883a 	mov	r4,zero
   142bc:	00144c40 	call	144c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   142c0:	00144f80 	call	144f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   142c4:	01000074 	movhi	r4,1
   142c8:	21168804 	addi	r4,r4,23072
   142cc:	01400074 	movhi	r5,1
   142d0:	29568804 	addi	r5,r5,23072
   142d4:	01800074 	movhi	r6,1
   142d8:	31968804 	addi	r6,r6,23072
   142dc:	0014da00 	call	14da0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   142e0:	0014be40 	call	14be4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   142e4:	01000074 	movhi	r4,1
   142e8:	21131204 	addi	r4,r4,19528
   142ec:	00154580 	call	15458 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   142f0:	d120c717 	ldw	r4,-31972(gp)
   142f4:	d160c817 	ldw	r5,-31968(gp)
   142f8:	d1a0c917 	ldw	r6,-31964(gp)
   142fc:	0010a440 	call	10a44 <main>
   14300:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14304:	01000044 	movi	r4,1
   14308:	00149040 	call	14904 <close>
  exit (result);
   1430c:	e13fff17 	ldw	r4,-4(fp)
   14310:	001546c0 	call	1546c <exit>

00014314 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   14314:	defffd04 	addi	sp,sp,-12
   14318:	dfc00215 	stw	ra,8(sp)
   1431c:	df000115 	stw	fp,4(sp)
   14320:	df000104 	addi	fp,sp,4
   14324:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   14328:	e13fff17 	ldw	r4,-4(fp)
   1432c:	00147b80 	call	147b8 <alt_busy_sleep>
}
   14330:	e037883a 	mov	sp,fp
   14334:	dfc00117 	ldw	ra,4(sp)
   14338:	df000017 	ldw	fp,0(sp)
   1433c:	dec00204 	addi	sp,sp,8
   14340:	f800283a 	ret

00014344 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14344:	defff704 	addi	sp,sp,-36
   14348:	dfc00815 	stw	ra,32(sp)
   1434c:	df000715 	stw	fp,28(sp)
   14350:	df000704 	addi	fp,sp,28
   14354:	e13ffb15 	stw	r4,-20(fp)
   14358:	e17ffc15 	stw	r5,-16(fp)
   1435c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14360:	e0bffb17 	ldw	r2,-20(fp)
   14364:	1004803a 	cmplt	r2,r2,zero
   14368:	1000081e 	bne	r2,zero,1438c <write+0x48>
   1436c:	e0bffb17 	ldw	r2,-20(fp)
   14370:	10800324 	muli	r2,r2,12
   14374:	1007883a 	mov	r3,r2
   14378:	00800074 	movhi	r2,1
   1437c:	1096e204 	addi	r2,r2,23432
   14380:	1887883a 	add	r3,r3,r2
   14384:	e0ffff15 	stw	r3,-4(fp)
   14388:	00000106 	br	14390 <write+0x4c>
   1438c:	e03fff15 	stw	zero,-4(fp)
   14390:	e0bfff17 	ldw	r2,-4(fp)
   14394:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   14398:	e0bffa17 	ldw	r2,-24(fp)
   1439c:	1005003a 	cmpeq	r2,r2,zero
   143a0:	1000241e 	bne	r2,zero,14434 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   143a4:	e0bffa17 	ldw	r2,-24(fp)
   143a8:	10800217 	ldw	r2,8(r2)
   143ac:	108000cc 	andi	r2,r2,3
   143b0:	1005003a 	cmpeq	r2,r2,zero
   143b4:	10001a1e 	bne	r2,zero,14420 <write+0xdc>
   143b8:	e0bffa17 	ldw	r2,-24(fp)
   143bc:	10800017 	ldw	r2,0(r2)
   143c0:	10800617 	ldw	r2,24(r2)
   143c4:	1005003a 	cmpeq	r2,r2,zero
   143c8:	1000151e 	bne	r2,zero,14420 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   143cc:	e0bffa17 	ldw	r2,-24(fp)
   143d0:	10800017 	ldw	r2,0(r2)
   143d4:	10800617 	ldw	r2,24(r2)
   143d8:	e17ffc17 	ldw	r5,-16(fp)
   143dc:	e1bffd17 	ldw	r6,-12(fp)
   143e0:	e13ffa17 	ldw	r4,-24(fp)
   143e4:	103ee83a 	callr	r2
   143e8:	e0bff915 	stw	r2,-28(fp)
   143ec:	e0bff917 	ldw	r2,-28(fp)
   143f0:	1004403a 	cmpge	r2,r2,zero
   143f4:	1000071e 	bne	r2,zero,14414 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   143f8:	00144640 	call	14464 <alt_get_errno>
   143fc:	e0fff917 	ldw	r3,-28(fp)
   14400:	00c7c83a 	sub	r3,zero,r3
   14404:	10c00015 	stw	r3,0(r2)
        return -1;
   14408:	00bfffc4 	movi	r2,-1
   1440c:	e0bffe15 	stw	r2,-8(fp)
   14410:	00000e06 	br	1444c <write+0x108>
      }
      return rval;
   14414:	e0bff917 	ldw	r2,-28(fp)
   14418:	e0bffe15 	stw	r2,-8(fp)
   1441c:	00000b06 	br	1444c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14420:	00144640 	call	14464 <alt_get_errno>
   14424:	1007883a 	mov	r3,r2
   14428:	00800344 	movi	r2,13
   1442c:	18800015 	stw	r2,0(r3)
   14430:	00000406 	br	14444 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14434:	00144640 	call	14464 <alt_get_errno>
   14438:	1007883a 	mov	r3,r2
   1443c:	00801444 	movi	r2,81
   14440:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14444:	00bfffc4 	movi	r2,-1
   14448:	e0bffe15 	stw	r2,-8(fp)
   1444c:	e0bffe17 	ldw	r2,-8(fp)
}
   14450:	e037883a 	mov	sp,fp
   14454:	dfc00117 	ldw	ra,4(sp)
   14458:	df000017 	ldw	fp,0(sp)
   1445c:	dec00204 	addi	sp,sp,8
   14460:	f800283a 	ret

00014464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14464:	defffd04 	addi	sp,sp,-12
   14468:	dfc00215 	stw	ra,8(sp)
   1446c:	df000115 	stw	fp,4(sp)
   14470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14474:	00800074 	movhi	r2,1
   14478:	10974a04 	addi	r2,r2,23848
   1447c:	10800017 	ldw	r2,0(r2)
   14480:	1005003a 	cmpeq	r2,r2,zero
   14484:	1000061e 	bne	r2,zero,144a0 <alt_get_errno+0x3c>
   14488:	00800074 	movhi	r2,1
   1448c:	10974a04 	addi	r2,r2,23848
   14490:	10800017 	ldw	r2,0(r2)
   14494:	103ee83a 	callr	r2
   14498:	e0bfff15 	stw	r2,-4(fp)
   1449c:	00000306 	br	144ac <alt_get_errno+0x48>
   144a0:	00800074 	movhi	r2,1
   144a4:	10980804 	addi	r2,r2,24608
   144a8:	e0bfff15 	stw	r2,-4(fp)
   144ac:	e0bfff17 	ldw	r2,-4(fp)
}
   144b0:	e037883a 	mov	sp,fp
   144b4:	dfc00117 	ldw	ra,4(sp)
   144b8:	df000017 	ldw	fp,0(sp)
   144bc:	dec00204 	addi	sp,sp,8
   144c0:	f800283a 	ret

000144c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   144c4:	defffd04 	addi	sp,sp,-12
   144c8:	dfc00215 	stw	ra,8(sp)
   144cc:	df000115 	stw	fp,4(sp)
   144d0:	df000104 	addi	fp,sp,4
   144d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   144d8:	001513c0 	call	1513c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   144dc:	00800044 	movi	r2,1
   144e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   144e4:	e037883a 	mov	sp,fp
   144e8:	dfc00117 	ldw	ra,4(sp)
   144ec:	df000017 	ldw	fp,0(sp)
   144f0:	dec00204 	addi	sp,sp,8
   144f4:	f800283a 	ret

000144f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   144f8:	defffe04 	addi	sp,sp,-8
   144fc:	dfc00115 	stw	ra,4(sp)
   14500:	df000015 	stw	fp,0(sp)
   14504:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   14508:	01000074 	movhi	r4,1
   1450c:	2116cd04 	addi	r4,r4,23348
   14510:	00145280 	call	14528 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   14514:	e037883a 	mov	sp,fp
   14518:	dfc00117 	ldw	ra,4(sp)
   1451c:	df000017 	ldw	fp,0(sp)
   14520:	dec00204 	addi	sp,sp,8
   14524:	f800283a 	ret

00014528 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14528:	defffd04 	addi	sp,sp,-12
   1452c:	dfc00215 	stw	ra,8(sp)
   14530:	df000115 	stw	fp,4(sp)
   14534:	df000104 	addi	fp,sp,4
   14538:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1453c:	e13fff17 	ldw	r4,-4(fp)
   14540:	01400074 	movhi	r5,1
   14544:	29574704 	addi	r5,r5,23836
   14548:	0014ad00 	call	14ad0 <alt_dev_llist_insert>
}
   1454c:	e037883a 	mov	sp,fp
   14550:	dfc00117 	ldw	ra,4(sp)
   14554:	df000017 	ldw	fp,0(sp)
   14558:	dec00204 	addi	sp,sp,8
   1455c:	f800283a 	ret

00014560 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14560:	defffa04 	addi	sp,sp,-24
   14564:	dfc00515 	stw	ra,20(sp)
   14568:	df000415 	stw	fp,16(sp)
   1456c:	df000404 	addi	fp,sp,16
   14570:	e13ffd15 	stw	r4,-12(fp)
   14574:	e17ffe15 	stw	r5,-8(fp)
   14578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1457c:	e0bffd17 	ldw	r2,-12(fp)
   14580:	10800017 	ldw	r2,0(r2)
   14584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14588:	e0bffc17 	ldw	r2,-16(fp)
   1458c:	11000a04 	addi	r4,r2,40
   14590:	e0bffd17 	ldw	r2,-12(fp)
   14594:	11c00217 	ldw	r7,8(r2)
   14598:	e17ffe17 	ldw	r5,-8(fp)
   1459c:	e1bfff17 	ldw	r6,-4(fp)
   145a0:	00146100 	call	14610 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   145a4:	e037883a 	mov	sp,fp
   145a8:	dfc00117 	ldw	ra,4(sp)
   145ac:	df000017 	ldw	fp,0(sp)
   145b0:	dec00204 	addi	sp,sp,8
   145b4:	f800283a 	ret

000145b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   145b8:	defffa04 	addi	sp,sp,-24
   145bc:	dfc00515 	stw	ra,20(sp)
   145c0:	df000415 	stw	fp,16(sp)
   145c4:	df000404 	addi	fp,sp,16
   145c8:	e13ffd15 	stw	r4,-12(fp)
   145cc:	e17ffe15 	stw	r5,-8(fp)
   145d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	10800017 	ldw	r2,0(r2)
   145dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   145e0:	e0bffc17 	ldw	r2,-16(fp)
   145e4:	11000a04 	addi	r4,r2,40
   145e8:	e0bffd17 	ldw	r2,-12(fp)
   145ec:	11c00217 	ldw	r7,8(r2)
   145f0:	e17ffe17 	ldw	r5,-8(fp)
   145f4:	e1bfff17 	ldw	r6,-4(fp)
   145f8:	00147140 	call	14714 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   145fc:	e037883a 	mov	sp,fp
   14600:	dfc00117 	ldw	ra,4(sp)
   14604:	df000017 	ldw	fp,0(sp)
   14608:	dec00204 	addi	sp,sp,8
   1460c:	f800283a 	ret

00014610 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   14610:	defff604 	addi	sp,sp,-40
   14614:	df000915 	stw	fp,36(sp)
   14618:	df000904 	addi	fp,sp,36
   1461c:	e13ffb15 	stw	r4,-20(fp)
   14620:	e17ffc15 	stw	r5,-16(fp)
   14624:	e1bffd15 	stw	r6,-12(fp)
   14628:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   1462c:	e0bffb17 	ldw	r2,-20(fp)
   14630:	10800017 	ldw	r2,0(r2)
   14634:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   14638:	e0bffc17 	ldw	r2,-16(fp)
   1463c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   14640:	e0bffd17 	ldw	r2,-12(fp)
   14644:	1007883a 	mov	r3,r2
   14648:	e0bffc17 	ldw	r2,-16(fp)
   1464c:	10c5883a 	add	r2,r2,r3
   14650:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   14654:	00001606 	br	146b0 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14658:	e0bffa17 	ldw	r2,-24(fp)
   1465c:	10800037 	ldwio	r2,0(r2)
   14660:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   14664:	e0bff717 	ldw	r2,-36(fp)
   14668:	10a0000c 	andi	r2,r2,32768
   1466c:	1005003a 	cmpeq	r2,r2,zero
   14670:	1000081e 	bne	r2,zero,14694 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14674:	e0bff717 	ldw	r2,-36(fp)
   14678:	1007883a 	mov	r3,r2
   1467c:	e0bff917 	ldw	r2,-28(fp)
   14680:	10c00005 	stb	r3,0(r2)
   14684:	e0bff917 	ldw	r2,-28(fp)
   14688:	10800044 	addi	r2,r2,1
   1468c:	e0bff915 	stw	r2,-28(fp)
   14690:	00000706 	br	146b0 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   14694:	e0fff917 	ldw	r3,-28(fp)
   14698:	e0bffc17 	ldw	r2,-16(fp)
   1469c:	1880071e 	bne	r3,r2,146bc <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   146a0:	e0bffe17 	ldw	r2,-8(fp)
   146a4:	1090000c 	andi	r2,r2,16384
   146a8:	1004c03a 	cmpne	r2,r2,zero
   146ac:	1000031e 	bne	r2,zero,146bc <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   146b0:	e0fff917 	ldw	r3,-28(fp)
   146b4:	e0bff817 	ldw	r2,-32(fp)
   146b8:	18bfe736 	bltu	r3,r2,14658 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   146bc:	e0fff917 	ldw	r3,-28(fp)
   146c0:	e0bffc17 	ldw	r2,-16(fp)
   146c4:	18800526 	beq	r3,r2,146dc <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   146c8:	e0fff917 	ldw	r3,-28(fp)
   146cc:	e0bffc17 	ldw	r2,-16(fp)
   146d0:	1887c83a 	sub	r3,r3,r2
   146d4:	e0ffff15 	stw	r3,-4(fp)
   146d8:	00000906 	br	14700 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   146dc:	e0bffe17 	ldw	r2,-8(fp)
   146e0:	1090000c 	andi	r2,r2,16384
   146e4:	1005003a 	cmpeq	r2,r2,zero
   146e8:	1000031e 	bne	r2,zero,146f8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   146ec:	00bffd44 	movi	r2,-11
   146f0:	e0bfff15 	stw	r2,-4(fp)
   146f4:	00000206 	br	14700 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   146f8:	00bffec4 	movi	r2,-5
   146fc:	e0bfff15 	stw	r2,-4(fp)
   14700:	e0bfff17 	ldw	r2,-4(fp)
}
   14704:	e037883a 	mov	sp,fp
   14708:	df000017 	ldw	fp,0(sp)
   1470c:	dec00104 	addi	sp,sp,4
   14710:	f800283a 	ret

00014714 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14714:	defff904 	addi	sp,sp,-28
   14718:	df000615 	stw	fp,24(sp)
   1471c:	df000604 	addi	fp,sp,24
   14720:	e13ffc15 	stw	r4,-16(fp)
   14724:	e17ffd15 	stw	r5,-12(fp)
   14728:	e1bffe15 	stw	r6,-8(fp)
   1472c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   14730:	e0bffc17 	ldw	r2,-16(fp)
   14734:	10800017 	ldw	r2,0(r2)
   14738:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   1473c:	e0bffe17 	ldw	r2,-8(fp)
   14740:	1007883a 	mov	r3,r2
   14744:	e0bffd17 	ldw	r2,-12(fp)
   14748:	10c5883a 	add	r2,r2,r3
   1474c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   14750:	00001106 	br	14798 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   14754:	e0bffb17 	ldw	r2,-20(fp)
   14758:	10800104 	addi	r2,r2,4
   1475c:	10800037 	ldwio	r2,0(r2)
   14760:	10bfffec 	andhi	r2,r2,65535
   14764:	1005003a 	cmpeq	r2,r2,zero
   14768:	10000b1e 	bne	r2,zero,14798 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1476c:	e13ffb17 	ldw	r4,-20(fp)
   14770:	e0bffd17 	ldw	r2,-12(fp)
   14774:	10800003 	ldbu	r2,0(r2)
   14778:	10c03fcc 	andi	r3,r2,255
   1477c:	18c0201c 	xori	r3,r3,128
   14780:	18ffe004 	addi	r3,r3,-128
   14784:	e0bffd17 	ldw	r2,-12(fp)
   14788:	10800044 	addi	r2,r2,1
   1478c:	e0bffd15 	stw	r2,-12(fp)
   14790:	2005883a 	mov	r2,r4
   14794:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   14798:	e0fffd17 	ldw	r3,-12(fp)
   1479c:	e0bffa17 	ldw	r2,-24(fp)
   147a0:	18bfec36 	bltu	r3,r2,14754 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   147a4:	e0bffe17 	ldw	r2,-8(fp)
}
   147a8:	e037883a 	mov	sp,fp
   147ac:	df000017 	ldw	fp,0(sp)
   147b0:	dec00104 	addi	sp,sp,4
   147b4:	f800283a 	ret

000147b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   147b8:	defffa04 	addi	sp,sp,-24
   147bc:	dfc00515 	stw	ra,20(sp)
   147c0:	df000415 	stw	fp,16(sp)
   147c4:	df000404 	addi	fp,sp,16
   147c8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   147cc:	008000c4 	movi	r2,3
   147d0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   147d4:	e0fffc17 	ldw	r3,-16(fp)
   147d8:	008003f4 	movhi	r2,15
   147dc:	10909004 	addi	r2,r2,16960
   147e0:	188b383a 	mul	r5,r3,r2
   147e4:	0100bef4 	movhi	r4,763
   147e8:	213c2004 	addi	r4,r4,-3968
   147ec:	00141ac0 	call	141ac <__udivsi3>
   147f0:	100b883a 	mov	r5,r2
   147f4:	01200034 	movhi	r4,32768
   147f8:	213fffc4 	addi	r4,r4,-1
   147fc:	00141ac0 	call	141ac <__udivsi3>
   14800:	100b883a 	mov	r5,r2
   14804:	e13fff17 	ldw	r4,-4(fp)
   14808:	00141ac0 	call	141ac <__udivsi3>
   1480c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   14810:	e0bffd17 	ldw	r2,-12(fp)
   14814:	1005003a 	cmpeq	r2,r2,zero
   14818:	1000281e 	bne	r2,zero,148bc <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   1481c:	e03ffe15 	stw	zero,-8(fp)
   14820:	00001606 	br	1487c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14824:	00a00034 	movhi	r2,32768
   14828:	10bfffc4 	addi	r2,r2,-1
   1482c:	10bfffc4 	addi	r2,r2,-1
   14830:	103ffe1e 	bne	r2,zero,1482c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14834:	e0fffc17 	ldw	r3,-16(fp)
   14838:	008003f4 	movhi	r2,15
   1483c:	10909004 	addi	r2,r2,16960
   14840:	188b383a 	mul	r5,r3,r2
   14844:	0100bef4 	movhi	r4,763
   14848:	213c2004 	addi	r4,r4,-3968
   1484c:	00141ac0 	call	141ac <__udivsi3>
   14850:	100b883a 	mov	r5,r2
   14854:	01200034 	movhi	r4,32768
   14858:	213fffc4 	addi	r4,r4,-1
   1485c:	00141ac0 	call	141ac <__udivsi3>
   14860:	1007883a 	mov	r3,r2
   14864:	e0bfff17 	ldw	r2,-4(fp)
   14868:	10c5c83a 	sub	r2,r2,r3
   1486c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   14870:	e0bffe17 	ldw	r2,-8(fp)
   14874:	10800044 	addi	r2,r2,1
   14878:	e0bffe15 	stw	r2,-8(fp)
   1487c:	e0fffe17 	ldw	r3,-8(fp)
   14880:	e0bffd17 	ldw	r2,-12(fp)
   14884:	18bfe716 	blt	r3,r2,14824 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14888:	e0fffc17 	ldw	r3,-16(fp)
   1488c:	008003f4 	movhi	r2,15
   14890:	10909004 	addi	r2,r2,16960
   14894:	188b383a 	mul	r5,r3,r2
   14898:	0100bef4 	movhi	r4,763
   1489c:	213c2004 	addi	r4,r4,-3968
   148a0:	00141ac0 	call	141ac <__udivsi3>
   148a4:	1007883a 	mov	r3,r2
   148a8:	e0bfff17 	ldw	r2,-4(fp)
   148ac:	1885383a 	mul	r2,r3,r2
   148b0:	10bfffc4 	addi	r2,r2,-1
   148b4:	103ffe1e 	bne	r2,zero,148b0 <alt_busy_sleep+0xf8>
   148b8:	00000c06 	br	148ec <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   148bc:	e0fffc17 	ldw	r3,-16(fp)
   148c0:	008003f4 	movhi	r2,15
   148c4:	10909004 	addi	r2,r2,16960
   148c8:	188b383a 	mul	r5,r3,r2
   148cc:	0100bef4 	movhi	r4,763
   148d0:	213c2004 	addi	r4,r4,-3968
   148d4:	00141ac0 	call	141ac <__udivsi3>
   148d8:	1007883a 	mov	r3,r2
   148dc:	e0bfff17 	ldw	r2,-4(fp)
   148e0:	1885383a 	mul	r2,r3,r2
   148e4:	10bfffc4 	addi	r2,r2,-1
   148e8:	00bffe16 	blt	zero,r2,148e4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   148ec:	0005883a 	mov	r2,zero
}
   148f0:	e037883a 	mov	sp,fp
   148f4:	dfc00117 	ldw	ra,4(sp)
   148f8:	df000017 	ldw	fp,0(sp)
   148fc:	dec00204 	addi	sp,sp,8
   14900:	f800283a 	ret

00014904 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   14904:	defff804 	addi	sp,sp,-32
   14908:	dfc00715 	stw	ra,28(sp)
   1490c:	df000615 	stw	fp,24(sp)
   14910:	df000604 	addi	fp,sp,24
   14914:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14918:	e0bffc17 	ldw	r2,-16(fp)
   1491c:	1004803a 	cmplt	r2,r2,zero
   14920:	1000081e 	bne	r2,zero,14944 <close+0x40>
   14924:	e0bffc17 	ldw	r2,-16(fp)
   14928:	10800324 	muli	r2,r2,12
   1492c:	1007883a 	mov	r3,r2
   14930:	00800074 	movhi	r2,1
   14934:	1096e204 	addi	r2,r2,23432
   14938:	1887883a 	add	r3,r3,r2
   1493c:	e0ffff15 	stw	r3,-4(fp)
   14940:	00000106 	br	14948 <close+0x44>
   14944:	e03fff15 	stw	zero,-4(fp)
   14948:	e0bfff17 	ldw	r2,-4(fp)
   1494c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   14950:	e0bffb17 	ldw	r2,-20(fp)
   14954:	1005003a 	cmpeq	r2,r2,zero
   14958:	10001d1e 	bne	r2,zero,149d0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1495c:	e0bffb17 	ldw	r2,-20(fp)
   14960:	10800017 	ldw	r2,0(r2)
   14964:	10800417 	ldw	r2,16(r2)
   14968:	1005003a 	cmpeq	r2,r2,zero
   1496c:	1000071e 	bne	r2,zero,1498c <close+0x88>
   14970:	e0bffb17 	ldw	r2,-20(fp)
   14974:	10800017 	ldw	r2,0(r2)
   14978:	10800417 	ldw	r2,16(r2)
   1497c:	e13ffb17 	ldw	r4,-20(fp)
   14980:	103ee83a 	callr	r2
   14984:	e0bffe15 	stw	r2,-8(fp)
   14988:	00000106 	br	14990 <close+0x8c>
   1498c:	e03ffe15 	stw	zero,-8(fp)
   14990:	e0bffe17 	ldw	r2,-8(fp)
   14994:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14998:	e13ffc17 	ldw	r4,-16(fp)
   1499c:	00150dc0 	call	150dc <alt_release_fd>
    if (rval < 0)
   149a0:	e0bffa17 	ldw	r2,-24(fp)
   149a4:	1004403a 	cmpge	r2,r2,zero
   149a8:	1000071e 	bne	r2,zero,149c8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   149ac:	0014a000 	call	14a00 <alt_get_errno>
   149b0:	e0fffa17 	ldw	r3,-24(fp)
   149b4:	00c7c83a 	sub	r3,zero,r3
   149b8:	10c00015 	stw	r3,0(r2)
      return -1;
   149bc:	00bfffc4 	movi	r2,-1
   149c0:	e0bffd15 	stw	r2,-12(fp)
   149c4:	00000806 	br	149e8 <close+0xe4>
    }
    return 0;
   149c8:	e03ffd15 	stw	zero,-12(fp)
   149cc:	00000606 	br	149e8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   149d0:	0014a000 	call	14a00 <alt_get_errno>
   149d4:	1007883a 	mov	r3,r2
   149d8:	00801444 	movi	r2,81
   149dc:	18800015 	stw	r2,0(r3)
    return -1;
   149e0:	00bfffc4 	movi	r2,-1
   149e4:	e0bffd15 	stw	r2,-12(fp)
   149e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   149ec:	e037883a 	mov	sp,fp
   149f0:	dfc00117 	ldw	ra,4(sp)
   149f4:	df000017 	ldw	fp,0(sp)
   149f8:	dec00204 	addi	sp,sp,8
   149fc:	f800283a 	ret

00014a00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14a00:	defffd04 	addi	sp,sp,-12
   14a04:	dfc00215 	stw	ra,8(sp)
   14a08:	df000115 	stw	fp,4(sp)
   14a0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14a10:	00800074 	movhi	r2,1
   14a14:	10974a04 	addi	r2,r2,23848
   14a18:	10800017 	ldw	r2,0(r2)
   14a1c:	1005003a 	cmpeq	r2,r2,zero
   14a20:	1000061e 	bne	r2,zero,14a3c <alt_get_errno+0x3c>
   14a24:	00800074 	movhi	r2,1
   14a28:	10974a04 	addi	r2,r2,23848
   14a2c:	10800017 	ldw	r2,0(r2)
   14a30:	103ee83a 	callr	r2
   14a34:	e0bfff15 	stw	r2,-4(fp)
   14a38:	00000306 	br	14a48 <alt_get_errno+0x48>
   14a3c:	00800074 	movhi	r2,1
   14a40:	10980804 	addi	r2,r2,24608
   14a44:	e0bfff15 	stw	r2,-4(fp)
   14a48:	e0bfff17 	ldw	r2,-4(fp)
}
   14a4c:	e037883a 	mov	sp,fp
   14a50:	dfc00117 	ldw	ra,4(sp)
   14a54:	df000017 	ldw	fp,0(sp)
   14a58:	dec00204 	addi	sp,sp,8
   14a5c:	f800283a 	ret

00014a60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14a60:	defffe04 	addi	sp,sp,-8
   14a64:	df000115 	stw	fp,4(sp)
   14a68:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14a6c:	e03fff15 	stw	zero,-4(fp)
   14a70:	00000506 	br	14a88 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   14a74:	e0bfff17 	ldw	r2,-4(fp)
   14a78:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   14a7c:	e0bfff17 	ldw	r2,-4(fp)
   14a80:	10800804 	addi	r2,r2,32
   14a84:	e0bfff15 	stw	r2,-4(fp)
   14a88:	e0bfff17 	ldw	r2,-4(fp)
   14a8c:	10820030 	cmpltui	r2,r2,2048
   14a90:	103ff81e 	bne	r2,zero,14a74 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14a94:	e037883a 	mov	sp,fp
   14a98:	df000017 	ldw	fp,0(sp)
   14a9c:	dec00104 	addi	sp,sp,4
   14aa0:	f800283a 	ret

00014aa4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   14aa4:	defffc04 	addi	sp,sp,-16
   14aa8:	df000315 	stw	fp,12(sp)
   14aac:	df000304 	addi	fp,sp,12
   14ab0:	e13ffd15 	stw	r4,-12(fp)
   14ab4:	e17ffe15 	stw	r5,-8(fp)
   14ab8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   14abc:	e0bfff17 	ldw	r2,-4(fp)
}
   14ac0:	e037883a 	mov	sp,fp
   14ac4:	df000017 	ldw	fp,0(sp)
   14ac8:	dec00104 	addi	sp,sp,4
   14acc:	f800283a 	ret

00014ad0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14ad0:	defff904 	addi	sp,sp,-28
   14ad4:	dfc00615 	stw	ra,24(sp)
   14ad8:	df000515 	stw	fp,20(sp)
   14adc:	df000504 	addi	fp,sp,20
   14ae0:	e13ffd15 	stw	r4,-12(fp)
   14ae4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14ae8:	e0bffd17 	ldw	r2,-12(fp)
   14aec:	1005003a 	cmpeq	r2,r2,zero
   14af0:	1000041e 	bne	r2,zero,14b04 <alt_dev_llist_insert+0x34>
   14af4:	e0bffd17 	ldw	r2,-12(fp)
   14af8:	10800217 	ldw	r2,8(r2)
   14afc:	1004c03a 	cmpne	r2,r2,zero
   14b00:	1000071e 	bne	r2,zero,14b20 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   14b04:	0014b840 	call	14b84 <alt_get_errno>
   14b08:	1007883a 	mov	r3,r2
   14b0c:	00800584 	movi	r2,22
   14b10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14b14:	00bffa84 	movi	r2,-22
   14b18:	e0bfff15 	stw	r2,-4(fp)
   14b1c:	00001306 	br	14b6c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14b20:	e0fffd17 	ldw	r3,-12(fp)
   14b24:	e0bffe17 	ldw	r2,-8(fp)
   14b28:	e0bffb15 	stw	r2,-20(fp)
   14b2c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14b30:	e0fffc17 	ldw	r3,-16(fp)
   14b34:	e0bffb17 	ldw	r2,-20(fp)
   14b38:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14b3c:	e0bffb17 	ldw	r2,-20(fp)
   14b40:	10c00017 	ldw	r3,0(r2)
   14b44:	e0bffc17 	ldw	r2,-16(fp)
   14b48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14b4c:	e0bffb17 	ldw	r2,-20(fp)
   14b50:	10c00017 	ldw	r3,0(r2)
   14b54:	e0bffc17 	ldw	r2,-16(fp)
   14b58:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   14b5c:	e0fffb17 	ldw	r3,-20(fp)
   14b60:	e0bffc17 	ldw	r2,-16(fp)
   14b64:	18800015 	stw	r2,0(r3)

  return 0;  
   14b68:	e03fff15 	stw	zero,-4(fp)
   14b6c:	e0bfff17 	ldw	r2,-4(fp)
}
   14b70:	e037883a 	mov	sp,fp
   14b74:	dfc00117 	ldw	ra,4(sp)
   14b78:	df000017 	ldw	fp,0(sp)
   14b7c:	dec00204 	addi	sp,sp,8
   14b80:	f800283a 	ret

00014b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b84:	defffd04 	addi	sp,sp,-12
   14b88:	dfc00215 	stw	ra,8(sp)
   14b8c:	df000115 	stw	fp,4(sp)
   14b90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14b94:	00800074 	movhi	r2,1
   14b98:	10974a04 	addi	r2,r2,23848
   14b9c:	10800017 	ldw	r2,0(r2)
   14ba0:	1005003a 	cmpeq	r2,r2,zero
   14ba4:	1000061e 	bne	r2,zero,14bc0 <alt_get_errno+0x3c>
   14ba8:	00800074 	movhi	r2,1
   14bac:	10974a04 	addi	r2,r2,23848
   14bb0:	10800017 	ldw	r2,0(r2)
   14bb4:	103ee83a 	callr	r2
   14bb8:	e0bfff15 	stw	r2,-4(fp)
   14bbc:	00000306 	br	14bcc <alt_get_errno+0x48>
   14bc0:	00800074 	movhi	r2,1
   14bc4:	10980804 	addi	r2,r2,24608
   14bc8:	e0bfff15 	stw	r2,-4(fp)
   14bcc:	e0bfff17 	ldw	r2,-4(fp)
}
   14bd0:	e037883a 	mov	sp,fp
   14bd4:	dfc00117 	ldw	ra,4(sp)
   14bd8:	df000017 	ldw	fp,0(sp)
   14bdc:	dec00204 	addi	sp,sp,8
   14be0:	f800283a 	ret

00014be4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14be4:	defffd04 	addi	sp,sp,-12
   14be8:	dfc00215 	stw	ra,8(sp)
   14bec:	df000115 	stw	fp,4(sp)
   14bf0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14bf4:	00bfff04 	movi	r2,-4
   14bf8:	00c00074 	movhi	r3,1
   14bfc:	18d61604 	addi	r3,r3,22616
   14c00:	1885883a 	add	r2,r3,r2
   14c04:	e0bfff15 	stw	r2,-4(fp)
   14c08:	00000606 	br	14c24 <_do_ctors+0x40>
        (*ctor) (); 
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	10800017 	ldw	r2,0(r2)
   14c14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14c18:	e0bfff17 	ldw	r2,-4(fp)
   14c1c:	10bfff04 	addi	r2,r2,-4
   14c20:	e0bfff15 	stw	r2,-4(fp)
   14c24:	e0ffff17 	ldw	r3,-4(fp)
   14c28:	00800074 	movhi	r2,1
   14c2c:	10961504 	addi	r2,r2,22612
   14c30:	18bff62e 	bgeu	r3,r2,14c0c <_do_ctors+0x28>
        (*ctor) (); 
}
   14c34:	e037883a 	mov	sp,fp
   14c38:	dfc00117 	ldw	ra,4(sp)
   14c3c:	df000017 	ldw	fp,0(sp)
   14c40:	dec00204 	addi	sp,sp,8
   14c44:	f800283a 	ret

00014c48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14c48:	defffd04 	addi	sp,sp,-12
   14c4c:	dfc00215 	stw	ra,8(sp)
   14c50:	df000115 	stw	fp,4(sp)
   14c54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14c58:	00bfff04 	movi	r2,-4
   14c5c:	00c00074 	movhi	r3,1
   14c60:	18d61604 	addi	r3,r3,22616
   14c64:	1885883a 	add	r2,r3,r2
   14c68:	e0bfff15 	stw	r2,-4(fp)
   14c6c:	00000606 	br	14c88 <_do_dtors+0x40>
        (*dtor) (); 
   14c70:	e0bfff17 	ldw	r2,-4(fp)
   14c74:	10800017 	ldw	r2,0(r2)
   14c78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14c7c:	e0bfff17 	ldw	r2,-4(fp)
   14c80:	10bfff04 	addi	r2,r2,-4
   14c84:	e0bfff15 	stw	r2,-4(fp)
   14c88:	e0ffff17 	ldw	r3,-4(fp)
   14c8c:	00800074 	movhi	r2,1
   14c90:	10961604 	addi	r2,r2,22616
   14c94:	18bff62e 	bgeu	r3,r2,14c70 <_do_dtors+0x28>
        (*dtor) (); 
}
   14c98:	e037883a 	mov	sp,fp
   14c9c:	dfc00117 	ldw	ra,4(sp)
   14ca0:	df000017 	ldw	fp,0(sp)
   14ca4:	dec00204 	addi	sp,sp,8
   14ca8:	f800283a 	ret

00014cac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14cac:	defffe04 	addi	sp,sp,-8
   14cb0:	dfc00115 	stw	ra,4(sp)
   14cb4:	df000015 	stw	fp,0(sp)
   14cb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14cbc:	0009883a 	mov	r4,zero
   14cc0:	01440004 	movi	r5,4096
   14cc4:	00153c80 	call	153c8 <alt_icache_flush>
#endif
}
   14cc8:	e037883a 	mov	sp,fp
   14ccc:	dfc00117 	ldw	ra,4(sp)
   14cd0:	df000017 	ldw	fp,0(sp)
   14cd4:	dec00204 	addi	sp,sp,8
   14cd8:	f800283a 	ret

00014cdc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14cdc:	defff904 	addi	sp,sp,-28
   14ce0:	dfc00615 	stw	ra,24(sp)
   14ce4:	df000515 	stw	fp,20(sp)
   14ce8:	df000504 	addi	fp,sp,20
   14cec:	e13ffc15 	stw	r4,-16(fp)
   14cf0:	e17ffd15 	stw	r5,-12(fp)
   14cf4:	e1bffe15 	stw	r6,-8(fp)
   14cf8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14cfc:	e13ffd17 	ldw	r4,-12(fp)
   14d00:	e17ffe17 	ldw	r5,-8(fp)
   14d04:	e1bfff17 	ldw	r6,-4(fp)
   14d08:	0014ef40 	call	14ef4 <open>
   14d0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14d10:	e0bffb17 	ldw	r2,-20(fp)
   14d14:	1004803a 	cmplt	r2,r2,zero
   14d18:	10001c1e 	bne	r2,zero,14d8c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   14d1c:	e0bffb17 	ldw	r2,-20(fp)
   14d20:	00c00074 	movhi	r3,1
   14d24:	18d6e204 	addi	r3,r3,23432
   14d28:	10800324 	muli	r2,r2,12
   14d2c:	10c5883a 	add	r2,r2,r3
   14d30:	10c00017 	ldw	r3,0(r2)
   14d34:	e0bffc17 	ldw	r2,-16(fp)
   14d38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14d3c:	e0bffb17 	ldw	r2,-20(fp)
   14d40:	00c00074 	movhi	r3,1
   14d44:	18d6e204 	addi	r3,r3,23432
   14d48:	10800324 	muli	r2,r2,12
   14d4c:	10c5883a 	add	r2,r2,r3
   14d50:	10800104 	addi	r2,r2,4
   14d54:	10c00017 	ldw	r3,0(r2)
   14d58:	e0bffc17 	ldw	r2,-16(fp)
   14d5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14d60:	e0bffb17 	ldw	r2,-20(fp)
   14d64:	00c00074 	movhi	r3,1
   14d68:	18d6e204 	addi	r3,r3,23432
   14d6c:	10800324 	muli	r2,r2,12
   14d70:	10c5883a 	add	r2,r2,r3
   14d74:	10800204 	addi	r2,r2,8
   14d78:	10c00017 	ldw	r3,0(r2)
   14d7c:	e0bffc17 	ldw	r2,-16(fp)
   14d80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14d84:	e13ffb17 	ldw	r4,-20(fp)
   14d88:	00150dc0 	call	150dc <alt_release_fd>
  }
} 
   14d8c:	e037883a 	mov	sp,fp
   14d90:	dfc00117 	ldw	ra,4(sp)
   14d94:	df000017 	ldw	fp,0(sp)
   14d98:	dec00204 	addi	sp,sp,8
   14d9c:	f800283a 	ret

00014da0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14da0:	defffb04 	addi	sp,sp,-20
   14da4:	dfc00415 	stw	ra,16(sp)
   14da8:	df000315 	stw	fp,12(sp)
   14dac:	df000304 	addi	fp,sp,12
   14db0:	e13ffd15 	stw	r4,-12(fp)
   14db4:	e17ffe15 	stw	r5,-8(fp)
   14db8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14dbc:	01000074 	movhi	r4,1
   14dc0:	2116e504 	addi	r4,r4,23444
   14dc4:	e17ffd17 	ldw	r5,-12(fp)
   14dc8:	01800044 	movi	r6,1
   14dcc:	01c07fc4 	movi	r7,511
   14dd0:	0014cdc0 	call	14cdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14dd4:	01000074 	movhi	r4,1
   14dd8:	2116e204 	addi	r4,r4,23432
   14ddc:	e17ffe17 	ldw	r5,-8(fp)
   14de0:	000d883a 	mov	r6,zero
   14de4:	01c07fc4 	movi	r7,511
   14de8:	0014cdc0 	call	14cdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14dec:	01000074 	movhi	r4,1
   14df0:	2116e804 	addi	r4,r4,23456
   14df4:	e17fff17 	ldw	r5,-4(fp)
   14df8:	01800044 	movi	r6,1
   14dfc:	01c07fc4 	movi	r7,511
   14e00:	0014cdc0 	call	14cdc <alt_open_fd>
}  
   14e04:	e037883a 	mov	sp,fp
   14e08:	dfc00117 	ldw	ra,4(sp)
   14e0c:	df000017 	ldw	fp,0(sp)
   14e10:	dec00204 	addi	sp,sp,8
   14e14:	f800283a 	ret

00014e18 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14e18:	defffc04 	addi	sp,sp,-16
   14e1c:	df000315 	stw	fp,12(sp)
   14e20:	df000304 	addi	fp,sp,12
   14e24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14e28:	e0bffe17 	ldw	r2,-8(fp)
   14e2c:	10800217 	ldw	r2,8(r2)
   14e30:	10d00034 	orhi	r3,r2,16384
   14e34:	e0bffe17 	ldw	r2,-8(fp)
   14e38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14e3c:	e03ffd15 	stw	zero,-12(fp)
   14e40:	00002006 	br	14ec4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14e44:	e0bffd17 	ldw	r2,-12(fp)
   14e48:	00c00074 	movhi	r3,1
   14e4c:	18d6e204 	addi	r3,r3,23432
   14e50:	10800324 	muli	r2,r2,12
   14e54:	10c5883a 	add	r2,r2,r3
   14e58:	10c00017 	ldw	r3,0(r2)
   14e5c:	e0bffe17 	ldw	r2,-8(fp)
   14e60:	10800017 	ldw	r2,0(r2)
   14e64:	1880141e 	bne	r3,r2,14eb8 <alt_file_locked+0xa0>
   14e68:	e0bffd17 	ldw	r2,-12(fp)
   14e6c:	00c00074 	movhi	r3,1
   14e70:	18d6e204 	addi	r3,r3,23432
   14e74:	10800324 	muli	r2,r2,12
   14e78:	10c5883a 	add	r2,r2,r3
   14e7c:	10800204 	addi	r2,r2,8
   14e80:	10800017 	ldw	r2,0(r2)
   14e84:	1004403a 	cmpge	r2,r2,zero
   14e88:	10000b1e 	bne	r2,zero,14eb8 <alt_file_locked+0xa0>
   14e8c:	e0bffd17 	ldw	r2,-12(fp)
   14e90:	10800324 	muli	r2,r2,12
   14e94:	1007883a 	mov	r3,r2
   14e98:	00800074 	movhi	r2,1
   14e9c:	1096e204 	addi	r2,r2,23432
   14ea0:	1887883a 	add	r3,r3,r2
   14ea4:	e0bffe17 	ldw	r2,-8(fp)
   14ea8:	18800326 	beq	r3,r2,14eb8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14eac:	00bffcc4 	movi	r2,-13
   14eb0:	e0bfff15 	stw	r2,-4(fp)
   14eb4:	00000a06 	br	14ee0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14eb8:	e0bffd17 	ldw	r2,-12(fp)
   14ebc:	10800044 	addi	r2,r2,1
   14ec0:	e0bffd15 	stw	r2,-12(fp)
   14ec4:	00800074 	movhi	r2,1
   14ec8:	10974904 	addi	r2,r2,23844
   14ecc:	10800017 	ldw	r2,0(r2)
   14ed0:	1007883a 	mov	r3,r2
   14ed4:	e0bffd17 	ldw	r2,-12(fp)
   14ed8:	18bfda2e 	bgeu	r3,r2,14e44 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14edc:	e03fff15 	stw	zero,-4(fp)
   14ee0:	e0bfff17 	ldw	r2,-4(fp)
}
   14ee4:	e037883a 	mov	sp,fp
   14ee8:	df000017 	ldw	fp,0(sp)
   14eec:	dec00104 	addi	sp,sp,4
   14ef0:	f800283a 	ret

00014ef4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14ef4:	defff404 	addi	sp,sp,-48
   14ef8:	dfc00b15 	stw	ra,44(sp)
   14efc:	df000a15 	stw	fp,40(sp)
   14f00:	df000a04 	addi	fp,sp,40
   14f04:	e13ffb15 	stw	r4,-20(fp)
   14f08:	e17ffc15 	stw	r5,-16(fp)
   14f0c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14f10:	00bfffc4 	movi	r2,-1
   14f14:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   14f18:	00bffb44 	movi	r2,-19
   14f1c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   14f20:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14f24:	e13ffb17 	ldw	r4,-20(fp)
   14f28:	01400074 	movhi	r5,1
   14f2c:	29574704 	addi	r5,r5,23836
   14f30:	001515c0 	call	1515c <alt_find_dev>
   14f34:	e0bffa15 	stw	r2,-24(fp)
   14f38:	e0bffa17 	ldw	r2,-24(fp)
   14f3c:	1004c03a 	cmpne	r2,r2,zero
   14f40:	1000051e 	bne	r2,zero,14f58 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14f44:	e13ffb17 	ldw	r4,-20(fp)
   14f48:	00151f00 	call	151f0 <alt_find_file>
   14f4c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   14f50:	00800044 	movi	r2,1
   14f54:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14f58:	e0bffa17 	ldw	r2,-24(fp)
   14f5c:	1005003a 	cmpeq	r2,r2,zero
   14f60:	1000301e 	bne	r2,zero,15024 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14f64:	e13ffa17 	ldw	r4,-24(fp)
   14f68:	00153100 	call	15310 <alt_get_fd>
   14f6c:	e0bff815 	stw	r2,-32(fp)
   14f70:	e0bff817 	ldw	r2,-32(fp)
   14f74:	1004403a 	cmpge	r2,r2,zero
   14f78:	1000031e 	bne	r2,zero,14f88 <open+0x94>
    {
      status = index;
   14f7c:	e0bff817 	ldw	r2,-32(fp)
   14f80:	e0bff715 	stw	r2,-36(fp)
   14f84:	00002906 	br	1502c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   14f88:	e0bff817 	ldw	r2,-32(fp)
   14f8c:	10800324 	muli	r2,r2,12
   14f90:	1007883a 	mov	r3,r2
   14f94:	00800074 	movhi	r2,1
   14f98:	1096e204 	addi	r2,r2,23432
   14f9c:	1885883a 	add	r2,r3,r2
   14fa0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14fa4:	e0fffc17 	ldw	r3,-16(fp)
   14fa8:	00900034 	movhi	r2,16384
   14fac:	10bfffc4 	addi	r2,r2,-1
   14fb0:	1886703a 	and	r3,r3,r2
   14fb4:	e0bff917 	ldw	r2,-28(fp)
   14fb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14fbc:	e0bff617 	ldw	r2,-40(fp)
   14fc0:	1004c03a 	cmpne	r2,r2,zero
   14fc4:	1000061e 	bne	r2,zero,14fe0 <open+0xec>
   14fc8:	e13ff917 	ldw	r4,-28(fp)
   14fcc:	0014e180 	call	14e18 <alt_file_locked>
   14fd0:	e0bff715 	stw	r2,-36(fp)
   14fd4:	e0bff717 	ldw	r2,-36(fp)
   14fd8:	1004803a 	cmplt	r2,r2,zero
   14fdc:	1000131e 	bne	r2,zero,1502c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14fe0:	e0bffa17 	ldw	r2,-24(fp)
   14fe4:	10800317 	ldw	r2,12(r2)
   14fe8:	1005003a 	cmpeq	r2,r2,zero
   14fec:	1000091e 	bne	r2,zero,15014 <open+0x120>
   14ff0:	e0bffa17 	ldw	r2,-24(fp)
   14ff4:	10800317 	ldw	r2,12(r2)
   14ff8:	e13ff917 	ldw	r4,-28(fp)
   14ffc:	e17ffb17 	ldw	r5,-20(fp)
   15000:	e1bffc17 	ldw	r6,-16(fp)
   15004:	e1fffd17 	ldw	r7,-12(fp)
   15008:	103ee83a 	callr	r2
   1500c:	e0bfff15 	stw	r2,-4(fp)
   15010:	00000106 	br	15018 <open+0x124>
   15014:	e03fff15 	stw	zero,-4(fp)
   15018:	e0bfff17 	ldw	r2,-4(fp)
   1501c:	e0bff715 	stw	r2,-36(fp)
   15020:	00000206 	br	1502c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15024:	00bffb44 	movi	r2,-19
   15028:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1502c:	e0bff717 	ldw	r2,-36(fp)
   15030:	1004403a 	cmpge	r2,r2,zero
   15034:	1000091e 	bne	r2,zero,1505c <open+0x168>
  {
    alt_release_fd (index);  
   15038:	e13ff817 	ldw	r4,-32(fp)
   1503c:	00150dc0 	call	150dc <alt_release_fd>
    ALT_ERRNO = -status;
   15040:	001507c0 	call	1507c <alt_get_errno>
   15044:	e0fff717 	ldw	r3,-36(fp)
   15048:	00c7c83a 	sub	r3,zero,r3
   1504c:	10c00015 	stw	r3,0(r2)
    return -1;
   15050:	00bfffc4 	movi	r2,-1
   15054:	e0bffe15 	stw	r2,-8(fp)
   15058:	00000206 	br	15064 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1505c:	e0bff817 	ldw	r2,-32(fp)
   15060:	e0bffe15 	stw	r2,-8(fp)
   15064:	e0bffe17 	ldw	r2,-8(fp)
}
   15068:	e037883a 	mov	sp,fp
   1506c:	dfc00117 	ldw	ra,4(sp)
   15070:	df000017 	ldw	fp,0(sp)
   15074:	dec00204 	addi	sp,sp,8
   15078:	f800283a 	ret

0001507c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1507c:	defffd04 	addi	sp,sp,-12
   15080:	dfc00215 	stw	ra,8(sp)
   15084:	df000115 	stw	fp,4(sp)
   15088:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1508c:	00800074 	movhi	r2,1
   15090:	10974a04 	addi	r2,r2,23848
   15094:	10800017 	ldw	r2,0(r2)
   15098:	1005003a 	cmpeq	r2,r2,zero
   1509c:	1000061e 	bne	r2,zero,150b8 <alt_get_errno+0x3c>
   150a0:	00800074 	movhi	r2,1
   150a4:	10974a04 	addi	r2,r2,23848
   150a8:	10800017 	ldw	r2,0(r2)
   150ac:	103ee83a 	callr	r2
   150b0:	e0bfff15 	stw	r2,-4(fp)
   150b4:	00000306 	br	150c4 <alt_get_errno+0x48>
   150b8:	00800074 	movhi	r2,1
   150bc:	10980804 	addi	r2,r2,24608
   150c0:	e0bfff15 	stw	r2,-4(fp)
   150c4:	e0bfff17 	ldw	r2,-4(fp)
}
   150c8:	e037883a 	mov	sp,fp
   150cc:	dfc00117 	ldw	ra,4(sp)
   150d0:	df000017 	ldw	fp,0(sp)
   150d4:	dec00204 	addi	sp,sp,8
   150d8:	f800283a 	ret

000150dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   150dc:	defffe04 	addi	sp,sp,-8
   150e0:	df000115 	stw	fp,4(sp)
   150e4:	df000104 	addi	fp,sp,4
   150e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   150ec:	e0bfff17 	ldw	r2,-4(fp)
   150f0:	108000d0 	cmplti	r2,r2,3
   150f4:	10000d1e 	bne	r2,zero,1512c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   150f8:	e0bfff17 	ldw	r2,-4(fp)
   150fc:	00c00074 	movhi	r3,1
   15100:	18d6e204 	addi	r3,r3,23432
   15104:	10800324 	muli	r2,r2,12
   15108:	10c5883a 	add	r2,r2,r3
   1510c:	10800204 	addi	r2,r2,8
   15110:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   15114:	e0bfff17 	ldw	r2,-4(fp)
   15118:	00c00074 	movhi	r3,1
   1511c:	18d6e204 	addi	r3,r3,23432
   15120:	10800324 	muli	r2,r2,12
   15124:	10c5883a 	add	r2,r2,r3
   15128:	10000015 	stw	zero,0(r2)
  }
}
   1512c:	e037883a 	mov	sp,fp
   15130:	df000017 	ldw	fp,0(sp)
   15134:	dec00104 	addi	sp,sp,4
   15138:	f800283a 	ret

0001513c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1513c:	deffff04 	addi	sp,sp,-4
   15140:	df000015 	stw	fp,0(sp)
   15144:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15148:	000170fa 	wrctl	ienable,zero
}
   1514c:	e037883a 	mov	sp,fp
   15150:	df000017 	ldw	fp,0(sp)
   15154:	dec00104 	addi	sp,sp,4
   15158:	f800283a 	ret

0001515c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1515c:	defff904 	addi	sp,sp,-28
   15160:	dfc00615 	stw	ra,24(sp)
   15164:	df000515 	stw	fp,20(sp)
   15168:	df000504 	addi	fp,sp,20
   1516c:	e13ffd15 	stw	r4,-12(fp)
   15170:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15174:	e0bffe17 	ldw	r2,-8(fp)
   15178:	10800017 	ldw	r2,0(r2)
   1517c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15180:	e13ffd17 	ldw	r4,-12(fp)
   15184:	00138480 	call	13848 <strlen>
   15188:	10800044 	addi	r2,r2,1
   1518c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15190:	00000d06 	br	151c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15194:	e0bffc17 	ldw	r2,-16(fp)
   15198:	11000217 	ldw	r4,8(r2)
   1519c:	e1bffb17 	ldw	r6,-20(fp)
   151a0:	e17ffd17 	ldw	r5,-12(fp)
   151a4:	001548c0 	call	1548c <memcmp>
   151a8:	1004c03a 	cmpne	r2,r2,zero
   151ac:	1000031e 	bne	r2,zero,151bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   151b0:	e0bffc17 	ldw	r2,-16(fp)
   151b4:	e0bfff15 	stw	r2,-4(fp)
   151b8:	00000706 	br	151d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   151bc:	e0bffc17 	ldw	r2,-16(fp)
   151c0:	10800017 	ldw	r2,0(r2)
   151c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   151c8:	e0fffe17 	ldw	r3,-8(fp)
   151cc:	e0bffc17 	ldw	r2,-16(fp)
   151d0:	10fff01e 	bne	r2,r3,15194 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   151d4:	e03fff15 	stw	zero,-4(fp)
   151d8:	e0bfff17 	ldw	r2,-4(fp)
}
   151dc:	e037883a 	mov	sp,fp
   151e0:	dfc00117 	ldw	ra,4(sp)
   151e4:	df000017 	ldw	fp,0(sp)
   151e8:	dec00204 	addi	sp,sp,8
   151ec:	f800283a 	ret

000151f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   151f0:	defffa04 	addi	sp,sp,-24
   151f4:	dfc00515 	stw	ra,20(sp)
   151f8:	df000415 	stw	fp,16(sp)
   151fc:	df000404 	addi	fp,sp,16
   15200:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15204:	00800074 	movhi	r2,1
   15208:	10974504 	addi	r2,r2,23828
   1520c:	10800017 	ldw	r2,0(r2)
   15210:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15214:	00003306 	br	152e4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   15218:	e0bffd17 	ldw	r2,-12(fp)
   1521c:	11000217 	ldw	r4,8(r2)
   15220:	00138480 	call	13848 <strlen>
   15224:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   15228:	e0bffd17 	ldw	r2,-12(fp)
   1522c:	10c00217 	ldw	r3,8(r2)
   15230:	e0bffc17 	ldw	r2,-16(fp)
   15234:	1885883a 	add	r2,r3,r2
   15238:	10bfffc4 	addi	r2,r2,-1
   1523c:	10800003 	ldbu	r2,0(r2)
   15240:	10803fcc 	andi	r2,r2,255
   15244:	1080201c 	xori	r2,r2,128
   15248:	10bfe004 	addi	r2,r2,-128
   1524c:	10800bd8 	cmpnei	r2,r2,47
   15250:	1000031e 	bne	r2,zero,15260 <alt_find_file+0x70>
    {
      len -= 1;
   15254:	e0bffc17 	ldw	r2,-16(fp)
   15258:	10bfffc4 	addi	r2,r2,-1
   1525c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15260:	e0bffc17 	ldw	r2,-16(fp)
   15264:	1007883a 	mov	r3,r2
   15268:	e0bffe17 	ldw	r2,-8(fp)
   1526c:	1885883a 	add	r2,r3,r2
   15270:	10800003 	ldbu	r2,0(r2)
   15274:	10803fcc 	andi	r2,r2,255
   15278:	1080201c 	xori	r2,r2,128
   1527c:	10bfe004 	addi	r2,r2,-128
   15280:	10800be0 	cmpeqi	r2,r2,47
   15284:	10000a1e 	bne	r2,zero,152b0 <alt_find_file+0xc0>
   15288:	e0bffc17 	ldw	r2,-16(fp)
   1528c:	1007883a 	mov	r3,r2
   15290:	e0bffe17 	ldw	r2,-8(fp)
   15294:	1885883a 	add	r2,r3,r2
   15298:	10800003 	ldbu	r2,0(r2)
   1529c:	10803fcc 	andi	r2,r2,255
   152a0:	1080201c 	xori	r2,r2,128
   152a4:	10bfe004 	addi	r2,r2,-128
   152a8:	1004c03a 	cmpne	r2,r2,zero
   152ac:	10000a1e 	bne	r2,zero,152d8 <alt_find_file+0xe8>
   152b0:	e0bffd17 	ldw	r2,-12(fp)
   152b4:	11000217 	ldw	r4,8(r2)
   152b8:	e1bffc17 	ldw	r6,-16(fp)
   152bc:	e17ffe17 	ldw	r5,-8(fp)
   152c0:	001548c0 	call	1548c <memcmp>
   152c4:	1004c03a 	cmpne	r2,r2,zero
   152c8:	1000031e 	bne	r2,zero,152d8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   152cc:	e0bffd17 	ldw	r2,-12(fp)
   152d0:	e0bfff15 	stw	r2,-4(fp)
   152d4:	00000806 	br	152f8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   152d8:	e0bffd17 	ldw	r2,-12(fp)
   152dc:	10800017 	ldw	r2,0(r2)
   152e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   152e4:	00c00074 	movhi	r3,1
   152e8:	18d74504 	addi	r3,r3,23828
   152ec:	e0bffd17 	ldw	r2,-12(fp)
   152f0:	10ffc91e 	bne	r2,r3,15218 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   152f4:	e03fff15 	stw	zero,-4(fp)
   152f8:	e0bfff17 	ldw	r2,-4(fp)
}
   152fc:	e037883a 	mov	sp,fp
   15300:	dfc00117 	ldw	ra,4(sp)
   15304:	df000017 	ldw	fp,0(sp)
   15308:	dec00204 	addi	sp,sp,8
   1530c:	f800283a 	ret

00015310 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15310:	defffc04 	addi	sp,sp,-16
   15314:	df000315 	stw	fp,12(sp)
   15318:	df000304 	addi	fp,sp,12
   1531c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15320:	00bffa04 	movi	r2,-24
   15324:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15328:	e03ffe15 	stw	zero,-8(fp)
   1532c:	00001e06 	br	153a8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   15330:	e0bffe17 	ldw	r2,-8(fp)
   15334:	00c00074 	movhi	r3,1
   15338:	18d6e204 	addi	r3,r3,23432
   1533c:	10800324 	muli	r2,r2,12
   15340:	10c5883a 	add	r2,r2,r3
   15344:	10800017 	ldw	r2,0(r2)
   15348:	1004c03a 	cmpne	r2,r2,zero
   1534c:	1000131e 	bne	r2,zero,1539c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   15350:	e0bffe17 	ldw	r2,-8(fp)
   15354:	00c00074 	movhi	r3,1
   15358:	18d6e204 	addi	r3,r3,23432
   1535c:	10800324 	muli	r2,r2,12
   15360:	10c7883a 	add	r3,r2,r3
   15364:	e0bfff17 	ldw	r2,-4(fp)
   15368:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1536c:	00800074 	movhi	r2,1
   15370:	10974904 	addi	r2,r2,23844
   15374:	10c00017 	ldw	r3,0(r2)
   15378:	e0bffe17 	ldw	r2,-8(fp)
   1537c:	1880040e 	bge	r3,r2,15390 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   15380:	00c00074 	movhi	r3,1
   15384:	18d74904 	addi	r3,r3,23844
   15388:	e0bffe17 	ldw	r2,-8(fp)
   1538c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   15390:	e0bffe17 	ldw	r2,-8(fp)
   15394:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15398:	00000606 	br	153b4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1539c:	e0bffe17 	ldw	r2,-8(fp)
   153a0:	10800044 	addi	r2,r2,1
   153a4:	e0bffe15 	stw	r2,-8(fp)
   153a8:	e0bffe17 	ldw	r2,-8(fp)
   153ac:	10800810 	cmplti	r2,r2,32
   153b0:	103fdf1e 	bne	r2,zero,15330 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   153b4:	e0bffd17 	ldw	r2,-12(fp)
}
   153b8:	e037883a 	mov	sp,fp
   153bc:	df000017 	ldw	fp,0(sp)
   153c0:	dec00104 	addi	sp,sp,4
   153c4:	f800283a 	ret

000153c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   153c8:	defffb04 	addi	sp,sp,-20
   153cc:	df000415 	stw	fp,16(sp)
   153d0:	df000404 	addi	fp,sp,16
   153d4:	e13ffe15 	stw	r4,-8(fp)
   153d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   153dc:	e0bfff17 	ldw	r2,-4(fp)
   153e0:	10840070 	cmpltui	r2,r2,4097
   153e4:	1000021e 	bne	r2,zero,153f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   153e8:	00840004 	movi	r2,4096
   153ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   153f0:	e0fffe17 	ldw	r3,-8(fp)
   153f4:	e0bfff17 	ldw	r2,-4(fp)
   153f8:	1885883a 	add	r2,r3,r2
   153fc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15400:	e0bffe17 	ldw	r2,-8(fp)
   15404:	e0bffd15 	stw	r2,-12(fp)
   15408:	00000506 	br	15420 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1540c:	e0bffd17 	ldw	r2,-12(fp)
   15410:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15414:	e0bffd17 	ldw	r2,-12(fp)
   15418:	10800804 	addi	r2,r2,32
   1541c:	e0bffd15 	stw	r2,-12(fp)
   15420:	e0fffd17 	ldw	r3,-12(fp)
   15424:	e0bffc17 	ldw	r2,-16(fp)
   15428:	18bff836 	bltu	r3,r2,1540c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1542c:	e0bffe17 	ldw	r2,-8(fp)
   15430:	108007cc 	andi	r2,r2,31
   15434:	1005003a 	cmpeq	r2,r2,zero
   15438:	1000021e 	bne	r2,zero,15444 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1543c:	e0bffd17 	ldw	r2,-12(fp)
   15440:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   15444:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   15448:	e037883a 	mov	sp,fp
   1544c:	df000017 	ldw	fp,0(sp)
   15450:	dec00104 	addi	sp,sp,4
   15454:	f800283a 	ret

00015458 <atexit>:
   15458:	200b883a 	mov	r5,r4
   1545c:	000d883a 	mov	r6,zero
   15460:	0009883a 	mov	r4,zero
   15464:	000f883a 	mov	r7,zero
   15468:	00154c81 	jmpi	154c8 <__register_exitproc>

0001546c <exit>:
   1546c:	defffe04 	addi	sp,sp,-8
   15470:	dc400015 	stw	r17,0(sp)
   15474:	000b883a 	mov	r5,zero
   15478:	2023883a 	mov	r17,r4
   1547c:	dfc00115 	stw	ra,4(sp)
   15480:	00156380 	call	15638 <__call_exitprocs>
   15484:	8809883a 	mov	r4,r17
   15488:	00158340 	call	15834 <_exit>

0001548c <memcmp>:
   1548c:	31ffffc4 	addi	r7,r6,-1
   15490:	3000061e 	bne	r6,zero,154ac <memcmp+0x20>
   15494:	00000a06 	br	154c0 <memcmp+0x34>
   15498:	39ffffc4 	addi	r7,r7,-1
   1549c:	00bfffc4 	movi	r2,-1
   154a0:	21000044 	addi	r4,r4,1
   154a4:	29400044 	addi	r5,r5,1
   154a8:	38800526 	beq	r7,r2,154c0 <memcmp+0x34>
   154ac:	20c00003 	ldbu	r3,0(r4)
   154b0:	28800003 	ldbu	r2,0(r5)
   154b4:	18bff826 	beq	r3,r2,15498 <memcmp+0xc>
   154b8:	1885c83a 	sub	r2,r3,r2
   154bc:	f800283a 	ret
   154c0:	0005883a 	mov	r2,zero
   154c4:	f800283a 	ret

000154c8 <__register_exitproc>:
   154c8:	defff904 	addi	sp,sp,-28
   154cc:	00800074 	movhi	r2,1
   154d0:	10974404 	addi	r2,r2,23824
   154d4:	dc400115 	stw	r17,4(sp)
   154d8:	14400017 	ldw	r17,0(r2)
   154dc:	dc000015 	stw	r16,0(sp)
   154e0:	dd400515 	stw	r21,20(sp)
   154e4:	8c000c17 	ldw	r16,48(r17)
   154e8:	dd000415 	stw	r20,16(sp)
   154ec:	dcc00315 	stw	r19,12(sp)
   154f0:	dc800215 	stw	r18,8(sp)
   154f4:	dfc00615 	stw	ra,24(sp)
   154f8:	2025883a 	mov	r18,r4
   154fc:	282b883a 	mov	r21,r5
   15500:	3029883a 	mov	r20,r6
   15504:	3827883a 	mov	r19,r7
   15508:	80002626 	beq	r16,zero,155a4 <__register_exitproc+0xdc>
   1550c:	81400117 	ldw	r5,4(r16)
   15510:	008007c4 	movi	r2,31
   15514:	11403716 	blt	r2,r5,155f4 <__register_exitproc+0x12c>
   15518:	90002026 	beq	r18,zero,1559c <__register_exitproc+0xd4>
   1551c:	81802217 	ldw	r6,136(r16)
   15520:	30002926 	beq	r6,zero,155c8 <__register_exitproc+0x100>
   15524:	81400117 	ldw	r5,4(r16)
   15528:	00c00044 	movi	r3,1
   1552c:	31004017 	ldw	r4,256(r6)
   15530:	1946983a 	sll	r3,r3,r5
   15534:	2945883a 	add	r2,r5,r5
   15538:	1085883a 	add	r2,r2,r2
   1553c:	1185883a 	add	r2,r2,r6
   15540:	20c8b03a 	or	r4,r4,r3
   15544:	14c02015 	stw	r19,128(r2)
   15548:	15000015 	stw	r20,0(r2)
   1554c:	00800084 	movi	r2,2
   15550:	31004015 	stw	r4,256(r6)
   15554:	90801826 	beq	r18,r2,155b8 <__register_exitproc+0xf0>
   15558:	2945883a 	add	r2,r5,r5
   1555c:	1085883a 	add	r2,r2,r2
   15560:	1405883a 	add	r2,r2,r16
   15564:	28c00044 	addi	r3,r5,1
   15568:	0009883a 	mov	r4,zero
   1556c:	15400215 	stw	r21,8(r2)
   15570:	80c00115 	stw	r3,4(r16)
   15574:	2005883a 	mov	r2,r4
   15578:	dfc00617 	ldw	ra,24(sp)
   1557c:	dd400517 	ldw	r21,20(sp)
   15580:	dd000417 	ldw	r20,16(sp)
   15584:	dcc00317 	ldw	r19,12(sp)
   15588:	dc800217 	ldw	r18,8(sp)
   1558c:	dc400117 	ldw	r17,4(sp)
   15590:	dc000017 	ldw	r16,0(sp)
   15594:	dec00704 	addi	sp,sp,28
   15598:	f800283a 	ret
   1559c:	81400117 	ldw	r5,4(r16)
   155a0:	003fed06 	br	15558 <__register_exitproc+0x90>
   155a4:	00800074 	movhi	r2,1
   155a8:	10980c04 	addi	r2,r2,24624
   155ac:	1021883a 	mov	r16,r2
   155b0:	88800c15 	stw	r2,48(r17)
   155b4:	003fd506 	br	1550c <__register_exitproc+0x44>
   155b8:	30804117 	ldw	r2,260(r6)
   155bc:	10c4b03a 	or	r2,r2,r3
   155c0:	30804115 	stw	r2,260(r6)
   155c4:	003fe406 	br	15558 <__register_exitproc+0x90>
   155c8:	00800034 	movhi	r2,0
   155cc:	10800004 	addi	r2,r2,0
   155d0:	10000b26 	beq	r2,zero,15600 <__register_exitproc+0x138>
   155d4:	01004204 	movi	r4,264
   155d8:	103ee83a 	callr	r2
   155dc:	10000826 	beq	r2,zero,15600 <__register_exitproc+0x138>
   155e0:	100d883a 	mov	r6,r2
   155e4:	10004015 	stw	zero,256(r2)
   155e8:	10004115 	stw	zero,260(r2)
   155ec:	80802215 	stw	r2,136(r16)
   155f0:	003fcc06 	br	15524 <__register_exitproc+0x5c>
   155f4:	00800034 	movhi	r2,0
   155f8:	10800004 	addi	r2,r2,0
   155fc:	1000021e 	bne	r2,zero,15608 <__register_exitproc+0x140>
   15600:	013fffc4 	movi	r4,-1
   15604:	003fdb06 	br	15574 <__register_exitproc+0xac>
   15608:	01002304 	movi	r4,140
   1560c:	103ee83a 	callr	r2
   15610:	1007883a 	mov	r3,r2
   15614:	103ffa26 	beq	r2,zero,15600 <__register_exitproc+0x138>
   15618:	88800c17 	ldw	r2,48(r17)
   1561c:	1821883a 	mov	r16,r3
   15620:	18000115 	stw	zero,4(r3)
   15624:	18800015 	stw	r2,0(r3)
   15628:	88c00c15 	stw	r3,48(r17)
   1562c:	903fdb26 	beq	r18,zero,1559c <__register_exitproc+0xd4>
   15630:	003fba06 	br	1551c <__register_exitproc+0x54>

00015634 <register_fini>:
   15634:	f800283a 	ret

00015638 <__call_exitprocs>:
   15638:	defff304 	addi	sp,sp,-52
   1563c:	00800074 	movhi	r2,1
   15640:	10974404 	addi	r2,r2,23824
   15644:	df000b15 	stw	fp,44(sp)
   15648:	17000017 	ldw	fp,0(r2)
   1564c:	00800034 	movhi	r2,0
   15650:	10800004 	addi	r2,r2,0
   15654:	1005003a 	cmpeq	r2,r2,zero
   15658:	d8800215 	stw	r2,8(sp)
   1565c:	e0800c04 	addi	r2,fp,48
   15660:	dd800915 	stw	r22,36(sp)
   15664:	dd400815 	stw	r21,32(sp)
   15668:	dfc00c15 	stw	ra,48(sp)
   1566c:	ddc00a15 	stw	r23,40(sp)
   15670:	dd000715 	stw	r20,28(sp)
   15674:	dcc00615 	stw	r19,24(sp)
   15678:	dc800515 	stw	r18,20(sp)
   1567c:	dc400415 	stw	r17,16(sp)
   15680:	dc000315 	stw	r16,12(sp)
   15684:	282d883a 	mov	r22,r5
   15688:	d9000115 	stw	r4,4(sp)
   1568c:	d8800015 	stw	r2,0(sp)
   15690:	282b003a 	cmpeq	r21,r5,zero
   15694:	e4400c17 	ldw	r17,48(fp)
   15698:	88001226 	beq	r17,zero,156e4 <__call_exitprocs+0xac>
   1569c:	ddc00017 	ldw	r23,0(sp)
   156a0:	88800117 	ldw	r2,4(r17)
   156a4:	8c802217 	ldw	r18,136(r17)
   156a8:	143fffc4 	addi	r16,r2,-1
   156ac:	80000b16 	blt	r16,zero,156dc <__call_exitprocs+0xa4>
   156b0:	9027003a 	cmpeq	r19,r18,zero
   156b4:	a800171e 	bne	r21,zero,15714 <__call_exitprocs+0xdc>
   156b8:	9800051e 	bne	r19,zero,156d0 <__call_exitprocs+0x98>
   156bc:	8409883a 	add	r4,r16,r16
   156c0:	2105883a 	add	r2,r4,r4
   156c4:	1485883a 	add	r2,r2,r18
   156c8:	10c02017 	ldw	r3,128(r2)
   156cc:	b0c01226 	beq	r22,r3,15718 <__call_exitprocs+0xe0>
   156d0:	843fffc4 	addi	r16,r16,-1
   156d4:	00bfffc4 	movi	r2,-1
   156d8:	80bff61e 	bne	r16,r2,156b4 <__call_exitprocs+0x7c>
   156dc:	d8800217 	ldw	r2,8(sp)
   156e0:	10003226 	beq	r2,zero,157ac <__call_exitprocs+0x174>
   156e4:	dfc00c17 	ldw	ra,48(sp)
   156e8:	df000b17 	ldw	fp,44(sp)
   156ec:	ddc00a17 	ldw	r23,40(sp)
   156f0:	dd800917 	ldw	r22,36(sp)
   156f4:	dd400817 	ldw	r21,32(sp)
   156f8:	dd000717 	ldw	r20,28(sp)
   156fc:	dcc00617 	ldw	r19,24(sp)
   15700:	dc800517 	ldw	r18,20(sp)
   15704:	dc400417 	ldw	r17,16(sp)
   15708:	dc000317 	ldw	r16,12(sp)
   1570c:	dec00d04 	addi	sp,sp,52
   15710:	f800283a 	ret
   15714:	8409883a 	add	r4,r16,r16
   15718:	88c00117 	ldw	r3,4(r17)
   1571c:	2105883a 	add	r2,r4,r4
   15720:	1445883a 	add	r2,r2,r17
   15724:	18ffffc4 	addi	r3,r3,-1
   15728:	11800217 	ldw	r6,8(r2)
   1572c:	1c001826 	beq	r3,r16,15790 <__call_exitprocs+0x158>
   15730:	10000215 	stw	zero,8(r2)
   15734:	303fe626 	beq	r6,zero,156d0 <__call_exitprocs+0x98>
   15738:	8d000117 	ldw	r20,4(r17)
   1573c:	9800121e 	bne	r19,zero,15788 <__call_exitprocs+0x150>
   15740:	00c00044 	movi	r3,1
   15744:	1c06983a 	sll	r3,r3,r16
   15748:	90804017 	ldw	r2,256(r18)
   1574c:	1884703a 	and	r2,r3,r2
   15750:	10000d26 	beq	r2,zero,15788 <__call_exitprocs+0x150>
   15754:	90804117 	ldw	r2,260(r18)
   15758:	1884703a 	and	r2,r3,r2
   1575c:	10000e1e 	bne	r2,zero,15798 <__call_exitprocs+0x160>
   15760:	2105883a 	add	r2,r4,r4
   15764:	1485883a 	add	r2,r2,r18
   15768:	11400017 	ldw	r5,0(r2)
   1576c:	d9000117 	ldw	r4,4(sp)
   15770:	303ee83a 	callr	r6
   15774:	88800117 	ldw	r2,4(r17)
   15778:	a0bfc61e 	bne	r20,r2,15694 <__call_exitprocs+0x5c>
   1577c:	b8800017 	ldw	r2,0(r23)
   15780:	147fd326 	beq	r2,r17,156d0 <__call_exitprocs+0x98>
   15784:	003fc306 	br	15694 <__call_exitprocs+0x5c>
   15788:	303ee83a 	callr	r6
   1578c:	003ff906 	br	15774 <__call_exitprocs+0x13c>
   15790:	8c000115 	stw	r16,4(r17)
   15794:	003fe706 	br	15734 <__call_exitprocs+0xfc>
   15798:	2105883a 	add	r2,r4,r4
   1579c:	1485883a 	add	r2,r2,r18
   157a0:	11000017 	ldw	r4,0(r2)
   157a4:	303ee83a 	callr	r6
   157a8:	003ff206 	br	15774 <__call_exitprocs+0x13c>
   157ac:	88800117 	ldw	r2,4(r17)
   157b0:	10000b1e 	bne	r2,zero,157e0 <__call_exitprocs+0x1a8>
   157b4:	89000017 	ldw	r4,0(r17)
   157b8:	20000a26 	beq	r4,zero,157e4 <__call_exitprocs+0x1ac>
   157bc:	b9000015 	stw	r4,0(r23)
   157c0:	90000226 	beq	r18,zero,157cc <__call_exitprocs+0x194>
   157c4:	9009883a 	mov	r4,r18
   157c8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   157cc:	8809883a 	mov	r4,r17
   157d0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   157d4:	bc400017 	ldw	r17,0(r23)
   157d8:	883fb11e 	bne	r17,zero,156a0 <__call_exitprocs+0x68>
   157dc:	003fc106 	br	156e4 <__call_exitprocs+0xac>
   157e0:	89000017 	ldw	r4,0(r17)
   157e4:	882f883a 	mov	r23,r17
   157e8:	2023883a 	mov	r17,r4
   157ec:	883fac1e 	bne	r17,zero,156a0 <__call_exitprocs+0x68>
   157f0:	003fbc06 	br	156e4 <__call_exitprocs+0xac>

000157f4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   157f4:	defffd04 	addi	sp,sp,-12
   157f8:	df000215 	stw	fp,8(sp)
   157fc:	df000204 	addi	fp,sp,8
   15800:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   15804:	e0bfff17 	ldw	r2,-4(fp)
   15808:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1580c:	e0bffe17 	ldw	r2,-8(fp)
   15810:	1005003a 	cmpeq	r2,r2,zero
   15814:	1000021e 	bne	r2,zero,15820 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   15818:	002af070 	cmpltui	zero,zero,43969
   1581c:	00000106 	br	15824 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   15820:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   15824:	e037883a 	mov	sp,fp
   15828:	df000017 	ldw	fp,0(sp)
   1582c:	dec00104 	addi	sp,sp,4
   15830:	f800283a 	ret

00015834 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15834:	defffd04 	addi	sp,sp,-12
   15838:	dfc00215 	stw	ra,8(sp)
   1583c:	df000115 	stw	fp,4(sp)
   15840:	df000104 	addi	fp,sp,4
   15844:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   15848:	e13fff17 	ldw	r4,-4(fp)
   1584c:	00157f40 	call	157f4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15850:	003fff06 	br	15850 <_exit+0x1c>
   15854:	00015634 	movhi	zero,1368
